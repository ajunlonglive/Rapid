<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2021 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
        
        <type>dataCopy</type>
        <name>Data copy</name>
	    <class>com.rapid.actions.Datacopy</class>
	    <helpHtml>Transfers data from one control to another.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewFormApplications>false</addToNewFormApplications>
	    
	    <properties>
	        
	        <property>
	            <key>copyType</key>
	            <name>Copy type</name>
	            <setConstructValueFunction>return "replace";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	            	<![CDATA[
// for backwards compatibility - at one time there was only the replace copyType so if it can't be found set it to false
if (!this.copyType || this.copyType == "false") this.copyType = "replace";
// for backwards compatibility - row merge was given the match rows facility but re-using childMerge, if the type is now row merge but there is a child field and childmerge in the past we must set the childMerge to false but only once
if (this.copyType == "row" && this.mergeChildren && (this.upgradeFix === undefined || this.upgradeFix < 1)) {
	// set mergeChildren to false as this feature was previously not available and old apps won't want it
	this.mergeChildren = false;
	// set the merge fix to 1 so we don't come in here again
	this.upgradeFix = 1;
}
// return the values
return [["replace","replace"],["bulk","bulk"],["row","row merge"],["child","child insert"],["append","append"],["search","search"],["trans","transpose"]];
					]]>
				</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>
	            	<![CDATA[
This powerful control moves data around your application. The following differnt types of data copy are supported:<br/><br/>
- replace, will empty the destination controls of data before copying in the source data<br/>
- bulk, provides a dialogue where a number of related datacopies can easily be specified<br/>
- row merge, will keep all destination data and add the source data in the same row. New fields will be added if required<br/>
- child insert, inserts the source data object as a child into the destination under the specified field. The merge option will use fields in common between the source and destination to match rows in the source to rows in the destination and matching rows in the source will be added to child datastores in the rows of the destination. Use this for parent/child relationships<br/> 
- append, will add the source data as a new row in the destination data. Any existing fields will be used, new fields will be added<br/>
- search, allows a source to be searched against a term and matching rows placed into the destination<br/>
- transpose, converts a source with lots of columns to one with lots of rows and vice versa. Key fields will appear on every row, ignore fields will not be used in the transposition<br/>
	                ]]>
				</helpHtml>
	        </property>
	    
	        <property>
	            <key>dataSource</key>
	            <name>Source</name>
	            <changeValueJavaScript>datacopySource</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
// for backwards compatibility	                
if (this.dataSource == "System.user") this.dataSource = "System.user name";
// dateTime only available for certain copy types
var hasDatetime = ['replace', 'child', 'row', 'append'].some(function(val) { return val === this.copyType; });
// return applicable options
return "<option value=''>Please select...</option>" + getInputOptions(this.dataSource, true, hasDatetime, true);
	                ]]>
	            </getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Dropdown list containing all page controls to be used as a source. System values can also be used.</helpHtml>
	        </property>
	        	        	      
	        <property>
	            <key>dataSourceField</key>
	            <name>Source field</name>
	            <changeValueJavaScript>datacopySourceField</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <helpHtml>Optionally specify a field or property that holds the data within the source control. An example of this is a specific cloumn's field name in a table or grid.</helpHtml>
	        </property>
	        
	        <property>
	            <key>dateFormat</key>
	            <name>Date format</name>
	            <setConstructValueFunction>return "dd/mm/yy";</setConstructValueFunction>
	            <changeValueJavaScript>datacopyDateFormat</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["dd/mm/yy","dd/mm/yyyy"],["mm/dd/yy","mm/dd/yyyy"],["yy-mm-dd","yyyy-mm-dd"],["dd-M-yy","dd-MMM-yyyy"],["d MM yy","Short day, full month"],["DD, d MM, yy","Full date details"]];
					]]>
	            </getValuesFunction>
	            <helpHtml>
	            	<![CDATA[
	                ]]>
				</helpHtml>
	        </property>
	        
	        <property>
	            <key>timeFormat</key>
	            <name>Time format</name>
	            <setConstructValueFunction>return "24";</setConstructValueFunction>
	            <changeValueJavaScript>datacopyTimeFormat</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["24","hh:mi"],["12","hh:mi AM/PM"]];
					]]>
	            </getValuesFunction>
	            <helpHtml>
	            	<![CDATA[
	                ]]>
				</helpHtml>
	        </property>
	        
	        <property>
	            <key>searchSource</key>
	            <name>Search term</name>
	            <changeValueJavaScript>datacopySearchSource</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.dataSource);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control holding the value you are looking for.</helpHtml>
	        </property>
	        
	        <property>
	            <key>searchSourceField</key>
	            <name>Search term field</name>
	            <changeValueJavaScript>datacopySearchField</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <helpHtml>Optionally specify a field or property from the term dropdown, like the source field.</helpHtml>
	        </property>
	        
	        <property>
	            <key>searchField</key>
	            <name>Search fields</name>
	            <changeValueJavaScript>datacopySearchField</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <helpHtml>Fields or properties in the source to search for matches against the search term.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxRows</key>
	            <name>Maximum rows</name>
	            <changeValueJavaScript>datacopyMaxRows</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <helpHtml>Caps the amount of data that is to be returned upon searching.</helpHtml>
	        </property>
	        	        	        
	        <property>
	            <key>dataDestinations</key>
	            <name>Destinations</name>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the destination controls and optional fields for your copied data.</helpHtml>
	        </property>
	        	         	        
	        <property>
	            <key>childField</key>
	            <name>Child field</name>
	            <changeValueJavaScript>datacopyChildField</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <helpHtml>Optionally specify a field or property that holds the data within the parent control. An example of this is a specific cloumn's field name in a table or grid.</helpHtml>
	        </property>
	        
	        <property>
	            <key>mergeChildren</key>
	            <name>Match rows</name>
	            <changeValueJavaScript>datacopyNoChildrenCheckbox</changeValueJavaScript>
	            <getValuesFunction>return false;</getValuesFunction>
	            <helpHtml>Whether to use fields with the same name in the source and destination data to only apply to rows with matching values.</helpHtml>
	        </property>
	        
	        <property>
	            <key>keyFields</key>
	            <name>Key fields</name>
	            <changeValueJavaScript>datacopyFields</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the fields to appear in every row or column when transposing data.</helpHtml>
	        </property>
	        
	         <property>
	            <key>ignoreFields</key>
	            <name>Ignore fields</name>
	            <changeValueJavaScript>datacopyFields</changeValueJavaScript>
	            <getValuesFunction>return "";</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the fields that will not be included in the transposing of data.</helpHtml>
	        </property>
	        
	        <property>
	            <key>dataCopies</key>
	            <name>Bulk data copies</name>
	            <changeValueJavaScript>datacopyCopies</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Enables the use of mass data copying. Useful for when large quantities of data needs to be transferred from one location to another within your Rapid application. Similar to normal data copies, it is possible to select a source and source field, a destination and destination field, and the type of copying that is to be carried out.</helpHtml>
	        </property>
	        
	        <property>
	            <key>changeEvents</key>
	            <name>Trigger change events</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <getValuesFunction>return false;</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Causes a change event to occur when the data is copied. Useful for validation.</helpHtml>
	        </property>
	        
	        <property>
	            <key>noValidation</key>
	            <name>Suppress validation</name>
	            <visibility>
	                <key>changeEvents</key>
	                <value>true</value>
	            </visibility>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <getValuesFunction>return true;</getValuesFunction>
	            <helpHtml>Don't perform any validation action triggered by the change event.</helpHtml>
	        </property>
	        
	        <property>
	            <key>upgradeFix</key>
	            <name>Used to mark versions of required upgrade fixes</name>
	            <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <getValuesFunction>return 1;</getValuesFunction>	            
	            <helpHtml>1 - Used to turn off any unmeant merge matching on row merges where it wasn't before.</helpHtml>
	        </property>
	        	        	        	 	        	        	          
	    </properties>
	    
	    <resources>
	    	<resource>
	    		<type>javascriptFile</type>
	    		<contents>scripts_min/jquery-ui-1.12.1.min.js</contents>
	    	</resource>
	    </resources>
	    	    
	    <actionJavaScript>
	        <![CDATA[
function Action_datacopy(ev, data, outputs, changeEvents, copyType, copyData, field, details) {

	if (promiseSupported() && data instanceof Promise) {
		data.then(function(data) {
			Action_datacopy(ev, data, outputs, changeEvents, copyType, copyData, field, details)
		});
		return;
	}

	if (data !== undefined && outputs) {
		if (changeEvents) {
			if (changeEvents.noValidation) {
				window["_noValidation"] = true;
			}
			changeEvents = true;
		}
		for (var i in outputs) {
			var output = outputs[i];
			var outputData = null;
			var idParts = output.id.split(".");
			var outputId = idParts[0];
			switch (copyType) {
				case "append" :	case "row" : case "child" :
					// add details object if there isn't one, we're going to inspect it in the mergeDataObjects
					if (!output.details) output.details = {};
					// assume we won't be merging / row field matching
					var mergeData = null;
					// properties have more id parts than default getters
					if (idParts.length > 1) {
						// set noFieldMatch to true
						output.details.noFieldMatch = true;
						// get the merge data with the property in the second part of the id
						mergeData = window["getProperty_" + output.type + "_" + idParts[1]](ev, outputId, null, output.details);
					} else {
						// set noFieldMatch to false, just in case default behavour is required to the default get data at some point after using a property
						output.details.noFieldMatch = false;						
						// get the merge data with the main get data method
						mergeData = window["getData_" + output.type](ev, outputId, null, output.details);
					}
					// use the new mergeChildren property to override noFieldMatch if it's set - used in child and row merges
					if (details && details.mergeChildren !== undefined) output.details.noFieldMatch = !details.mergeChildren;
					// child has extra drilling
					if (copyType == "child") {
						// convert any object to data objects
						data = makeDataObject(data);
						// check we have rows
						if (data && data.rows) {
							// do the merge
							outputData = mergeDataObjects(mergeData, data, copyType, field, null, output.details);
						} else {
							// simply return the data
							outputData = mergeData;
						}
					} else {
						data = makeDataObject(data, output.field);
						outputData = mergeDataObjects(mergeData, data, copyType, field, null, output.details);
					}
				break;
				case "search" :
					if (data) outputData = mergeDataObjects(copyData, data, copyType, field, details);
				break;
				case "trans" :
					if (data && data.fields && data.rows) {
						var downtoside = false;
						// checking for down to side transpose is quite expensive so get the easy stuff out the way first
						if (data.rows.length >= details.keyFields.length + 2) {
							var keyFieldsMap = {};
							for (var i in data.fields) {
								for (var j in details.keyFields) {
									if (data.fields[i] && details.keyFields[j] && data.fields[i].toLowerCase() == details.keyFields[j].toLowerCase()) {
										keyFieldsMap[i] = j;
										break;
									}
								}
							}
							if (Object.keys(keyFieldsMap).length == details.keyFields.length && data.fields.length >= details.keyFields.length + 2) {
								var keyValueCounts = {};
								for (var i in data.rows) {
									var keyValue = "";
									for (var j in keyFieldsMap) {
										keyValue += data.rows[i][keyFieldsMap[j]];
									}
									if (keyValueCounts[keyValue]) {
										keyValueCounts[keyValue] ++;
									} else {
										keyValueCounts[keyValue] = 1;
									}
									if (keyValueCounts[keyValue] > 1) {
										downtoside = true;
										break;
									}
								}
							}						
						}
												
						if (downtoside) {
							// transpose down to side
							var fieldPos = 0;
							var valuePos = 1;
							// check the map for whether the key fields are before or after the field/value pair
							for (i in keyFieldsMap) {
								// if any of the key fields are in the first column
								if (i*1 == 0) {
									// change field and value columns from 1st and 2nd to those following the keys
									fieldPos = details.keyFields.length;
									valuePos = details.keyFields.length + 1;									
								}
							}
							var outputFields = [];
							for (var i in details.keyFields) outputFields.push(details.keyFields[i]);
							var keyValueRows = {};
							for (var i in data.rows) {
								var row = data.rows[i];
								var field = row[fieldPos];
								var value = row[valuePos];
								// determin the key value for this row
								var keyValue = "";
								for (var j in keyFieldsMap) {
									keyValue += row[j];
								}
								// fetch the row we are creating for this key
								var keyRow = keyValueRows[keyValue];
								if (!keyRow) {
									keyRow = [];
									for (var j in keyFieldsMap) keyRow.push(row[j]);
									keyValueRows[keyValue] = keyRow;
								}
								// if there is a field (can be null on an outer join)
								if (field) {
									// find the position of this field in the output fields
									var outputFieldPos = -1;
									for (var j in outputFields) {
										if (outputFields[j] == field) {
											outputFieldPos = j;
											break;
										}
									}
									// if the field couldn't be found
									if (outputFieldPos < 0) {
										outputFields.push(field);
										outputFieldPos = outputFields.length - 1;
									}
								}
								// ensure the row is the right length as we discover more fields								
								while (keyRow.length < outputFields.length) keyRow.push(null);
								// set the value in the correct position
								keyRow[outputFieldPos] = value;								
							}
							// create the output data object
							outputData = {fields:outputFields,rows:[]};
							// loop the unique rows		
							for (var i in keyValueRows) {
								// get the row
								var row = keyValueRows[i];
								// ensure the row is the right length
								while (row.length < outputFields.length) row.push(null);
								// add the row
								outputData.rows.push(row);
							}
						} else {
							// transpose side to down				
							outputData = {fields:["field","value"],rows:[]};						
							if (details && details.keyFields && details.keyFields.length > 0) {
								for (var j in details.keyFields) {
									outputData.fields.push(details.keyFields[j]);
								}
							}						
							for (var i in data.rows) {						
								var keyFieldValues = [];						
								// key fields
								if (details && details.keyFields && details.keyFields.length > 0) {
									for (var j in details.keyFields) {
										for (var k in data.fields) {
											if (data.fields[k] && details.keyFields[j].toLowerCase() == data.fields[k].toLowerCase()) {
												keyFieldValues.push(data.rows[i][k]);
												break;
											}
										}
									}								
								}
																																		
								// values
								for (var j in data.fields) {
									var ignore = false;
									if (details && details.ignoreFields && details.ignoreFields.length > 0) {
										for (var k in details.ignoreFields) {
											if (!data.fields[j] || data.fields[j].toLowerCase() == details.ignoreFields[k].toLowerCase()) {
												ignore = true;
												break;
											}
										}
									}
									if (!ignore) {
										var row = [data.fields[j],data.rows[i][j]];
										for (var k in keyFieldValues) row.push(keyFieldValues[k]);
										outputData.rows.push(row);
									}
								}																											
							}
						}
					}
				break;
				default:
					outputData = data;
			}
			
			if (idParts.length > 1) {
				if (output.id === "System.clipboard") {
					clipboardWriteText(data);
				} else {
					window["setProperty_" + output.type + "_" + idParts[1]](ev, outputId, output.field, output.details, outputData, changeEvents);
				}
			} else {
				window["setData_" + output.type](ev, outputId, output.field, output.details, outputData, changeEvents);
			}
		}
		window["_noValidation"] = undefined;
	}
}

function clipboardWriteText(data) {
	if (navigator.clipboard) {
		navigator.clipboard.writeText(data);
	}
}
	        ]]>
	    </actionJavaScript>
	    	    	    	    
    </action>     
</actions>