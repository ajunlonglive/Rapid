<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">
 
 <!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->
 
    <action>
    
        <type>navigate</type>
        <name>Navigate</name>
	    <class>com.rapid.actions.Navigate</class>
	    <helpHtml>Takes the user to another page, or url, in the same tab or as a dialogue box.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewFormApplications>false</addToNewFormApplications>
	    
	    <properties>
	   
	    	<property>
	            <key>navigationType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "P";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
// for backwards compatibility	                
if (!this.navigationType) this.navigationType = "P";
// return the types	            
return [["P","Page"],["U","URL"],["R","Rapid"],["PR","Printer"]];
				</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the type of link. Page links to other pages on your Rapid app, URL links to any webpage placed in the text field, and Rapid provides Rapid pages like main menu, logout, and back.</helpHtml>
	        </property>
	           
	        <property>
	            <key>url</key>
	            <name>URL</name>
	            <changeValueJavaScript>linkURL</changeValueJavaScript>
	            <helpHtml>Sets the page that will be followed when the user clicks on the link.</helpHtml>
	        </property>
	        
	        <property>
	            <key>page</key>
	            <name>Page</name>
	            <changeValueJavaScript>linkPage</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the page to navigate to.</helpHtml>
	        </property>
	            	
	    	<property>
	            <key>sessionVariables</key>
	            <name>Page variables</name>
	            <changeValueJavaScript>navigationSessionVariables</changeValueJavaScript>
	            <helpHtml>Allows you to choose which page variables can be set upon leaving this page to the next. This is particularly useful for path conditions on a form.</helpHtml>
	        </property>
	        
	        <property>
	            <key>dialogue</key>
	            <name>Show as dialogue</name>
	            <changeValueJavaScript>navigateDialogue</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets whether to show the new page as a dialogue. Dialogue pages will appear in front of the currently selected page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>dismissibleDialogue</key>
	            <name>Dismissible dialogue</name>
	            <changeValueJavaScript>dismissibleDialogue</changeValueJavaScript>
	            <refreshProperties>false</refreshProperties>
	            <helpHtml>Sets whether to allow the user to hide the dialogue when they click the background page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>closeActions</key>
	            <name>Close actions</name>
	            <changeValueJavaScript>closeActions</changeValueJavaScript>
	            <refreshProperties>false</refreshProperties>
	            <helpHtml>Add actions to be done after the dialogue is closed.</helpHtml>
	        </property>
	        
	        <property>
	            <key>stopActions</key>
	            <name>Stop further actions</name>
	            <changeValueJavaScript>navigationStopActions</changeValueJavaScript>
	            <helpHtml>Sets whether to halt further actions on the current page whilst the dialogue is in view.</helpHtml>
	        </property>
	        
	        <property>
	            <key>popup</key>
	            <name>New tab</name>
	            <changeValueJavaScript>navigateNewtab</changeValueJavaScript>
	            <helpHtml>Opens the link in a new tab.</helpHtml>
	        </property>
	        
	        <property>
	            <key>rapidPage</key>
	            <name>Page</name>
	            <setConstructValueFunction>return "I";</setConstructValueFunction>
	            <changeValueJavaScript>navigateRapid</changeValueJavaScript>
	            <getValuesFunction>
// return the types	            
return [["I","Main menu"],["L","Logout"],["P","Change password"],["B","Back"],["C","Close"]];
				</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Main menu is the index page. Both the index page and logout page can be set by custom logins.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <resources>
	    	<resource>
                <type>css</type>
                <contents>
                    <![CDATA[
                                     
.dialogueCover {
	position: fixed;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	background-color: white;
	opacity:0.8;
	filter:alpha(opacity=80);
	z-index: 1001;
}

.dialogue {
	background-color: white;
	padding: 0px;
    overflow: auto;
    max-width: calc(100% - 100px);
    max-height: calc(100% - 100px);
}
                
                    ]]>
                </contents>                
            </resource> 
            
            <resource>
            	<type>javascript</type>
            	<contents>
            		<![CDATA[
//JQuery is ready! 
$(document).ready( function() {

	// create an empty page params map if there isn't one already	
	if (!window["_pageParams"]) window["_pageParams"] = {};
		
	// re-measure / resize all dialogue when the window resizes
	$(window).resize(function(ex) {
	
		var doc = $(document);
		var win = $(window);

       	// resize the dialogues
       	$(".dialogue").each(function() {
       		var dialogue = $(this);
       		var w = dialogue.outerWidth(true);
       		var h = dialogue.outerHeight(true);
       		if (w > 0 && h > 0) {
		       	dialogue.css({
		       		left : ((window.innerWidth ? window.innerWidth : win.width()) - w) / 2,
		       		top : ((window.innerHeight ? window.innerHeight : win.height()) - h) / 2
		       	}); 
		    }
	    });
	
	});
	
});


            		]]>
            	</contents>
            </resource>
            
	    </resources>

	    <actionJavaScript>
	        <![CDATA[

function Action_navigate(url, dialogue, id, popup, dismissibleDialogue, closeActions) {
	
	if (dialogue) {
	
		// map of url parameters we use to allow caching of dialogues without query string / parameters
		var params = {};
		
		// page id of dialogue we are opening
		var pageId = null;
		
		// if there was a url
		if (url) {
		
			// get the query string and split on &
			var vars = url.slice(url.indexOf('?') + 1).split('&');
			
			// loop the variable key=value pairs
			for (var i = 0; i < vars.length; i++) {
			
				// split the pairs
				var pair = vars[i].split('=');
				
				// if there is a key and a value
				if (pair.length > 1) {
				
					// get the key
					var k = pair[0];
					
					// retain the page id from "p"
					if (k == 'p') pageId = pair[1];
					
					// ignore certain keys: a for action, v for version
					if (k != 'a' && k != 'v' && k != 'p' && k != 'action') {
					
						// retain this parameter value to its key in the map
						params[pair[0]] = decodeURIComponent(pair[1].replace('#',''));
					
					} // key ignore
				
				} // key/pair length
			
			} // key/pair loop
		
		} // url check
		
		// retain the parameters for this page in our global variable
		window["_pageParams"][pageId] = params;
	
		// start the body html for the dialogue
		var bodyHtml = "<div><h1 style='margin-left:auto;margin-right:auto;'>Page</h1></div>";
		
		// request the page		
		$.ajax({
		   	url: url,
		   	type: "GET",          
		       data: null,
		       error: function(error, status, message) {
		       		// if access denied
		       		if (error && error.status == 403) {
		       			// go to login to authenticate		       		
		       			window.location = "login.jsp?requestPath=" + window.location; 
		       		} else { 
		       			alert("Error loading dialogue : " + error.responseText||message);
		       		} 
		       },
		       success: function(page) {
		       	
		       // if the page can't be found a blank response is sent, so only show if we got something
		       if (page) {
		       	
		       		// empty the body html
		       		bodyHtml = "";
		       		script = "";
		       		links = "";
		       		
		       		// get the page document head
		       		var head = $("head");
					var headElement = head[0];
					
		           	// loop the items
		           	var items = $(page);
		           	for (var i in items) {
		           		// check for a script node
		           		switch (items[i].nodeName) {
		           		case "#text" : case "TITLE" : // ignore these types
		           		break;
		           		case "SCRIPT" :
							var element = document.createElement("script");
							element.type = "text/javascript";
		           			// check whether a script block or link
		           			if (items[i].innerHTML) {
		           				var s = items[i].outerHTML;
		           				// exclude the app id, version, page, mobile resume link
		           				if (s.indexOf("var _appId =") == -1 && s.indexOf("var _appVersion =") == -1 && s.indexOf("var _pageId =") == -1 && s.indexOf("var _mobileResume =") == -1) {
		           					// append to script variable - we will make one combined string and add as a blob
		           					script += items[i].innerText.trim() + "\n\n";									
								}
		           			} else {
		           				// fetch the text
		           				var text = items[i].outerHTML;
		           				// look for a src
		           				if (text.indexOf("src=\"") > 0) {
		           					var startPos = text.indexOf("src=\"")+5;
		           					var src = text.substr(startPos,text.indexOf("\"", startPos) - startPos);
		           					// add this to the page if not there already
		           					if (!head.find("script[src='" + src + "']")[0]) {
										element.src = src;
										element.async = false;
										// append to the head section of the page and fail silently if any issue - for some reason Rapid Mobile throws a TypeError: undefined is not a function for calendar.js
			       						try { headElement.appendChild(element); } catch(ex) {}		           						
		           					}
		           				}
		           			}
		           		break;
		           		case "LINK" :
		           			// fetch the text
		           			var text = items[i].outerHTML;	           			
		           			// look for an href="
		           			if (!items[i].innerHTML && text.indexOf("href=\"") > 0) {
		           				var startPos = text.indexOf("href=\"")+6;
		           				var href = text.substr(startPos,text.indexOf("\"", startPos) - startPos);
		           				// add this link to the page if not there already
		           				if (!head.find("link[href='" + href + "']")[0]) 
		           					head.append(text);
		           			}		           				           			
		           		break;
		           		case "META" :
		           			// meta tags can be ignored
		           		break;
		           		default :
		           			if (items[i].outerHTML) {
		           				// retain the script in our body html
		           				bodyHtml += items[i].outerHTML;        				
		           			}
		           		break;
		           		}
		           	}

		           	// if this is the login page go to the real thing, requesting to come back to this location
            		if (bodyHtml.indexOf("<form name=\"login\" id=\"RapidLogin\" method=\"post\">") > 0) window.location = "login.jsp?requestPath=" + window.location; 
            	
            		// get a reference to the document for the entire height and width     	
		           	var doc = $(document);
		           	// get a reference to the body		           	
		           	var body = $("body");
		           	
		           	// remove any existing dialogue cover for this action
		           	$("#" + id + "cover").remove();
		           	
		           	// add the cover and return reference
		           	dialogueCover = body.append("<div id='" + id + "cover' class='dialogueCover'></div>").children().last();
		           	
	            	// remove any existing dialogue container for this action
		           	$("div#" + id).remove();
		           	// add the dialogue container and remove the reference
		           	dialogue = body.append("<div id='" + id + "' class='dialogue' style='position:fixed;z-index:1001;'></div>").children().last();
		           	
		           	// if this is a dismissibleDialogue allow clicking on the cover to close it
		           	if (dismissibleDialogue) {
		           	    dialogueCover.on("click", function() {
		           	        dialogue.remove();
		           	        $(this).remove();
		           	    })
		           	}
		           	
		           	// if we have close actions
		           	if (closeActions) {

						// add an observer to run our closeActions when the dialogue is removed		           	
			           	new MutationObserver(function(ev, mo) {
							if (ev[0].removedNodes[0] === dialogue[0]) {
								closeActions($(ev));
								mo.disconnect();
							}
						}).observe(document.body, { childList: true, subtree: false });
			        }
		           	
		           	// make sure it's hidden
		           	dialogue.css("visibility","hidden");
					
					// add any links into the page (if applicable)
		           	if (links) dialogue.append(links);
		           	
		           	// append the injected html
		           	dialogue.append(bodyHtml);
		           	
					dialogue.children().each( function(i) {
						// thanks to http://viralpatel.net/blogs/jquery-trigger-custom-event-show-hide-element/	
						var el = $.fn["hide"];
						$.fn["hide"] = function () {
		           			// if we're hiding an immediate child of the dialogue
		           			if (this.parent().is(dialogue)) {
		           				dialogue.prev("div.dialogueCover").remove();
								dialogue.remove();
		           				return false;
		           			} else {
		           				// trigger the regular hide 								
								return el.apply(this, arguments);
							}
						};
					});
					
		           	// add any scripts into the page (if applicable)
		           	if (script) {
		           		element.src = URL.createObjectURL(new Blob([script], {type : "text/javascript"}));
						element.async = false;
      					try { headElement.appendChild(element); } catch(ex) {}
		           	}
		           	
		           	// handle textareas with maxlength attribute
					dialogue.find('textarea[maxlength]').each( textarea_maxlength );
  
					// handle textareas with autoheight class
					dialogue.find('textarea.autoheight').each( textarea_autoheight ).trigger('keypress'); 
		           			           	
		           	// apply the resizing	
	            	$(window).resize(); 
	            	
	            	// find all tabbable elements in the body excluding those in the dialogue 
	            	body.find("input, select, textarea, button, a").not(dialogue.find("input, select, textarea, button, a")).each( function() {
	            		// get the element
	            		var e = $(this);
	            		// get any existing tab index
	            		var t = e.attr("tabindex");
	            		// if there was one add a data attribute for it
	            		if (t > 0) e.attr("data-tabindex",t);
	            		// set their tab index to -1
	            		$(this).attr("tabindex", -1);
	            	});
	            	
	            	// this seems to be the best way to avoid the resizing/flicker when showing
	            	window.setTimeout( function() {
	            		// make the dialogue visible
	            		dialogue.css("visibility","visible");
	            		// apply the resizing again (for mobile)	
	            		if (window["_rapidmobile"]) $(window).resize();
	            		// set the focus now that we're visible 
	            		$('[data-focus]').focus();
	            	}, 200);
		           	           	        	            	            	            
		    	}
		    	        	       	        	        	        	        		
		    }       
		    		    		    	        	        
		});	      
	
	} else {
		if (popup) {
			window.open(url, "_blank");
		} else {
			window.location = url;
		}
	}
		
}	        ]]>
	    </actionJavaScript>    	    
    </action> 
</actions>