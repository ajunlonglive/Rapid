<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>validation</type>
        <name>Validation</name>
	    <class>com.rapid.actions.Validation</class>
	    <helpHtml>Checks the validation of controls and runs different actions whether the controls all pass or not.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    
	    <properties>
	        
	        <property>
	            <key>controls</key>
	            <name>Controls</name>
	            <changeValueJavaScript>validationControls</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the control/s on the page to validate against.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showMessages</key>
	            <name>Apply styling</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets whether to apply a validation style to the selected controls.</helpHtml>	            
	        </property>
	        
	        <property>
	            <key>scrollToFirst</key>
	            <name>Scroll to first</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>validationScrollTo</changeValueJavaScript>
	            <helpHtml>Whether to scroll to the top validation message, if it's not in the current scrolled to part of the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>stopActions</key>
	            <name>Stop further actions</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to prevent further actions from being carried out on the page or not, such as progressing to the next page on a form.</helpHtml>
	        </property>
	        
	        <property>
	            <key>passActions</key>
	            <name>Pass actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets actions to be carried out for when validation has passed.</helpHtml>
	        </property>
	        
	        <property>
	            <key>failActions</key>
	            <name>Fail actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets actions to be carried out for when validation has failed</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>file</type>
	            <contents>images/alert_16x16.png</contents>
	        </resource>
	                    <resource>
                <type>css</type>
                <contents>
                    <![CDATA[
                                     
div.validation {
	padding: 10px;
	color: red;
	font-weight: bold;
}

span.validation {
	color: red;
	font-weight: bold;
}

label.validation {
	border: 2px solid red;
}

input.validation {
	border: 2px solid red;
}

select.validation {
	border: 2px solid red;
}

textarea.validation {
	border: 2px solid red;
}  

li.validation {
  color:red;
}                  

                    ]]>
                </contents>                
            </resource> 
	    </resources>
	    	    	    
	    <actionJavaScript>
	        <![CDATA[
function Action_validation(ev, validations, showMessages, scrollToFirst) {
	if (window["_noValidation"]) return;
	var valid = true;
	ev.validation = true;
	var firstFailedControl = null;
	for (var i in validations) {
		var validation = validations[i];
		var validationControl = $("#" + validation.controlId);
		if (validationControl[0]) {
			var getValueFunction = null;
			if (validation.validationProperty) {
				getValueFunction = window["getProperty_" + validation.controlType + "_" + validation.validationProperty];
			} else {
				getValueFunction = window["getData_" + validation.controlType];
			}
			if (getValueFunction) {
				var details = null;
				if (validation.details) {
					if (validation.details.indexOf("{") == 0) {
						details = JSON.parse(details);
					} else {
						details = window[validation.details];
					}
				}
				var value = getValueFunction(ev, validation.controlId, validation.field, details);
				if (validation.validationType == "javascript" || validation.validationType == "logic") {
					var validationFunction = new Function(["ev","id","value"], validation.javaScript);
					var failMessage = validationFunction.apply(this, [ev,validation.controlId,value]);
					if (failMessage != null && failMessage !== false && failMessage !== undefined
						 && !(validationControl.is(":disabled") || (validationControl.is(":hidden") && validation.passHidden))) {
						if (showMessages) showControlValidation(validation.controlId, failMessage);
						valid = false;
					} else {
						if (showMessages) hideControlValidation(validation.controlId);
					}
				} else {
					// assume no pass
					var pass = false;
					// start with some basic checks
					if (value && value != "false") {
						// get the regex expression
						var exp = validation.regEx.trim();
						// make a regex
						var regex = new RegExp(exp);
						// if the expression ends with /i
						if (exp.indexOf("/i") == exp.length - 2) {
							// update the exp removing the /i
							exp = exp.substr(0, exp.length - 2);
							// remake the regex with the case insensitivity
							regex = new RegExp(exp, "i")
						}
						// get the matches from the reg ex
						var matches = value.match(regex);
						// ensure the first match is for the whole value
						if (matches) {
							// got some matches now groups must match too
							if (matches.length == 1) {
								// these are the easy ones
								pass = true;
							} else {
								// we now need to loop all of the groups
								for (var i in matches) {
									if (i != "index" && i != "input" && matches[i] == value) {
										// we're good
										pass = true;
										break;
									}
								}
							}
						}
					} else if (validation.allowNulls) {
						// no value but this is allowed
						pass = true;
					}
					// pass, disabled, or hidden and allowed this way
					if (pass || validationControl.is(":disabled") || (validationControl.is(":hidden") && validation.passHidden)) {
						// passed
						if (showMessages) hideControlValidation(validation.controlId);
					} else {
						// failed, and there is a message to show, but not on tab keyup
						if (showMessages && !(ev.type == "keyup" && ev.keyCode == 9)) showControlValidation(validation.controlId, validation.message);
						valid = false;
						// retain as first failed control if visible
						if (firstFailedControl == null && validationControl.is(":visible")) firstFailedControl = validationControl;
					}
				}
			} else {
				if (showMessages) showControlValidation(validation.controlId, validation.message);
				valid = false;
			}
		}
	}
	// if requested scroll to the first failed control in this set of validations
	if (scrollToFirst && firstFailedControl && firstFailedControl[0]) {
		// get its top
		var t = firstFailedControl.offset().top;
		// get a reference to the window
		var w = $(window);
		// if we can't see it
		if (w.scrollTop() > t || w.scrollTop() + w.height() < t) {
			// scroll to it
			w.scrollTop(t);
		}
	}
	ev.validation = false;
	return valid;
}
		]]>
	    </actionJavaScript>
	    
    </action>
    
</actions>