<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<action>

		<type>downloadCSV</type>
		<name>Download CSV</name>
		<class>com.rapid.actions.DownloadCSV</class>
		<helpHtml>Downloads a grid or datastore as a .csv file.</helpHtml>

		<properties>
		
			<property>
				<key>gridId</key> <!-- Datastores were added in version 2.5.1 but we kept the property as gridId for backwards compatibility -->
				<name>Source control</name>
				<changeValueJavaScript>select</changeValueJavaScript>
				<getValuesFunction>
<![CDATA[
return "<option value=''>Please select...</option>" + getControlOptions(this.gridId, null, "grid,dataStore", true);
]]>
				</getValuesFunction>
				<helpHtml>Select a grid or datastore control to produce a CSV file from.</helpHtml>
			</property>

			<property>
				<key>includeHiddenColumns</key>
				<name>Include hidden columns</name>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<getValuesFunction>return "";</getValuesFunction>
				<helpHtml>Include all columns.</helpHtml>
			</property>

			<property>
				<key>includeFields</key>
				<name>Include fields</name>
				<changeValueJavaScript>text</changeValueJavaScript>
				<getValuesFunction>return "";</getValuesFunction>
				<helpHtml>If supplied, filter to comma separated columns.</helpHtml>
			</property>

			<property>
				<key>outputFilename</key>
				<name>Output file name</name>
				<changeValueJavaScript>text</changeValueJavaScript>
				<getValuesFunction>return "";</getValuesFunction>
				<helpHtml>Provide an output filename for the generated CSV file.</helpHtml>
			</property>
			
		</properties>
		
		<actionJavaScript>
		<![CDATA[

// JQuery is ready! 
$(document).ready( function() {
	// check if the download form id exists in the page and append it if not
	if(!$("#downloadForm").length){
		var form = $('<form/>', {id:'downloadForm', action: 'downloadCSV.jsp', method:'post', target:'_blank', style:'display:none'});
		form.append($('<input/>', {id:'downloadFileName', name:'downloadFileName', value:'filename.csv'}));
		form.append($('<input/>', {id:'downloadData', name:'downloadData'}));
		//append the body
		$("body").append(form);
	}
});

function Action_downloadCSV(ev, actionId, controlId, fileName, includeHiddenColumns, includeFields, details) {

	// set the output filename of the form
	$('#downloadFileName').attr({"value": fileName});
	
	// create an object for the data with rows and headers
	var data = {rows:[],headers:[]};
	
	// get the control
	var control = $("#" + controlId);
	
	// get any control details
	var controlDetails = window[controlId + "details"];
	
	// look for multiSelect, set false if not
	var multiSelect = (controlDetails && controlDetails.multiSelect);
	
	// trim any include fields to remove spaces
	includeFields = includeFields.trim();
	// create a "clean" array of field names by splitting and trimming
	var outputFieldsLowerCase = includeFields && includeFields.split(",").map(function(column) {
		// trim this field and lowercase it for case-insensitive matching later
		return column.trim().toLowerCase();
	}).filter(function(column) {
		// avoid empty strings in the array, also takes care of any double commas from the orginal string
		return column !== "";
	});
	
	// if the control is a grid in the page
	if (control.is(".grid") || control.is(".gridScroll")) {
		
		// use the control as the grid
		var grid = control;
		// find the table
		var table = grid.is("table") ? grid : grid.find('table').last();
		// get the columns from the details
		var columns = details.columns || details.dynamicColumns;
		// get the column fields in lower case for case-insensitive matching
		var columnFields = columns.map(function(column) {
			// check there is a field before lower-casing and adding to the array
			if (column.field) return column.field.toLowerCase();
		});

		// loop the rows
		table.find('tr').each(function(rowIndex) {
			// add a rows collection if not header row
			if (rowIndex > 0) data.rows.push([]);
			// for the first row use the header otherwise the data
			var row = rowIndex == 0 ? data.headers : data.rows[rowIndex-1];
			// get the cells
			var cells = null;
			// if multiSelect ignore first cell 
			if (multiSelect) {
				cells = $(this).find('td:not(:first-child)');
			} else {
				cells = $(this).find('td');
			}
			// if fields to include have been provided
			if (outputFieldsLowerCase && outputFieldsLowerCase.length > 0 && columns) {
				// loop the outputFields to find the cell value for each in the order specified
				outputFieldsLowerCase.forEach(function(outputField) {
					// get the index of the field from the columns
					var columnIndex = columnFields.indexOf(outputField);
					// get the cell at the position of the column we matched on
					var c = $(cells[columnIndex]);
					// add the text into our row of data
					row.push(c.text());
				});
			} else {
				// loop the cells
				cells.each(function(columnIndex) {
					// get a ref to the cell
					var c = $(this);
					 // ignore hidden columns unless explicity requested
					if (includeHiddenColumns || (columns && columns[columnIndex].visible)) {
						// add the text into our row of data
						row.push(c.text());
					}
				});
			}
		});
	
	} else {
	
		// if we have details
		if (details) {
			
			// derive the datasource, grid or datastore
			var getData = details.type === "grid" ? getGridDataStoreData : getDataStoreData;
			// get the data from the control
			var controlData = getData(controlId, details)
			// get a lower-case array of the control fields for case-insensitve matching
			var controlFieldsLowercase = controlData.fields.map(function(field) { return field.toLowerCase(); });
			// an array of outputs which are contol field indexes produced by lower-case matching 
			var indexes = outputFieldsLowerCase.map(function(outputField) {
				return controlFields.indexOf(outputField);
			});
			// use the indexes to produce the headers from the source data fields
			data.headers = indexes.map(function(index) { return controlData.fields[index] });
			// loop each row of source data 
			data.rows = controlData.rows.map(function(row) {
				// loop the indexes to retrieve the value at the specified position 
				return indexes.map(function(index) { return row[index] }) 
			});
			
		}
	
	}
	
	// stringify it so it can be sent in the form
	data =  JSON.stringify(data);
	// put it in the form input
	$('#downloadData').val(data);
	// submit the form
	$('#downloadForm').submit();

}


		]]>	
		</actionJavaScript>
		
	</action>
</actions>