<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<action>

		<type>downloadCSV</type>
		<name>Download CSV</name>
		<class>com.rapid.actions.DownloadCSV</class>
		<helpHtml>Downloads a grid or datastore as a .csv file.</helpHtml>

		<properties>
		
			<property>
				<key>gridId</key> <!-- Datastores were added in version 2.5.1 but we kept the property as gridId for backwards compatibility -->
				<name>Source control</name>
				<changeValueJavaScript>select</changeValueJavaScript>
				<getValuesFunction>
<![CDATA[
return "<option value=''>Please select...</option>" + getControlOptions(this.gridId, null, "grid,dataStore", true);
]]>
				</getValuesFunction>
				<helpHtml>Select a grid or datastore control to produce a CSV file from.</helpHtml>
			</property>

			<property>
				<key>includeHiddenColumns</key>
				<name>Include hidden columns</name>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<getValuesFunction>return "";</getValuesFunction>
				<helpHtml>Include all columns.</helpHtml>
			</property>

			<property>
				<key>includeFields</key>
				<name>Include fields</name>
				<changeValueJavaScript>text</changeValueJavaScript>
				<getValuesFunction>return "";</getValuesFunction>
				<helpHtml>If supplied, filter to comma separated columns.</helpHtml>
			</property>

			<property>
				<key>outputFilename</key>
				<name>Output file name</name>
				<changeValueJavaScript>text</changeValueJavaScript>
				<getValuesFunction>return "";</getValuesFunction>
				<helpHtml>Provide an output filename for the generated CSV file.</helpHtml>
			</property>
			
		</properties>
		
		<actionJavaScript>
		<![CDATA[

// JQuery is ready! 
$(document).ready( function() {
	// check if the download form id exists in the page and append it if not
	if(!$("#downloadForm").length){
		var form = $('<form/>', {id:'downloadForm', action: 'downloadCSV.jsp', method:'post', target:'_blank', style:'display:none'});
		form.append($('<input/>', {id:'downloadFileName', name:'downloadFileName', value:'filename.csv'}));
		form.append($('<input/>', {id:'downloadData', name:'downloadData'}));
		//append the body
		$("body").append(form);
	}
});

function Action_downloadCSV(ev, actionId, controlId, fileName, includeHiddenColumns, includeFields, details) {

	// set the output filename of the form
	$('#downloadFileName').attr({"value": fileName});
	
	// create an object for the data with rows and headers
	var data = {rows:[],headers:[]};
	
	// get the control
	var control = $("#" + controlId);
	
	includeFields = includeFields.trim();
	var outputFields = includeFields && includeFields.split(",").map(function(column) {
		return column.trim();
	}).filter(function(column) {
		return column !== "";
	});
	
	// if the control is a grid in the page
	if (control.is(".grid") || control.is(".gridScroll")) {
		
		// use the control as the grid
		var grid = control;
		// find the table
		var table = grid.is("table") ? grid : grid.find('table').last();
		var columns = details.columns || details.dynamicColumns;
		
		// loop the rows
		table.find('tr').each(function(rowIndex) {
			// add a rows collection if not header row
			if (rowIndex > 0) data.rows.push([]);
			var row = rowIndex == 0 ? data.headers : data.rows[rowIndex-1];
			var cells = $(this).find('td');
			if (includeFields && columns) {
				outputFields.forEach(function(outputField) {
					var columnIndex = columns.map(function(column) {
						return column.field.toLowerCase();
					}).indexOf(outputField.toLowerCase());
					var c = $(cells[columnIndex]);
					row.push(c.text());
				});
			} else {
				// loop the cells
				cells.each(function(columnIndex) {
					// get a ref to the cell
					var c = $(this);
					 // ignore hidden columns
					if (includeHiddenColumns || (columns && columns[columnIndex].visible)) {
						row.push(c.text());
					}
				});
			}
		});
	
	} else {
	
		// if we have details
		if (details) {
			
			var getData = details.type === "grid" ? getGridDataStoreData : getDataStoreData;
			var controlData = getData(controlId, details)
			var controlFields = controlData.fields.map(function(field) { return field.toLowerCase(); });
			var indexes = outputFields.map(function(outputField) {
				return controlFields.indexOf(outputField.toLowerCase());
			});
			
			data.headers = indexes.map(function(index) { return controlData.fields[index] });
			data.rows = controlData.rows.map(function(row) { return indexes.map(function(index) { return row[index] }) });
			
		}
	
	}
	
	// stringify it so it can be sent in the form
	data =  JSON.stringify(data);
	// put it in the form input
	$('#downloadData').val(data);
	// submit the form
	$('#downloadForm').submit();

}


		]]>	
		</actionJavaScript>
		
	</action>
</actions>