<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>mobile</type>
        <name>Mobile</name>
	    <class>com.rapid.actions.Mobile</class>
	    <helpHtml>Runs specialised actions for mobile devices (start a phone call, take a photo, scan a barcode, etc.).</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>

		<properties>
		    
	        <property>
	            <key>actionType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "dial";</setConstructValueFunction>
	            <changeValueJavaScript>mobileActionType</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Defines the type of mobile action that will be carried out, such as dialing a number, scanning a barcode or sending a GPS location.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberControlId</key>
	            <name>Phone number source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the phone number is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberField</key>
	            <name>Phone number source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the phone number source. An example of use would be getting the phone number from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emailControlId</key>
	            <name>Email address source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the email address is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emailField</key>
	            <name>Email address source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the email address source. An example of use would be getting the email address from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>subjectControlId</key>
	            <name>Subject source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the email subject is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>subjectField</key>
	            <name>Email source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the email subject source. An example of use would be getting the email subject from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberControlId</key>
	            <name>Phone number source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the phone number is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberField</key>
	            <name>Phone number source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the phone number source. An example of use would be getting the phone number from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>messageControlId</key>
	            <name>Message source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.messageControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the message is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>messageField</key>
	            <name>Message source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the message source. An example of use would be getting the message from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>urlControlId</key>
	            <name>URL source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.messageControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the URL is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>urlField</key>
	            <name>URL source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the URL source. An example of use would be getting the URL from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>captureMode</key>
	            <name>Mode</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "closePreview";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
// for backwards redudancy, set undefined to previous default behaviour
if (!this.captureMode) this.captureMode = "closePreview";
// return the values as usual
return [["closePreview","Close preview"],["keepPreview","Keep preview open"],["showCapture","Show captured image/video"],["editCapture","Edit captured image/video"]];
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets what to do after an image/video is captured.</helpHtml>
	        </property>
	        
	        <property>
	            <key>galleryControlId</key>
	            <name>Gallery control</name>
	            <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getControlOptions(this.galleryControlId, null, "gallery");
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Selects which gallery control to use on the page. You will need to have a gallery control on the page in order to display the images.</helpHtml>
	        </property>
	        
	        <property>
	            <key>imageMaxSize</key>
	            <name>Max width/height (px)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "500";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the maximum height and width of the captured image in pixels. Images with either side larger will be scaled down.</helpHtml>
	        </property>
	        
	        <property>
	            <key>imageQuality</key>
	            <name>Quality (%)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "50";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the quality of the image as a percentage. The better the quality, the larger the image file size.</helpHtml>
	        </property>
	        
	        <property>
	            <key>videoMaxDuration</key>
	            <name>Max duration (sec)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the maximum number of seconds a video can last.</helpHtml>
	        </property>
	        
	        <property>
	            <key>cameraSelectImage</key>
	            <name>Option to select</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether or not to offer the option of selecting an image from the device.</helpHtml>
	        </property>
	        
	        <property>
	            <key>remoteSource</key>
	            <name>Remote</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "false";</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to capture the device's cameras or another running application.</helpHtml>
	        </property>
	        
	        <property>
	            <key>includeAudio</key>
	            <name>Audio</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "false";</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to record audio.</helpHtml>
	        </property>
	        
	         <property>
	            <key>galleryControlIds</key>
	            <name>Controls</name>
	            <visible>false</visible>
	            <changeValueJavaScript>galleryControls</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the gallery or signature control on the page to put the image in to.</helpHtml>
	        </property>
	        
	         <property>
	            <key>barcodeDestinations</key>
	            <name>Destinations</name>
	            <visible>false</visible>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <helpHtml>Sets the destination for where to place the barcode data on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>successActions</key>
	            <name>Success actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to set a success action for when the image is successfully imported into the control specified.</helpHtml>
	        </property>
	        
	        <property>
	            <key>errorActions</key>
	            <name>Error actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to set an error action for when the image is not successfully imported into the control specified.</helpHtml>
	        </property>
	        	        
	        <property>
	            <key>navigateControlId</key>
	            <name>Navigate to source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.navigateControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control that holds the data of where we want to navigate to.</helpHtml>
	        </property>
	        
	        <property>
	            <key>navigateField</key>
	            <name>Navigate to source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the source of where we want to navigate to. An example of use would be from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>navigateSearchFields</key>
	            <name>Navigate to search fields</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Fields in the navigate to source control to use to search for the location to navigate to.</helpHtml>
	        </property>
	        
	         <property>
	            <key>navigateMode</key>
	            <name>Navigation mode</name>
	            <visible>false</visible>
	            <setConstructValueFunction>
	                <![CDATA[
return "d";
	                ]]>
	            </setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["d","driving"],["w","walking"],["b","cycling"],["transit","public transport"]];
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets the type of transport being used to navigate, such as public transport.</helpHtml>
	        </property>
	        
	        <property>
	            <key>message</key>
	            <name>Message</name>
	            <visible>false</visible>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>
	            <helpHtml>Sets a message to display in the status bar.</helpHtml>
	        </property>
	        	        	        
	        <property>
	            <key>gpsDestinations</key>
	            <name>Destinations</name>
	            <visible>false</visible>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <helpHtml>Sets which control on the page will hold the GPS location sent.</helpHtml>
	        </property>
         	        
	        <property>
	            <key>gpsFrequency</key>
	            <name>Update frequency</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return 0;</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the number of seconds between the latest GPS position being sent. A value of 0 means the position will only be sent once.</helpHtml>
	        </property>
	        
	        <property>
	            <key>gpsCheck</key>
	            <name>Check GPS enabled</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to check if the mobile device has GPS enabled or not.</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeDirection</key>
	            <name>Direction</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "left";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return ["left","right","down","up"];</getValuesFunction>
	            <helpHtml>The direction the fingers are swiped in</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeFingers</key>
	            <name>Number of fingers</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "any";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return ["any","1","2"];</getValuesFunction>
	            <helpHtml>The number of fingers used in the swipe</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeControl</key>
	            <name>Control</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "html";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option><option value ='html'" + (this.swipeControl == "html" ? "selected='selected'" : "") + ">page</option>" + getControlOptions(this.swipeControl);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control the swipe is performed on</helpHtml>
	        </property>
	        	        	        
	        <property>
	            <key>onlineWorking</key>
	            <name>Working dialogue</name>
	            <visible>false</visible>
	            <changeValueJavaScript>navigationPage</changeValueJavaScript>
	            <helpHtml>Sets a page to appear as dialogue if the mobile device is connected online.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineFail</key>
	            <name>Offline dialogue</name>
	            <visible>false</visible>
	            <changeValueJavaScript>navigationPage</changeValueJavaScript>
	            <helpHtml>Sets a page to appear as dialogue if the mobile device is not connected to the Internet.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineActions</key>
	            <name>Actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to define actions to be carried out applicable to the type. For example if the mobile device was swiped, or has an established internet connection.</helpHtml>
	        </property>
	        
	    </properties>
	    
		<resources>
		    
	        <resource>
	            <type>javascriptFile</type>
	            <contents>
	               scripts/controls/map.js
	            </contents>
            </resource>
            
	        <resource>
	            <type>javascriptLink</type>
	            <contents>scripts_min/jquery-touchSwipe-1.6.18.min.js</contents>
	        </resource>
	        
	        <resource>
	        	<type>css</type>
	        	<contents>

.cameraControlBasic {
	background: black;
	outline: none;
	padding: 10px;
	margin: 20px;
	border-radius: 50%;
	border-width: 2px;
	border-color: white;
	border-style: outset;
	width: 62px;
	text-align: center;
	display: inline-block;
	cursor: pointer;
}

.cameraControl {
	background: black;
	outline: none;
	border-radius: 50%;
	border-width: 2px;
	border-color: white;
	border-style: outset;
    height: 70px;
    width: 70px;
    color: #FFF;
}

.cameraControlBasic:hover, .cameraControl:hover, #btnInputImage:hover {
	background: #444;
}

.cameraControl + .cameraControl {
    margin-left: 20px;
}

#captureCount, #videoRecordTimer {
    font-size: 16px;
    font-weight: 700;
    color: #FFF;
    text-shadow: 0 1px 10px #000, 0 1px 2px #000;
}

.cameraIcon {
	font-size: 38px;
	color: white;
}

#cameraVideoContainer {
	position:fixed;
	left:0;
	right:0;
	top:0;
	bottom:0;
	width:100%;
	height:100%;
	background: #111;
	z-index:1010;
	display: none;
	user-select: none;
}

#cameraPlayer {
	width:100%; 
	height:100%; 
	object-fit:contain;
}

.inputImagePage {
	text-align: center;
}

.inputImagePage p {
	margin-top: 1em;
}

.inputImagePageButton {
	min-width: 200px; 
	margin-top: 1em;
	border: 1px solid black;
}

.btnRecording {
	background: #C00;
}

#cropBox {
	position: fixed;
	box-sizing: content-box;
	margin: -2px;
	pointer-events: none;
	border: solid 2px #FFF;
	outline: solid 2000px #00000066;
	width: 0;
	height: 0;
	opacity: 1;
	transition: opacity 0.15s linear;
}

#cropBox.hiddenCrop {
	opacity: 0;
}

#btnInputImage {
	cursor: pointer;
}

#cameraVideoContainer :not(video) {
	transition: opacity 0.3s;
	opacity: 1;
}

#cameraVideoContainer div {
	pointer-events: none;
}

#cameraVideoContainer div * {
	pointer-events: all;
}

	        	</contents>
	        </resource>
            
		</resources>
	    
		<actionJavaScript>
	        <![CDATA[ 
     
function Action_mobile(actionId, type) {
	// action callback
	alert("Callback for " + actionId + "." + type);
}

// pointer events support from http://labs.rampinteractive.co.uk/touchSwipe/demos/index.html
var SUPPORTS_TOUCH = 'ontouchstart' in window;
var SUPPORTS_POINTER_IE10 = window.navigator.msPointerEnabled && !window.PointerEvent && !SUPPORTS_TOUCH;
var SUPPORTS_POINTER = (window.PointerEvent || window.navigator.msPointerEnabled) && !SUPPORTS_TOUCH;

var useTouchEvents = (SUPPORTS_TOUCH || SUPPORTS_POINTER || !options.fallbackToMouseEvents);
var START_EV = useTouchEvents ? (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerDown' : 'pointerdown') : 'touchstart') : 'mousedown';
var MOVE_EV = useTouchEvents ? (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerMove' : 'pointermove') : 'touchmove') : 'mousemove';
var END_EV = useTouchEvents ? (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerUp' : 'pointerup') : 'touchend') : 'mouseup';
var LEAVE_EV = useTouchEvents ? (SUPPORTS_POINTER ? 'mouseleave' : null) : 'mouseleave'; //we manually detect leave on touch devices, so null event here
var CANCEL_EV = (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerCancel' : 'pointercancel') : 'touchcancel');

// a map of swipe handlers as the plugin only allows one handler to be registerd at a time
_swipeHandlers = {};

// a function to check the map of handlers and call any number of functions
function handleSwipe(event, direction, distance, duration, fingers, fingerData, target, ev) {
	// get the handlers for a target
	var handlers = _swipeHandlers[target];
	// loop them
	for (var i in handlers) {
		// get the hanlder
		var handler = handlers[i];
		// if the directions match and either the fingers match too, or are all/any, run the function!
		if (handler.direction == direction && (handler.fingers == fingers || handler.fingers == 0)) handler["function"](ev);
	}
}

var _cameraPlayer;
var _availableCameras = [];
var _currentFacingMode;
var _galleryControlId;
var _size;
var _quality;
var _includeAudio;
var _videoMimeType;

if (navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia && navigator.getDisplayMedia) navigator.mediaDevices.getDisplayMedia = navigator.getDisplayMedia;

function getFacingMode() {

	// if local storage is supported read the value from that
	if (typeof(Storage) !== "undefined") _currentFacingMode = localStorage.getItem("currentFacingMode");
	// set the default if no value held yet
	if (!_currentFacingMode) setFacingMode("environment");
	return _currentFacingMode;
	
}

function setFacingMode(mode) {

	// if local storage is supported save the value into that
	if (typeof(Storage) !== "undefined") localStorage.setItem("currentFacingMode", mode);
	_currentFacingMode = mode;
}

function hasGetUserMedia() {
	// Return the value's truthy boolean value (e.g. if its null, will return false)
	return Boolean(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
}

function hasMediaRecorder() {
	return typeof MediaRecorder != "undefined";
}

function getAvailableCameras() {
	
	if (hasGetUserMedia()) {
		
		navigator.mediaDevices.enumerateDevices()
		.then(function(devices){
			
			devices.forEach(function(device){
			
				if (device.kind === "videoinput") {
					console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
					_availableCameras.push(device.deviceId);

				}
				
			});
		
		})
		.catch(function(err){
			
			console.log(err.name + ": " + err.message);
			
		});
		
	}
	
}

// media sources

var gainedAudioPermission = false;

var _mobileCamera = {
	getStream: function(options) {
		_mobileCamera.closeStream();
		var ignoreAudio = options && options.ignoreAudio;
		// requesting height or with, max or ideal, fails to get the camera in older browsers
		return new Promise(function(resolve, reject) {
			navigator.mediaDevices.getUserMedia({ audio: !ignoreAudio && _includeAudio, video: { facingMode: getFacingMode() } })
			.then(function(stream) {
				if (!ignoreAudio) gainedAudioPermission = true;
				resolve(stream);
			}).catch(function(err) {
				if (err.name === "NotAllowedError") resolve(
					navigator.mediaDevices.getUserMedia({ audio: false, video: { facingMode: getFacingMode() } })
				);
			});
		});
	},
	closeStream: function() {
		if (hasGetUserMedia()) {
			// Stop all video streams attached to the video element
			if (_cameraPlayer && _cameraPlayer.srcObject && _cameraPlayer.srcObject.getVideoTracks) {
				_cameraPlayer.srcObject.getVideoTracks().concat(_cameraPlayer.srcObject.getAudioTracks())
				.forEach(function(track) {
					track.stop();
				});
			}
		}
	},
	toggleCamera: function() {
		// if there is more than camera available
		if (_availableCameras.length > 1) {
			// check and toggle the facing mode
			if (getFacingMode() === "environment") {
				setFacingMode("user");
			} else {
				setFacingMode("environment");
			}
			// request the new camera
			navigator.mediaDevices.getUserMedia({ audio: false, video: {facingMode: getFacingMode()} })
			.then(function(stream) {
				// stop any current preview
				_mobileCamera.closeStream();
				_cameraPlayer.srcObject = stream;
			}).catch(function() {});
		}
	},
	permissionDenied: function(alternative) {
		alternative();
	},
	ifAvailable: function(todo) {
		if (navigator.mediaDevices.getUserMedia) todo();
	},
	getNotSupportedMessage: function() {
		return "Video capture is not supported by your browser";
	}
};

var _mobileRemote = {
	stream: undefined,
	desktopStream: undefined,
	desktopAudioTrack: undefined,
	getStream: function(options) {
		var ignoreAudio = options && options.ignoreAudio;
		if (_mobileRemote.stream && ignoreAudio) {
			return Promise.resolve(_mobileRemote.stream);
		} else {
			return _mobileRemote.getNewStream(options)
			.then(function(stream) {
				return _mobileRemote.stream = stream;
			});
		}
	},
	getNewStream: function(options) {
		if (!navigator.mediaDevices.getDisplayMedia) return Promise.reject("Can't find navigator.mediaDevices.getDisplayMedia");
		
		var ignoreAudio = options && options.ignoreAudio;
		
		var desktop = Promise.resolve(_mobileRemote.desktopStream);
		if (ignoreAudio) desktop = navigator.mediaDevices.getDisplayMedia({ audio: _includeAudio, video: { frameRate: 30, height: { max: _size }, width: { max: _size } } });
		var microphone = Promise.resolve(undefined);
		if (!ignoreAudio && _includeAudio) microphone = navigator.mediaDevices.getUserMedia({ audio: true });
		
		return desktop.then(function(desktopStream) {
			_mobileRemote.desktopStream = desktopStream;
			
			return microphone.then(function(microphoneStream) {
				
				var desktopVideoTracks = desktopStream.getVideoTracks();
				var desktopAudioTracks = desktopStream.getAudioTracks();
				var microphoneTracks = microphoneStream ? microphoneStream.getAudioTracks() : [];
				var tracks = desktopVideoTracks.concat(desktopAudioTracks).concat(microphoneTracks);
				
				tracks.forEach(function(track) {
					track.onended = function() {
						_mobileRemote.closeStream();
						_mobileRemote.stream = undefined;
						tracks.forEach(function(track) {
							track.stop();
						});
					};
				});
				
				var desktopAudio = _mobileRemote.desktopAudioTrack || desktopAudioTracks[0];
				_mobileRemote.desktopAudioTrack = desktopAudio;
				
				var microphoneAudio = microphoneTracks[0];
				if (microphoneAudio) gainedAudioPermission = true;
				
				var mergedAudioTrack = desktopAudio && microphoneAudio ? mergeAudioStreams(desktopStream, microphoneStream) :
					(desktopAudio || microphoneAudio);
				
				if (desktopAudio) desktopStream.removeTrack(desktopAudio);
				if (mergedAudioTrack) desktopStream.addTrack(mergedAudioTrack);
				
				return desktopStream;
			});
		});
	},
	closeStream: function() {},
	toggleCamera: function() {
		
		_mobileRemote.stream.getVideoTracks().forEach(function(track) {
			track.stop();
		});
		_mobileRemote.stream.getAudioTracks().forEach(function(track) {
			track.stop();
		});
		_mobileRemote.stream = undefined;
		_mobileRemote.desktopStream = undefined;
		_mobileRemote.desktopAudioTrack = undefined;
		
		_mobileRemote.getNewStream({ ignoreAudio: true })
		.then(function(stream) {
			
			_cameraPlayer.srcObject = stream;
			_mobileRemote.stream = stream;
			
		}).catch(function() {});
	},
	permissionDenied: function() {},
	ifAvailable: function(todo) {
		if(_mobileRemote.stream || navigator.mediaDevices.getDisplayMedia) todo();
	},
	getNotSupportedMessage: function() {
		return "Remote capture is not supported by your browser";
	}
};

// media capturers

var _closePreview = {
	capture: function(data, source) {
		var galleryControlId = _cameraPlayer.getAttribute("data-galleryId");
		var galleryDetails = window[galleryControlId + "details"];
		
		$("#cameraVideoContainer").remove();
		source.closeStream();
		$(document.body).css({overflow:"unset", "touch-action":"auto"});
		$(window).css({overflow:"unset", "touch-action":"auto"});
		setData_gallery(data.ev, galleryControlId, "url", galleryDetails, data.dataURL);
	},
	indicator: function() {
		return "";
	}
}

var _keepPreview = {
	capture: function(data, source) {
		var galleryControlId = _cameraPlayer.getAttribute("data-galleryId");
		var galleryDetails = window[galleryControlId + "details"];
		
		var captureCount = $("#captureCount");
		captureCount.text(
			parseInt(captureCount.text() || 0) + 1 + " added to gallery"
		);
		setData_gallery(data.ev, galleryControlId, "url", galleryDetails, data.dataURL);
	},
	indicator: function() {
		return "<p id='captureCount'></p>";
	}
}

var _showCapture = {
	capture: function(data, source) {
		var galleryControlId = _cameraPlayer.getAttribute("data-galleryId");
		var galleryDetails = window[galleryControlId + "details"];
		
		setData_gallery(data.ev, galleryControlId, "url", galleryDetails, data.dataURL);
		var img = $("#" + galleryControlId).find(".galleryItem").last();
		Gallery_showImage(data.ev, galleryControlId, img, true);
	},
	indicator: function() {
		return "";
	}
}

var _editCapture = {
	capture: function(data, source) {
		var galleryControlId = _cameraPlayer.getAttribute("data-galleryId");
		var galleryDetails = window[galleryControlId + "details"];
		
		setData_gallery(data.ev, galleryControlId, "url", galleryDetails, data.dataURL);
		var img = $("#" + galleryControlId).find(".galleryItem").last();
		Gallery_showImage(data.ev, galleryControlId, img, true, true);
	},
	indicator: function() {
		return "";
	}
}

var _formats = ["mp4", "webm"];
var _codecs = ["h264", "vp9", "vp8", "av1", ""];

function orderedByPreference(array, preference) {
	array.sort(function(a, b) {
		return a === preference ? -1 :
			   b === preference ? 1 :
			   0;
	});
	return array;
}

function optimalVideoMimeType(formats, codecs) {
	
	for (formatIndex = 0; formatIndex < formats.length; formatIndex++) {
		var format = formats[formatIndex];
		
		for (codecIndex = 0; codecIndex < codecs.length; codecIndex++) {
		var codec = codecs[codecIndex];
		
			var mimeType = "video/" + format + (codec && ";codec=") + codec;
			if (MediaRecorder.isTypeSupported(mimeType)) return mimeType;
		}
	}
}

function turnOnCamera(galleryControlId, size, quality, maxDuration, cameraSelectImage, mediums, remoteSource, includeAudio, captureMode) {
	
	_size = size;
	_cameraSelectImage = cameraSelectImage;
	
	if (hasGetUserMedia()) {
		
		_galleryControlId = galleryControlId;
		_quality = quality;
		_includeAudio = Boolean(includeAudio);
		
		if (!hasMediaRecorder()) mediums = mediums.filter(function(medium) { return medium !== "video"; });
		
		if (mediums.includes("video")) {
			_videoMimeType = optimalVideoMimeType(_formats, _codecs);
		}
		
		var source = remoteSource ? _mobileRemote : _mobileCamera;
		
		var mediaCapturer = captureMode === "keepPreview" ? _keepPreview :
							captureMode === "showCapture" ? _showCapture :
							captureMode === "editCapture" ? _editCapture :
							_closePreview;
		
		_cameraPlayer = document.getElementById("cameraPlayer");
		
		var mimeTypes = mediums
			.map(function(medium) { return medium + "/*"; })
			.join(",");
		
		$("#inputImage").remove();
		$(document.body).append("<input type='file' accept='" + mimeTypes + "' id='inputImage' style='display:none;'>");
		
		$("#inputImage").on("change", function(changeEvent) {
			
			$("#cameraVideoContainer").remove();
			$(document.body).css({overflow:"unset", "touch-action":"auto"});
			$(window).css({overflow:"unset", "touch-action":"auto"});
			
			var fileReader = new FileReader();
			
			$(fileReader).on("load", function(loadEvent) {
				
				var image = new Image();
				image.src = loadEvent.target.result;
				
				$(image).on("load", function(loadEvent) {
					
					var imageWidth = loadEvent.target.width;
					var imageHeight = loadEvent.target.height;
					
					// Get a data url of the canvas, containing a representation of the image
					// Default format type is image/png
					var dataURL = scaleImageToDataURL(image, image.width, image.height) || image.src;
			
					// call gallery set data to display image
					setData_gallery(loadEvent, galleryControlId, "url", galleryDetails, dataURL);
					
					$(".inputImagePage").remove();
				});
			});
			
			fileReader.readAsDataURL(this.files[0]);
		});
		
		var inputImageHtml = _cameraSelectImage ? "<div style='position:fixed; top:0; width:100%; text-align:center;'>"
	    					+ "<label id='btnInputImage' for='inputImage' class='cameraControlBasic'><i class='fas fa-folder-open cameraIcon'></i></label></div>"
							: "";
	
		// Add the divs
		var cameraPreviewHtml = "<div id='cameraVideoContainer'>"
							+ "<video id='cameraPlayer' autoplay playsinline muted='true'></video>"
							+ "<div id='cropBox' class='hiddenCrop'></div>"
							+ inputImageHtml
							+ "<button id='btnToggleCamera' class='cameraControlBasic' style='position:absolute; left:0;'><i class='fas fa-retweet cameraIcon' style='margin-left:-5px;'></i></button>"								  
							+ "<button id ='btnCloseCamera' class='cameraControlBasic' style='position:absolute; right:0;'><i class='fas fa-times cameraIcon'></i></button>"
							+ "<div style='position:fixed; bottom:0; width:100%; text-align:center; padding:20px;'>"
							+ mediaCapturer.indicator()
							+ (mediums.includes('video') ? "<p id='videoRecordTimer'></p>" : "")
							+ (mediums.includes('image') ? "<button id ='btnTakePicture' class='cameraControl'><i class='fas fa-camera cameraIcon'></i></button>" : "")
							+ (mediums.includes('video') && MediaRecorder ? "<button id ='btnRecordVideo' class='cameraControl'><i class='fas fa-video cameraIcon'></i></button>" : "")
							+ "</div>"
							+ "</div>";
		
		var galleryDetails = window[galleryControlId + "details"];
		
		$("body").append(cameraPreviewHtml);
		
		$(document.body).css({overflow:"hidden", "touch-action":"none"});
		$(window).css({overflow:"hidden", "touch-action":"none"});
		
		$("#btnToggleCamera").click(source.toggleCamera);
		
		$("#btnCloseCamera").click(function() {
			source.closeStream();
			$("#cameraVideoContainer").remove();
			$(document.body).css({overflow:"unset", "touch-action":"auto"});
			$(window).css({overflow:"unset", "touch-action":"auto"});
		});
		
		$("#btnInputImage").click(source.closeStream);
			
		_cameraPlayer = document.getElementById("cameraPlayer");
		
		_cameraPlayer.setAttribute("data-galleryId",galleryControlId);
		
		source.ifAvailable(function() {
			$("#cameraVideoContainer").show();
		});
		
		// Obtain the user media object
		source.getStream({ ignoreAudio: true })
		.then(function(stream) {
			
			$("#cameraVideoContainer").show();
			
			// Use the stream
			// Now attach the video stream to the video element and auto play
			_cameraPlayer.srcObject = stream;
			
			if (!$("#cameraVideoContainer").length) {
				source.closeStream();
				return;
			}
			
			if (mediums.includes('image')) {
				
				var photoOptions = {};
				var cropBox = $("#cropBox");
				
				var left = 0;
				var top = 0;
				var width = 0;
				var height = 0;
				
				function setCropBox(left, top, width, height, videoOffsetX, videoOffsetY, videoPixelsPerScreenPixel) {
					
					cropBox.css({
						left: left,
						top: top,
						width: width,
						height: height
					});
					
					if (width > 10 && height > 10) {
						photoOptions.crop = {
							left: (left - videoOffsetX) * videoPixelsPerScreenPixel,
							top: (top - videoOffsetY) * videoPixelsPerScreenPixel,
							width: width * videoPixelsPerScreenPixel,
							height: height * videoPixelsPerScreenPixel
						};
						cropBox.removeClass("hiddenCrop");
					} else {
						photoOptions.crop = undefined;
						cropBox.addClass("hiddenCrop");
					}
				}
				
				var cropOptions = sessionStorage.getItem("cropBoxStreamID_" + stream.id);
				if (cropOptions) {
					var cropOptions = JSON.parse(cropOptions);
					if (cropOptions) setCropBox(cropOptions.left, cropOptions.top, cropOptions.width, cropOptions.height, cropOptions.videoOffsetX, cropOptions.videoOffsetY, cropOptions.videoPixelsPerScreenPixel);
				}
				
				_cameraPlayer.addEventListener(START_EV, function(ev) {
					
					var tools = $("#cameraVideoContainer button, #cameraVideoContainer label");
					tools.css({ "pointer-events": "none", opacity: 0.3 });
					photoOptions.crop = undefined;
					cropBox.addClass("hiddenCrop");
					
					var startX = ev.clientX || ev.pageX;
					var startY = ev.clientY || ev.pageY;
						
					var videoWidth = _cameraPlayer.videoWidth;
					var videoHeight = _cameraPlayer.videoHeight;
					
					var playerWidth = _cameraPlayer.offsetWidth;
					var playerHeight = _cameraPlayer.offsetHeight;
					
					var videoRatio = videoWidth / videoHeight;
					var playerRatio = playerWidth / playerHeight;
					
					var videoWiderThanPlayer = videoRatio >= playerRatio;
					
					var videoPixelsPerScreenPixel = videoWiderThanPlayer ? (videoWidth / playerWidth) : (videoHeight / playerHeight);
					
					var videoScreenWidth = videoWiderThanPlayer ? playerWidth : (playerHeight * videoRatio);
					var videoScreenHeight = videoWiderThanPlayer ? (playerWidth / videoRatio) : playerHeight;
					
					var videoOffsetX = (playerWidth - videoScreenWidth) / 2;
					var videoOffsetY = (playerHeight - videoScreenHeight) / 2;
					
					function mouseMoveListener(ev) {
						
						var currentX = ev.clientX || ev.pageX;
						var currentY = ev.clientY || ev.pageY;
						
						left = Math.min(currentX, startX);
						top = Math.min(currentY, startY);
						width = Math.abs(currentX - startX);
						height = Math.abs(currentY - startY);
						
						setCropBox(left, top, width, height, videoOffsetX, videoOffsetY, videoPixelsPerScreenPixel);
					}
					
					_cameraPlayer.addEventListener(MOVE_EV, mouseMoveListener);
					
					window.addEventListener(END_EV, function(ev) {
						
						tools.css({ "pointer-events": "all", opacity: 1 });
						_cameraPlayer.removeEventListener(MOVE_EV, mouseMoveListener);
						sessionStorage.setItem("cropBoxStreamID_" + stream.id, JSON.stringify({ left: left, top: top, width: width, height: height, videoOffsetX: videoOffsetX, videoOffsetY: videoOffsetY, videoPixelsPerScreenPixel: videoPixelsPerScreenPixel }));
						
					}, { once: true });
				});
				
				$("#btnTakePicture").click(function(ev) {
					mediaCapturer.capture(takePicture(ev, photoOptions), source);
				});
			}
			
			var bitsPerSecond = (quality / 100) * (2500000 + 128000);
			
			if (mediums.includes('video') && MediaRecorder) {
				btnRecordVideo.onclick = function() {
					if (_includeAudio && (!gainedAudioPermission && _cameraPlayer.srcObject)) {
						source.getStream({ ignoreAudio: false })
						.then(function(stream) {
							_cameraPlayer.srcObject = stream;
							recordVideo(stream, bitsPerSecond, maxDuration, function(data) {
								mediaCapturer.capture(data, source);
							});
						})
						.catch(function(err) {
							if (err.name === "NotAllowedError") recordVideo(stream, bitsPerSecond, maxDuration, function(data) {
								mediaCapturer.capture(data, source);
							});
						});
					} else {
						recordVideo(_cameraPlayer.srcObject, bitsPerSecond, maxDuration, function(data) {
							mediaCapturer.capture(data, source);
						});
					}
				};
			}
			
			$("#btnPause").click(function(ev) {
				pauseCamera(ev, galleryControlId, galleryDetails);
			});
			
			// Get all the available cameras into global array
			getAvailableCameras();
		})
		.catch(function(err) {
			// Close the preview
			$("#cameraVideoContainer").remove();
			// Handle the error
			console.log(err.name + ": " + err.message);
			if (err.name === "NotAllowedError" && err.message !== "Invalid state") {
				source.permissionDenied(function() {
					selectItem(galleryControlId, _size, mediums, "Permission to access your camera was denied");
				});
			} else {
				selectItem(galleryControlId, _size, mediums, source.getNotSupportedMessage());
			}
		});
		
	} else {
	
		$("#cameraVideoContainer").remove();
		//alert("getUserMedia() is not supported by your browser");
		console.log("getUserMedia() is not supported by your browser");
		selectItem(galleryControlId, _size, mediums, "Video capture is not supported by your browser");
	}
	
}

function stopCameraStream() {
	if (hasGetUserMedia()) {
		// Stop all video streams attached to the video element
		_cameraPlayer.srcObject.getVideoTracks().forEach(function(track){
			// Close the preview
			track.stop();
		});
	}
	
}

function mergeAudioStreams(stream1, stream2) {
	
	var context = new AudioContext();
	
	var source1 = context.createMediaStreamSource(stream1);
	var source2 = context.createMediaStreamSource(stream2);
	var destination = context.createMediaStreamDestination();
	
	var gain1 = context.createGain();
	var gain2 = context.createGain();
	gain1.gain.value = 0.7;
	gain2.gain.value = 0.7;
	
	source1.connect(gain1).connect(destination);
	source2.connect(gain2).connect(destination);
	
	return destination.stream.getAudioTracks()[0];
}

function scaleImageToDataURL(image, imageWidth, imageHeight) {
	
	var maxSize = _size;
	
	var canvas = document.createElement("canvas");
	var canvasContext = canvas.getContext("2d");
	
	// Set the width and height of the canvas, before drawing
	// Find the longest side of the videoplayer
	if (imageHeight > imageWidth) {
		
		canvas.height = Math.min(imageHeight ,maxSize);
		canvas.width = Math.min(imageWidth ,(imageWidth / imageHeight) * maxSize);
		
	} else {
	
		canvas.height = Math.min(imageHeight ,(imageHeight / imageWidth) * maxSize);
		canvas.width = Math.min(imageWidth ,maxSize);
		
	}
	
	// Draw a single frame in the player to the canvas
	canvasContext.drawImage(image, 0, 0, canvas.width, canvas.height);
	
	// Get a data url of the canvas, containing a representation of the image
	// Default format type is image/png
	return canvas.toDataURL();
}

function selectItem(galleryControlId, size, mediums, message) {
	
	_size = size;
	
	var galleryDetails = window[galleryControlId + "details"];
	
	var mimeTypes = mediums
		.map(function(medium) { return medium + "/*"; })
		.join(",");
	
	var selectWhat = mediums.join(" or ");
	
	$("#inputImage").remove();
	
	var inputHtml = "<input type='file' accept='" + mimeTypes + "' id='inputImage' style='display:none;'>"
		+ "<label for='inputImage' class='r-button button btn inputImagePageButton col-xs-12'>Select " + selectWhat + "</label>";
		
	var closeButtonHtml = "<button id='closeInputPage' class='r-button button btn inputImagePageButton col-xs-12'>Cancel</button>";
	
	var inputPageHtml = "<div class='inputImagePage dialogueCover' style='position:absolute; left:0px; top:0px; z-index:1001; width:100vw; height:100vh;'>"
		+ "</div>"
		+ "<div class='inputImagePage dialogue' style='position:fixed; visibility:visible; z-index:1001;'>"
		+ (message ? "<p>" + message + "</p>" : "")
		+ inputHtml
		+ closeButtonHtml
		+ "</div>"
	
	$("body").append(inputPageHtml);
	
	$(window).resize();
	
	$("#closeInputPage, .inputImagePage.dialogueCover").on("click", function() {
		$(".inputImagePage").remove();
	});
	
	$("#inputImage").on("change", function(changeEvent) {
		
		var fileReader = new FileReader();
		
		$(fileReader).on("load", function(loadEvent) {
			
			var image = new Image();
			image.src = loadEvent.target.result;
			
			$(image).on("load", function(loadEvent) {
				
				var imageWidth = loadEvent.target.width;
				var imageHeight = loadEvent.target.height;
				
				// Get a data url of the canvas, containing a representation of the image
				// Default format type is image/png
				var dataURL = scaleImageToDataURL(image, image.width, image.height) || image.src;
		
				// call gallery set data to display image
				setData_gallery(loadEvent, galleryControlId, "url", galleryDetails, dataURL);
				
				$(".inputImagePage").remove();
			});
		});
		
		fileReader.readAsDataURL(this.files[0]);
	});
}

function takePicture(ev, options) {
	
	if (hasGetUserMedia()) {
		
		var source = _cameraPlayer;
		
		// Get the intrinsic width and height of the videoplayer
		var vWidth = source.videoWidth;
		var vHeight = source.videoHeight;
		
		if (options.crop) {
			var crop = options.crop;
			vWidth = crop.width;
			vHeight = crop.height;
			var canvas = document.createElement("canvas");
			canvas.width = vWidth;
			canvas.height = vHeight;
			var canvasContext = canvas.getContext("2d");
			canvasContext.drawImage(source, -crop.left, -crop.top, source.videoWidth, source.videoHeight);
			source = canvas;
		}
		
		// Get a data url of the canvas, containing a representation of the image
		// Default format type is image/png
		var dataURL = scaleImageToDataURL(source, vWidth, vHeight);
		
		return { dataURL: dataURL, ev: ev };
	}
}

function recordVideo(stream, bitsPerSecond, maxDuration, callback) {
	
	var chunks = [];
	
	var mediaRecorder = new MediaRecorder(stream, { mimeType: _videoMimeType, bitsPerSecond: bitsPerSecond });
	mediaRecorder.start();
	
	$("#btnRecordVideo").addClass("btnRecording");
	
	var videoRecordTimer = $("#videoRecordTimer");
	videoRecordTimer.text("0s");
	var timerId = setInterval(function() {
		videoRecordTimer.text(
			parseInt(videoRecordTimer.text() || 0) + 1 + "s"
		);
	}, 1000);
	
	var btnToggleCamera = $("#btnToggleCamera");
	btnToggleCamera.hide();
	
	function doRecording() {
		mediaRecorder.onstop = function(ev) {
			$("#btnRecordVideo").removeClass("btnRecording");
			clearInterval(timerId);
			$("#videoRecordTimer").text("");
			btnToggleCamera.show();
			
			if ($("#btnRecordVideo").length) btnRecordVideo.onclick = function() {
				recordVideo(stream, bitsPerSecond, maxDuration, callback);
			};
			
			var blob = new Blob(chunks, { type: "video/webm" });
			var reader = new FileReader();
			reader.onload = function() {
				callback({ dataURL: reader.result, ev: ev });
			};
			reader.readAsDataURL(blob);
		};
		mediaRecorder.stop();
	}
	
	if (maxDuration > 0) setTimeout(
		function() { if (mediaRecorder.state === "recording") doRecording(); },
		maxDuration * 1000
	);
	
	btnRecordVideo.onclick = doRecording;
	
	$("#btnCloseCamera").one("click", function() {
		if (mediaRecorder.state === "recording") mediaRecorder.stop();
	});
	
	mediaRecorder.ondataavailable = function(ev) {
		chunks.push(ev.data);
	};
}

function base64toBlob(base64Data, contentType) {

    contentType = contentType || '';
    var sliceSize = 1024;
    // The atob function will decode a base64-encoded string into a new string with a character for each byte of the binary data.
    var byteCharacters = atob(base64Data);
    var bytesLength = byteCharacters.length;
    var slicesCount = Math.ceil(bytesLength / sliceSize);
    var byteArrays = new Array(slicesCount);
    for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
        var begin = sliceIndex * sliceSize;
        var end = Math.min(begin + sliceSize, bytesLength);

        var bytes = new Array(end - begin);
        for (var offset = begin, i = 0; offset < end; ++i, ++offset) {
            bytes[i] = byteCharacters[offset].charCodeAt(0);
        }
        // Convert this array of byte values into a real typed byte array by passing it to the Uint8Array constructor.
        byteArrays[sliceIndex] = new Uint8Array(bytes);
    }
    // Convert byte array to a Blob
    return new Blob(byteArrays, { type: contentType });
    
}

var _uploadedImageNames;
var _uploadedImageErrored;

function uploadImages(controlIds, ev, successCallback, errorCallback) {

	// reset uploaded images - we'll use this later to empty the session once all images are uploaded
	_uploadedImageNames = [];
	// reset uploaded image error to false - we'll use this to ensure only the first error is shown/handled
	_uploadedImageErrored = false;

	// If we have one
	if (controlIds && controlIds.length > 0) {
		
		// Loop the control ids, will be gallery or a signature, for gallery get all images, upload use data-filename attribute as file name, on success
		
		// images we are going to upload
		var images = [];
		
		for (var idx in controlIds) {
		
			var controlId = controlIds[idx];
			var control = $("#" + controlId);
			
			// Check if this is a gallery control or signature
			if (control.hasClass("gallery")) {
			
				// Get all the images from the control
				control.find(".galleryItem").each(function() {
					
					var img = $(this);
					var src = img.attr("src");
					
					if (src.indexOf("data") == 0) images.push({url:"~?a=" + _appId + "&action=uploadImage&name=" + img.attr("data-filename"), dataURL:src});
										
				});
			
			} else if (control.hasClass("signature")) {
												
				// Its a signature control - get the dataUrl from the signature
				// Get a data url of the canvas, containing a representation of the image
				// Default format type is image/png
				
				var signature = _signatureControls[controlId];

				// Get the current date
				var date = new Date();
				var dateString = date.getFullYear() + "" + padNumberWithZeros(date.getMonth() + 1,2) + "" + padNumberWithZeros(date.getDate(),2) + "_" + padNumberWithZeros(date.getHours(),2) + "" + padNumberWithZeros(date.getMinutes(),2) + "" + padNumberWithZeros(date.getSeconds(),2) + "" + padNumberWithZeros(date.getMilliseconds(),3);
				var fileName = 	dateString + ".png";

				images.push({url:"~?a=" + _appId + "&action=uploadImage&name=" + fileName, dataURL:signature.toDataURL()});
							
			}
			
		}
		
		// if there are any no images to upload
		if (images.length == 0) {
			
			// call the success immediately, if there is one
			if (successCallback) window[successCallback](ev);
			
		} else {
		
			// make a progress object set total uploads to size of images
			var progress = {totalUploads:images.length, totalUploaded:0};
			
			// loop images to upload
			for (var i in images) {
				// get the image
				var image = images[i];
				// send it for uploading
				uploadImage(image.url, image.dataURL, progress, ev, successCallback, errorCallback);
			}
			
		}
		
	}
	
}

function uploadImage(url, dataSource, progress, ev, successCallback, errorCallback) {

	try {

		var sourceParts = dataSource.split(",");
		var dataString = "data:";
		var contentType = "";
		
		if (sourceParts && sourceParts.length && sourceParts[0].indexOf(dataString) > -1) {
		
			// If dataSource starts with data: dig out contentType
			var dataParts = sourceParts[0].split(";");
			
			contentType = dataParts[0].substring(dataString.length);
			
			dataSource = sourceParts[1];
		}
		
		var data = base64toBlob(dataSource, contentType);
		
		var namePos = url.indexOf("name=");
		
		var name = url.slice(namePos + 5);
		
		// POST
		$.ajax({
			url:url,
			type:"POST",
			processData: false,  	// tell jQuery not to process the data
	   		contentType: false,  	// tell jQuery not to set contentType
			data: data,
			success: function(ev) {
				// in total uploaded
				progress.totalUploaded ++;
				// if name and session storage
				if (name && sessionStorage) _uploadedImageNames.push(name);
				// if all uploaded
				if (progress.totalUploaded == progress.totalUploads) {
					// if session storage
					if (sessionStorage) {
						// get app images storage string
						var imageStorageString = sessionStorage[_appId + "_images"];
						// if there was one
						if (imageStorageString) {
							// parse to object
							var imageStorage = JSON.parse(imageStorageString);
							// loop uploaded image names
							for (var i in _uploadedImageNames) {
								// get uploaded name
								var uploadedName = _uploadedImageNames[i];
								// delete if present
								if (imageStorage[uploadedName]) delete imageStorage[uploadedName];
							}
						    // re-stringify image storage object
						    imageStorageString = JSON.stringify(imageStorage);
						    // save it back to session
						    sessionStorage[_appId + "_images"] = imageStorageString;
						}
					}
					// call callback if there is one
					if (successCallback) window[successCallback](ev);
				}
			},
			error: function(server, status, message) {
				// if we have not had an error yet
				if (!_uploadedImageErrored) {
					// remember this one
					_uploadedImageErrored = true;
					// if there is an error call back 
					if (errorCallback) {
						// call it
						window[errorCallback](ev, server, status, message);
					} else {
						// otherwise show an alert
						alert("Error uploading images: " + server.statusText||message);
					}
				}
			}
		});
		
	} catch(ex) {
	
		if (errorCallback) {
			window[errorCallback](ev);
		} else {
			throw ex;
		}
	}
}

function downloadImages(controlIds, ev, successCallback, errorCallback) {
	
	// If we have one
	if (controlIds && controlIds.length > 0) {
		
		// Loop the control ids, will be gallery or a signature, for gallery get all images, download use data-filename attribute as file name, on success
		
		// images we are going to download
		var images = [];
		
		for (var idx in controlIds) {
		
			var controlId = controlIds[idx];
			var control = $("#" + controlId);
			
			// Check if this is a gallery control or signature
			if (control.hasClass("gallery")) {
			
				// Get all the images from the control
				control.find(".galleryItem").each(function() {
					
					var img = $(this);
					var src = img.attr("src");
					
					if (src.indexOf("data") == 0) {
						downloadMedia(src);
					}
										
				});
			
			} else if (control.hasClass("signature")) {
												
				// Its a signature control - get the dataUrl from the signature
				// Get a data url of the canvas, containing a representation of the image
				// Default format type is image/png
				
				var signature = _signatureControls[controlId];

				// Get the current date
				var date = new Date();
				var dateString = date.getFullYear() + "" + padNumberWithZeros(date.getMonth() + 1,2) + "" + padNumberWithZeros(date.getDate(),2) + "_" + padNumberWithZeros(date.getHours(),2) + "" + padNumberWithZeros(date.getMinutes(),2) + "" + padNumberWithZeros(date.getSeconds(),2) + "" + padNumberWithZeros(date.getMilliseconds(),3);
				var fileName = 	dateString + ".png";

				downloadMedia(signature.toDataURL());
			}
		}
	}
}

function downloadMedia(dataURL) {
	// alternative:  https://web.dev/native-file-system/
	chrome.downloads.download(
		URL.createObjectURL(
  			base64toBlob(dataURL, _videoMimeType)
		)
	);
}
			]]>
	    </actionJavaScript>
	  
    </action> 
</actions>