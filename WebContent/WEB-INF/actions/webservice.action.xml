<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2021 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>webservice</type>
        <name>Webservice</name>
	    <class>com.rapid.actions.Webservice</class>
	    <image>images/webservice_24x24.png</image>
	    <helpHtml>Makes SOAP, restful XML or JSON requests to a webservice and outputs the result to controls.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewFormApplications>false</addToNewFormApplications>
	    <canUseWorkflow>true</canUseWorkflow>
	    
	    <properties>
	        
	        <property>
	            <key>request</key>
	            <name>Request</name>
	            <changeValueJavaScript>webserviceRequest</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Enables you to define a webservice request. The request can be entered within the text area and can be of the type SOAP, JSON or XML/Restful. Selected inputs and outputs can be chosen for the request.</helpHtml>
	        </property>
	         
	        <property>
	            <key>showLoading</key>
	            <name>Loading animation</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to display a loading animation or not whilst the request is taking place.</helpHtml>
	        </property>
	        
	        <property>
	            <key>successActions</key>
	            <name>Success actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <workflowOutput>true</workflowOutput>
	            <helpHtml>Sets actions to be carried out for when the webservice has completed successfully.</helpHtml>
	        </property>
	        
	        <property>
	            <key>errorActions</key>
	            <name>Error actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <workflowOutput>true</workflowOutput>
	            <helpHtml>Sets actions to be carried out for when the webservice has not been successful.</helpHtml>
	        </property>
	        
	        <!-- new properties: authentication yes/no (checkbox), type (dropdown), username, password (last 3 conditional on auth = true) -->
	            
	        <property>
	            <key>auth</key>
	            <name>Use authentication</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Whether to use authentication when requesting the webservice.</helpHtml>
	        </property>
	        
	        <property>
	            <key>authType</key>
	            <name>Authorisation type</name>
	            <setConstructValueFunction>return "basic";</setConstructValueFunction>
	            <changeValueJavaScript>webserviceAuthType</changeValueJavaScript>
	            <getValuesFunction>
					return [["basic","basic"]];
				</getValuesFunction>
	            <helpHtml></helpHtml>
	        </property>

	        <property>
	            <key>authUsername</key>
	            <name>User name</name>
	            <changeValueJavaScript>webserviceAuthProperty</changeValueJavaScript>
	            <helpHtml>Specify the service user name.</helpHtml>
	        </property>
	            
	        <property>
	            <key>authPassword</key>
	            <name>Password</name>
	            <changeValueJavaScript>webserviceAuthProperty</changeValueJavaScript>
	            <helpHtml>Specify the service password.</helpHtml>
	        </property>

	    </properties>
	    
	    <resources>
	        <resource>
	    		<type>file</type>
	    		<contents>images/wait_120x15.gif</contents>
	    	</resource>
	    	<resource>
	    		<type>javascript</type>
	    		<contents>
	    			<![CDATA[
// this global associative array tracks the webserviceAction call sequences for each action	    			
var _webserviceActionSequence = {};	    

// this global associative array holds the greates sequence received back     			
var _webserviceActionMaxSequence = {};	

// this function returns an incrementing sequence for each database action call so long-running slow queries don't overrwrite fast later queries
function getWebserviceActionSequence(actionId) {
	// retrieve the current sequence for the action
	var sequence = _webserviceActionSequence[actionId];
	// if null set to 0
	if (!sequence) sequence = 0
	// increment
	sequence++;
	// store
	_webserviceActionSequence[actionId] = sequence;
	// pass back
	return sequence;
}	

// this function sets the max to 0 if null
function getWebserviceActionMaxSequence(actionId) {
	// retrieve the current sequence for the action
	var sequence = _webserviceActionMaxSequence[actionId];
	// if undefined
	if (sequence === undefined) {
		// set to 0
		sequence = 0;
		// retain for next time
		_webserviceActionMaxSequence[actionId] = sequence;
	}
	// pass back
	return sequence;
}			
	    			]]>
	    		</contents>
	    	</resource>
	    </resources>
	    	 
	    <actionJavaScript>
	        <![CDATA[ 
function Action_webservice(ev, actionId, data, outputs) {
	// only if there are data and outputs
	if (data && outputs) {
		// only if this is the latest sequence
		if (data.sequence > getWebserviceActionMaxSequence(actionId)) {
			// retain this as the lastest sequence
			_webserviceActionMaxSequence[actionId] = data.sequence;
			// loop the outputs
			for (var i in outputs) {
				var output = outputs[i];			
				window["setData_" + output.type](ev, output.id, output.field, output.details, data);
			}
		}
	}
}	        ]]>
	    </actionJavaScript>   
	    
    </action> 
</actions>