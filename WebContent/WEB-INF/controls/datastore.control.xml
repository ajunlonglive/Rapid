<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>dataStore</type>
	    <name>Data store</name>
	    <image>images/data_store.svg</image>
	    <helpHtml>An invisible control that actions can read from and write data to.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewFormApplications>false</addToNewFormApplications>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserAddPeers>true</canUserAddPeers>
	    <canBeUsedFromOtherPages>true</canBeUsedFromOtherPages>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	             
	        <property>
	            <key>storageType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "L";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["L","Local storage"],["S","Session storage"],["P","Page storage"]];
					]]>
	            </getValuesFunction>
	            <helpHtml>Sets which storage is used and how long it lasts. Local storage remains on devices, session storage is for as long as the tab/window is open, page storage is emptied with each refresh of the page.</helpHtml>
	        </property>
	        
	        <property>
				<key>advancedProperties</key>
				<name>Advanced properties</name>
				<setConstructValueFunction>return false;</setConstructValueFunction>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Whether to show advanced properties to actions.</helpHtml>
			</property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
	                                
function getDataStoreData(id, details, field) {
	var data;
	switch (details.storageType) {
		case "L":
			// use localStorage
			if (!localStorage[_appId + "_" + id]) localStorage[_appId + "_" + id] = "{}";
			// get the data string
			var dataString = localStorage[_appId + "_" + id];
			// get data
			data = JSON.parse(dataString);				
		break;
		case "S": 
			// use sessionStorage
			if (!sessionStorage[_appId + "_" + id]) sessionStorage[_appId + "_" + id] = "{}";
			// get the data string
			var dataString = sessionStorage[_appId + "_" + id];
			// get data
			data = JSON.parse(dataString);
		break;
		case "P": 
			// instansiate an object in the page if there isn't one
			if (!window[id + "datastore"]) window[id + "datastore"] = {};
			// use the in page object
			data = window[id + "datastore"];
		break;
	}  
	// return it	
	return data;
}	                

function saveDataStoreData(id, details, data) {
	switch (details.storageType) {
		case "L":
			// use localStorage
			localStorage[_appId + "_" + id] = JSON.stringify(data);			
		break;
		case "S": 
			// use sessionStorage
			sessionStorage[_appId + "_" + id] = JSON.stringify(data);
		break;
		case "P": 
			// instansiate an object in the page if there isn't one
			window[id + "datastore"] = data;
		break;
	}
	var f = window["Event_change_" + id];
	if (f) f($.Event("change"));
}


	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	  
// return our html 
return "<img id='" + this.id + "' class='nonVisibleControl' src='images/data_store.svg'></img>"
	        ]]>
	    </getHtmlFunction>
	    
	    <saveJavaScript>
	        <![CDATA[
// if we have datastorage of type P, turn off canBeUsedFromOtherPages
if (this.dataStorageType == "P") this.canBeUsedFromOtherPages = false;  
	        ]]>
	    </saveJavaScript>
	    	    
	   	<getDetailsFunction>	        
	        <![CDATA[
// turn off canBeUsedFromOtherPages if page storage 	        
if (this.storageType == "P") {
	this.canBeUsedFromOtherPages = false;
} else {
	this.canBeUsedFromOtherPages = true;
}
return {type:this.type, storageType: this.storageType};
			]]>	        	        
	    </getDetailsFunction>
	    
	    <getDataFunction>
	        <![CDATA[        
var data = getDataStoreData(id, details, field);
if (data) {		
	if (data.rows && data.fields) {
		if (field) {
			if (data.rows.length > 0) {
				for (var i in data.fields) {
					if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
						if (data.rows.length > 1) {
							var d = {fields:[field], rows:[]};
							var difference = false;
							for (var j in data.rows) {
								var value = data.rows[j][i];
								if (value !== undefined) {
									d.rows.push([value]);
									if (!difference && d.rows.length > 1 && value != d.rows[d.rows.length - 2]) difference = true;
								} else {
									d.rows.push([null]);
									diffrence = true;
								}
							}
							if (difference) {
								return d;
							} else {
								return value;
							}
						} else {
							var value = data.rows[0][i];
							if (value !== undefined) return value;
						}
						break;						
					}
				}
			}
			return null;
		} else {
			return data;
		}
	} else if (field && data[field]) {
		return data[field];
	} else {
		return null;
	}
}	 
return data;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[	  
if (details.id) id = details.id;
if (data != null && data !== undefined) {
	data = makeDataObject(data, field);
	saveDataStoreData(id, details, data);
} else {
	saveDataStoreData(id, details, null);
}
			]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    
	    <runtimeProperties>
	        
	        <runtimeProperty>
	            <type>selectedRowData</type>
	            <name>Selected row data</name>
	            <advanced>true</advanced>
	            <getPropertyFunction>
	                <![CDATA[
// get datastore data             
var dataStoreData = getDataStoreData(id, details);
// if we have data and some rows
if (dataStoreData && dataStoreData.rows) {
	// get the selected row number
	var selectedRowNumber = dataStoreData.selectedRowNumber;
	// if the selectedRowNumber has not been set but there is one row, set it to that row
	if (selectedRowNumber === undefined && dataStoreData.rows.length == 1) selectedRowNumber = 1;
	// if we had, or could derive, a row number and there is data there
	if (selectedRowNumber && dataStoreData.rows[selectedRowNumber - 1]) {
		// start the return data object
		var data = null;
		// if we were provided with a field to drill into the row data
		if (field && dataStoreData.fields) {
			// assume we can't find it	
			var fieldIndex = -1;
			// loop the fields
			for (var i in dataStoreData.fields) {
				if (dataStoreData.fields[i] && dataStoreData.fields[i].toLowerCase() == field.toLowerCase()) {
					fieldIndex = i;
					break;
				}
			}
			// if we found the field
			if (fieldIndex > -1) {
				// get the value at this field position
				data = dataStoreData.rows[selectedRowNumber - 1][fieldIndex];
			}
		} else {
			// return a whole object with just the selected row
			data = {fields:dataStoreData.fields,rows:[dataStoreData.rows[selectedRowNumber - 1]]};
		}
		// return data
		return data
	}
}	     	                
	                ]]>
	            </getPropertyFunction>
	            <setPropertyJavaScript>
	                <![CDATA[
// get datastore data             
var dataStoreData = getDataStoreData(id, details);
// if we have data and some rows
if (dataStoreData && dataStoreData.rows) {
	// get the selected row number
	var selectedRowNumber = dataStoreData.selectedRowNumber;
	// if the selectedRowNumber has not been set but there is one row, set it to that row
	if (selectedRowNumber === undefined && dataStoreData.rows.length == 1) selectedRowNumber = 1;
	// if we had, or could derive, a row number and there is data there
	if (selectedRowNumber && dataStoreData.rows[selectedRowNumber - 1]) {
	
		// make a data object from the passed in data
		data = makeDataObject(data, field);
		// if we have data to pass in and it has at least one row
		if (data && data.rows && data.rows.length > 0) {
		
			dataStoreData.fields = data.fields;
			dataStoreData.rows[selectedRowNumber - 1] = data.rows[0];
					
		} else {
			// remove the row at that position
			dataStoreData.rows.splice(selectedRowNumber - 1, 1);
		}
		// save the data store
		saveDataStoreData(id, details, dataStoreData);	
	
	
	}
}	                       
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	       	<runtimeProperty>
	            <type>selectedRowNumber</type>
	            <name>Selected row number</name>
	            <advanced>true</advanced>
	            <getPropertyFunction>
	                <![CDATA[
var data = getDataStoreData(id, details);
if (data) return data.selectedRowNumber;                       
	                ]]>
	            </getPropertyFunction>
	            <setPropertyJavaScript>
	                <![CDATA[	
var dataStoreData = getDataStoreData(id, details);	                
if (dataStoreData) {	
	data = makeDataObject(data, field);
	if (data && data.rows) {
		dataStoreData.selectedRowNumber = data.rows[0][0];
		saveDataStoreData(id, details, dataStoreData);
	}
}            
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	   	        <type>rowCount</type>
	   	        <name>Row count</name>
	   	        <advanced>true</advanced>
	   	        <getPropertyFunction>
			        <![CDATA[
var rows = -1;
var data = getDataStoreData(id, details);
if (data && data.rows && data.fields) {
  rows = data.rows.length;
  if (rows > 0 && data.fields < 1) rows = 0;
}
return rows;
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   	        
	   	    </runtimeProperty>
	   	    
	        <runtimeProperty>
	            <type>append</type>
	            <name>Append data</name>
	            <advanced>true</advanced>
	            <setPropertyJavaScript>
	                <![CDATA[	 
var dataStoreData = getDataStoreData(id, details);
if (dataStoreData) {
	data = makeDataObject(data, field);
	if (data && data.rows) {
		if (!dataStoreData.fields) dataStoreData.fields = data.fields;
		if (!dataStoreData.rows) dataStoreData.rows = []; 
		for (var i in data.rows) dataStoreData.rows.push(data.rows[i]);
		saveDataStoreData(id, details, dataStoreData);
	}	
}               
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	    </runtimeProperties>
	    
	    <designLinkJQuery>
	        <![CDATA[
.click( function(ev) {
	showDesignData($(this));
});	        	        
	        ]]>
	    </designLinkJQuery>
	    
	</control>
</controls>