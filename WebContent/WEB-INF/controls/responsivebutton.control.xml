<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>responsivebutton</type>
	    <name>Responsive button</name>
	    <image>images/button.svg</image>
	    <category>Responsive controls</category>
	    <helpHtml>A labelled control that can trigger actions when clicked. It resizes with screen-width and moves down if it gets too small.</helpHtml>
	    
	    <addToNewResponsiveApplications>true</addToNewResponsiveApplications>
	    
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	                   
	        <property>
	            <key>label</key>
	            <name>Label</name>
	            <setConstructValueFunction>return "button";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Text to appear on the button.</helpHtml>
	        </property>
	        
	        <property>
	            <key>title</key>
	            <name>Title</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Displays a message when hovered over. Useful for screen readers.</helpHtml>
	        </property>
	        
	        <property>
	            <key>glyphCode</key>
	            <name>Glyph</name>
	            <setConstructValueFunction>
	                <![CDATA[
	                return ""
	                ]]>
	            </setConstructValueFunction>
	            <changeValueJavaScript>glyphCode</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Attaches a glyph to the button. Useful for adding extra direction or improving aesthetics of a button, such as adding a magnifying glass for searching.</helpHtml>
	        </property>
	        
	        <property>
	            <key>glyphPosition</key>
	            <name>Glyph position</name>
	            <setConstructValueFunction>return "left";</setConstructValueFunction>
	            <changeValueJavaScript>buttonGlyphPosition</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return ["left","right","top","bottom"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the position of the glyph on the button.</helpHtml>
	        </property>
	           
	        <property>
	            <key>glyphBackground</key>
	            <name>Glyph background</name>
	            <setConstructValueFunction>return "none";</setConstructValueFunction>
	            <changeValueJavaScript>buttonGlyphBackground</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return ["none","circle","circle-o","square","square-o"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Applies an additional style to the glyph.</helpHtml>
	        </property>
	        
	        <property>
	            <key>extraSmall</key>
	            <name>Extra small width</name>
	            <setConstructValueFunction>return "xs-12"</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"xs-1", text:"1/12"}, {value:"xs-2", text:"2/12"}, {value:"xs-3", text:"3/12"}, {value:"xs-4", text:"4/12"}, {value:"xs-5", text:"5/12"}, {value:"xs-6", text:"6/12"}, {value:"xs-7", text:"7/12"}, {value:"xs-8", text:"8/12"}, {value:"xs-9", text:"9/12"}, {value:"xs-10", text:"10/12"}, {value:"xs-11", text:"11/12"}, {value:"xs-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is very small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>small</key>
	            <name>Small width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"sm-1", text:"1/12"}, {value:"sm-2", text:"2/12"}, {value:"sm-3", text:"3/12"}, {value:"sm-4", text:"4/12"}, {value:"sm-5", text:"5/12"}, {value:"sm-6", text:"6/12"}, {value:"sm-7", text:"7/12"}, {value:"sm-8", text:"8/12"}, {value:"sm-9", text:"9/12"}, {value:"sm-10", text:"10/12"}, {value:"sm-11", text:"11/12"}, {value:"sm-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>medium</key>
	            <name>Medium width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"md-1", text:"1/12"}, {value:"md-2", text:"2/12"}, {value:"md-3", text:"3/12"}, {value:"md-4", text:"4/12"}, {value:"md-5", text:"5/12"}, {value:"md-6", text:"6/12"}, {value:"md-7", text:"7/12"}, {value:"md-8", text:"8/12"}, {value:"md-9", text:"9/12"}, {value:"md-10", text:"10/12"}, {value:"md-11", text:"11/12"}, {value:"md-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is of a medium size. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>large</key>
	            <name>Large width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"lg-1", text:"1/12"}, {value:"lg-2", text:"2/12"}, {value:"lg-3", text:"3/12"}, {value:"lg-4", text:"4/12"}, {value:"lg-5", text:"5/12"}, {value:"lg-6", text:"6/12"}, {value:"lg-7", text:"7/12"}, {value:"lg-8", text:"8/12"}, {value:"lg-9", text:"9/12"}, {value:"lg-10", text:"10/12"}, {value:"lg-11", text:"11/12"}, {value:"lg-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is large. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>option</key>
	            <name>Option</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"None"}, {value:"-default", text:"Default"}, {value:"-primary", text:"Primary"}, {value:"-success", text:"Success"}, {value:"-info", text:"Info"}, {value:"-warning", text:"Warning"}, {value:"-danger", text:"Danger"}, {value:"-link", text:"Link"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Adds an additional style to the button.</helpHtml>
	        </property>
	        
	        <property>
	            <key>size</key>
	            <name>Size</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"-lg", text:"Large"}, {value:"", text:"Default"}, {value:"-sm", text:"Small"}, {value:"-xs", text:"Extra small"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the size of the button, different to the default.</helpHtml>
	        </property>
	        
	        <property>
	            <key>block</key>
	            <name>Display as block</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets whether the button spans the length of the page or parent control.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <resources>
	    	<resource>
				<type>cssLink</type>
				<contents>styles/bootstrap.css</contents>
			</resource>
			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/bootstrap.min.js</contents>
			</resource>
	        <resource>
	            <type>cssFile</type>
	            <contents>styles/fonts/fontawesome/css/font-awesome.css</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-brands-400.eot</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-brands-400.svg</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-brands-400.ttf</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-brands-400.woff</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-brands-400.woff2</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-regular-400.eot</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-regular-400.svg</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-regular-400.ttf</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-regular-400.woff</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-regular-400.woff2</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.eot</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.svg</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.ttf</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.woff</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.woff2</contents>
	        </resource>
	        <resource>
	            <type>cssFile</type>
	            <contents>styles/fonts/rapid/font-rapid.css</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/rapid/rapid.ttf</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/rapid/rapid.woff</contents>
	        </resource>
	        <resource>
	            <type>css</type>
	            <contents>
.buttonGlyphWithBackground {
	font-size: 0.5em;
}

/* Allow backwards compatibility for older buttons that weren't styled with the response panel around them */

div.r-button {
    padding: 0;
    border-radius: 4px;
}

div.r-button button.btn {
    width: 100%;
    background: inherit;
    font: inherit;
    padding: inherit;
    margin: inherit;
    height: inherit;
    border: inherit;
}
	            </contents>
	        </resource>
	    </resources>
	    	    	    
	    <getHtmlFunction>
	        <![CDATA[
var html = "";

var classes = getStyleClasses(this);

// add appropriate col width classes if they are specified
if (this.extraSmall) classes += " col-" + this.extraSmall;
if (this.small) classes += " col-" + this.small;
if (this.medium) classes += " col-" + this.medium;
if (this.large) classes += " col-" + this.large;
if (this.option) classes += " btn" + this.option;
if (this.size) classes += " btn" + this.size;
if (this.block) classes += " btn-block";

if (this.glyphCode) {
	
	var glyph = newGlyph(this.glyphCode);

	var glyphHtml = "<span class='" + glyph.class + " buttonGlyph'>" + glyph.html + "</span>";

	if (this.glyphBackground && this.glyphBackground != "none") {
		glyphHtml = "<span class='fa-stack fa-lg buttonGlyphWithBackground buttonGlyph'><i class='fa fa-" + this.glyphBackground + " fa-stack-2x buttonGlyphBackground'></i><i class='" + glyph.class + " fa-stack-1x'>" + glyph.html + "</i></span>";
	}
	
	var html = "<button type='button' class='btn'" + (this.title ? " title='" + escapeApos(this.title) + "'" : "") + ">";
	if (this.glyphPosition == "left" || this.glyphPosition == "top") html += glyphHtml;
	if (this.glyphPosition == "left") html += "&nbsp;";
	if (this.glyphPosition == "top") html += "<br/>";
	html += this.label;
	if (this.glyphPosition == "bottom") html += "<br/>";
	if (this.glyphPosition == "right") html += "&nbsp;";
	if (this.glyphPosition == "right" || this.glyphPosition == "bottom") html += glyphHtml;
	html += "</button>";
} else {
	html = "<button type='button' class='btn'" + (this.title ? " title='" + escapeApos(this.title) + "' " : "") + ">" + this.label + "</button>";
}
return "<div id='" + this.id + "' class='r-button" + classes + "'>" + html + "</div>";
	        ]]>
	    </getHtmlFunction>
	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Responsive container</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Button</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " button";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Button glyph</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .buttonGlyph";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Button glyph background</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .buttonGlyphBackground";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " button:hover";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " button:focus";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>	        
	    </styles>
	    
	</control>
</controls>