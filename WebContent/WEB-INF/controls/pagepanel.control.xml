<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>pagePanel</type>
	    <name>Page panel</name>
	    <image>images/page_panel.svg</image>
	    <helpHtml>Displays another page within the current one.</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>
	    
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	                  
	        <property>
	            <key>pageId</key>
	            <name>Page</name>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>None</option>" + getPageOptions(this.pageId,_page.id);
	                ]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the page to be loaded into the panel.</helpHtml>
	        </property>
	        
	        <property>
	            <key>footer</key>
	            <name>Footer</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets whether the page is to perform as a footer or not.</helpHtml>
	        </property>
	        	        
	    </properties>
	    
	    <resources>
	    	<resource>
	    		<type>css</type>
	    		<contents>
.pagePanelStickyFooter {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
}
	    		</contents>
	    	</resource>
	    	<resource>
	    		<type>javascript</type>
	    		<contents>
					<![CDATA[

var _stickyFooterHeight = 0;

function checkPagePanelFooter() {
	var footer = $("div.pagePanelFooter");
	if (footer[0]) {
		window.setTimeout( function(ev) {
			// set html height back to auto
			$("html").css("height","auto");
			$("body").css("min-height","0");
			var fh = footer.height();
			if (fh > 0) _stickyFooterHeight = fh;
			var body = $(document.body);			
			var bh = 0;
			body.children("div.r-panel:visible").each(function(){
 				bh += $(this).height();
			});
			bh = Math.max(bh, body.height());			
			if (bh + body.offset().top + _stickyFooterHeight < $(window).height()) {
				// Add sticky footer
				footer.addClass("pagePanelStickyFooter");
			}	else {
				// Remove sticky footer
				footer.removeClass("pagePanelStickyFooter");
			}
		}, 200);
	}
}

$(document).ready( function() {	
	$("button").click(checkPagePanelFooter);	
	$("input").change(checkPagePanelFooter);
	$("select").change(checkPagePanelFooter);
	$("textarea").change(checkPagePanelFooter);	
	$(window).resize(function() {
		checkPagePanelFooter();
		positionLoadingCovers();
	});
	checkPagePanelFooter();
});
					]]>
	    		</contents>
	    	</resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return html
return "<div id='" + this.id + "' class='pagepanel" + getStyleClasses(this) + "'><center><h1>Page</h1></center></div>";
	        ]]>
	    </getHtmlFunction>
	    
	    <rebuildJavaScript>
	        <![CDATA[

// inject the page html
if (this.pageId) {

	// closure for control
	var control = this;

	// request the page
	$.ajax({
    	url: "~?a=" + _version.id + "&v=" + _version.version + "&p=" + this.pageId + "&action=dialogue",
    	type: "GET",
        data: null,
        error: function(server, status, error) {
        	control.object.html("Error loading page : " + error);
        },
        success: function(page) {
        	
        	// if the page can't be found a blank response is sent, so only show if we got something
        	if (page) {
        	
        		// get the iframe head
        		var head = $(_pageIframe[0].contentDocument).find("head");
        		// empty the body html
        		bodyHtml = "";
        		// assume the script is empty
       			script = "";
        		        		
            	// loop the items
            	var items = $(page);
            	for (var i in items) {
            		// check for a script node
            		switch (items[i].nodeName) {
            		case "#text" : case "TITLE" : case "META" : // ignore these types
            		break;
            		case "SCRIPT" :
           			// check whether a script block or link
           			if (items[i].innerHTML) {
           				var s = items[i].outerHTML;
           				// exclude the app id, version, page, mobile resume link
           				if (s.indexOf("var _appId =") == -1 && s.indexOf("var _appVersion =") == -1 && s.indexOf("var _pageId =") == -1 && s.indexOf("var _mobileResume =") == -1)
           					script += s;
           			} else {
           				// fetch the text
           				var text = items[i].outerHTML;
           				// look for a src
           				if (text.indexOf("src=\"") > 0) {
           					var startPos = text.indexOf("src=\"")+5;
           					var src = text.substr(startPos,text.indexOf("\"", startPos) - startPos);
           					// add if not in the head already
           					if (!head.find("script[src='" + src + "']")[0]) head.append(text);
           				}
           			}
	           		break;
	           		case "LINK" :
	           			// fetch the text
	           			var text = items[i].outerHTML;
	           			// look for an href="
	           			if (!items[i].innerHTML && text.indexOf("href=\"") > 0) {
	           				var startPos = text.indexOf("href=\"")+6;
	           				var href = text.substr(startPos,text.indexOf("\"", startPos) - startPos);
	           				// add this link to the page if not there already
	           				if (!head.find("link[href='" + href + "']")[0]) head.append(text);
	           			}
	           		break;
            		default :
            			if (items[i].outerHTML) {
            				// retain the script in our body html
            				bodyHtml += items[i].outerHTML;
            			}
            		break;
            		}
            	}
            	
            	// if this is a footer
            	if (control.footer) bodyHtml = "<div class='pagePanelFooter'>" + bodyHtml + "</div>";
            	
            	// set the html
    			control.object.html(bodyHtml);

        	} else {
        		
        		// set the html
    			control.object.html("Error loading page : no page provided");
        	
        	} //page object check

        }
       
	});
	
} else {
	this.object.html("#" + this.id).html("<center><h1>Page</h1></center>");
}
	         ]]>
	    </rebuildJavaScript>
	    
	    <saveJavaScript>
	        <![CDATA[
// assume the target page is not simple
var simple = false;
// loop all pages
for (var i in _pages) {
	if (_pages[i].id == this.pageId) {
		simple = _pages[i].simple;
		break;
	}
}
// empty the contents prior to saving, if reloading for non-simple pages
if (!simple) this.object.html("");
	        ]]>
	    </saveJavaScript>
	    
	    <getDetailsFunction>
	        <![CDATA[
// assume the target page is not simple
var simple = false;
// loop all pages
for (var i in _pages) {
	if (_pages[i].id == this.pageId) {
		simple = _pages[i].simple;
		break;
	}
}

// return the details
return {pageId: this.pageId, footer: this.footer, simple: simple};
	        ]]>
	    </getDetailsFunction>
	    
	    <styles>
	        <style>
	            <name>Page panel</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    	    
	    <initJavaScript>
	        <![CDATA[

// if this page is not static reload it
if (details.simple === undefined || !details.simple) {
	        
	var bodyHtml = "<center><h1>Page</h1></center>";
	
	// request the page
	$.ajax({
	   	url: "~?a=" + _appId + "&v=" + _appVersion + "&p=" + details.pageId + "&action=dialogue",  // reuse the design link hiding from dialogues
	   	type: "GET",
	       data: null,
	       error: function(server, status, error) {
	       	var bodyHtml = "Error loading page : " + error;
	       },
	       success: function(page) {
	       	
	       // if the page can't be found a blank response is sent, so only show if we got something
	       if (page) {
	       	
	       		// get the document head
	        	var head = $("head");
	       		// empty the body html
	       		bodyHtml = "";
	       		// assume the script is empty
	       		script = "";
	       		       		
	           	// loop the items
	           	var items = $(page);
	           	for (var i in items) {
	           		// check for a script node
	           		switch (items[i].nodeName) {
	           		case "#text" : case "TITLE" : case "META" : // ignore these types
	           		break;
	           		case "SCRIPT" :
	           			// check whether a script block or link
	           			if (items[i].innerHTML) {
	           				var s = items[i].outerHTML;
	           				// exclude the app id, version, page, mobile resume link
	           				if (s.indexOf("var _appId =") == -1 && s.indexOf("var _appVersion =") == -1 && s.indexOf("var _pageId =") == -1 && s.indexOf("var _mobileResume =") == -1)
	           					script += s;
	           			} else {
	           				// fetch the text
	           				var text = items[i].outerHTML;
	           				// look for a src
	           				if (text.indexOf("src=\"") > 0) {
	           					var startPos = text.indexOf("src=\"")+5;
	           					var src = text.substr(startPos,text.indexOf("\"", startPos) - startPos);
	           					// add if not in the head already
	           					if (!head.find("script[src='" + src + "']")[0]) head.append(text);
	           				}
	           			}
	           		break;
	           		case "LINK" :
	           			// fetch the text
	           			var text = items[i].outerHTML;
	           			// look for an href="
	           			if (!items[i].innerHTML && text.indexOf("href=\"") > 0) {
	           				var startPos = text.indexOf("href=\"")+6;
	           				var href = text.substr(startPos,text.indexOf("\"", startPos) - startPos);
	           				// add this link to the page if not there already
	           				if (!head.find("link[href='" + href + "']")[0]) head.append(text);
	           			}
	           		break;
	           		default :
	           			if (items[i].outerHTML) {
	           				// retain the script in our body html
	           				bodyHtml += items[i].outerHTML;
	           			}
	           		break;
	           		}
	           	}
	           	// wrap in sticky footer if need be
	           	if (details.footer) bodyHtml = "<div class='pagePanelFooter'>" + bodyHtml + "</div>";
	           	// apply the injected html
	           	$("#" + id).html(bodyHtml);
	           	// add script into the page (if applicable)
	           	if (script) $("#" + id).append(script);
	           	// fire the window resize event
	           	$(window).resize();
	    	}
	    }
	});
}

window.addEventListener("storage", function(storageEvent) {
	if (storageEvent.key === "rapidWindowBroadcast") {
		var broadcast = JSON.parse(storageEvent.newValue);
		switch (broadcast.message) {
		case "pageSaved":
			if (broadcast.a === _appId && broadcast.v === _appVersion && broadcast.p === details.pageId) {
				location.reload();
			}
			break;
		case "applicationReloaded":
			if (broadcast.a === _appId && broadcast.v === _appVersion) {
				location.reload();
			}
			break;
		case "applicationsReloaded":
			if (broadcast.a !== "rapid") {
				location.reload();
			}
			break;
		}
	}
});

	        ]]>
	    </initJavaScript>
	    
	</control>
</controls>