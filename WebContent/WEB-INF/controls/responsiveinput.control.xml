<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>responsiveinput</type>
	    <name>Responsive input box</name>
	    <image>images/input_box.svg</image>
	    <category>Responsive controls</category>
	    <helpHtml>A single-line text box that accepts text, numbers, etc. It resizes with screen-width and moves down if it gets too small.</helpHtml>
	    
	    <addToNewResponsiveApplications>true</addToNewResponsiveApplications>
	          
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>responsiveLabel</key>
	            <name>Label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>textLabel</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Label to appear above the control</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formTextSummary</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	        
	        <property>
	            <key>useLabelAsSummary</key>
	            <name>Manual form summary label</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Hidden property saying if the user has manually set the Form summary label.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>value</key>
	            <name>Value</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Pre-sets the contents of the input field.</helpHtml>
	        </property>
	        
	        <property>
	            <key>placeholder</key>
	            <name>Placeholder</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets a faded message so users can better understand what to type in the input box. Gets erased when typing begins.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxLength</key>
	            <name>Character limit</name>
	            <setConstructValueFunction>return 100;</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the character limit of the input box.</helpHtml>
	        </property>
	        
	        <property>
	            <key>controlType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "N";</setConstructValueFunction>
	            <changeValueJavaScript>inputControlType</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["N","Normal"],["L","Large"],["Num","Number"],["Tel","Telephone number"],["Eml","Email"],["P","Password"],["R","Readonly"]];
					]]>
	            </getValuesFunction>
	            <!-- refresh properties is done by propeties_inputControlType -->
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the type of input box. Large enables the size to be freely altered, number restricts entry to only numbers, password changes the text to blobs and readonly sets the input field to disabled. Telephone and email will apply additional validation rules on the input. </helpHtml>
	        </property>
	        
	        <property>
	            <key>autoHeight</key>
	            <name>Auto height</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>inputAutoHeight</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Whether the control's height should automatically adjust to display all of its contents.</helpHtml>
	        </property>
	        
	        <property>
	            <key>autocomplete</key>
	            <name>Autocomplete</name>
	            <visible>true</visible>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return ["", "on", "off", "name", "bday", "sex", "language", "email", "tel", "url", "street-address", "country", "postal-code", "organization", "username", "new-password", "current-password"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The autocomplete suggestion the browser will offer.</helpHtml>
	        </property>
	        
	        <property>
	            <key>extraSmall</key>
	            <name>Extra small width</name>
	            <setConstructValueFunction>return "xs-12"</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"xs-1", text:"1/12"}, {value:"xs-2", text:"2/12"}, {value:"xs-3", text:"3/12"}, {value:"xs-4", text:"4/12"}, {value:"xs-5", text:"5/12"}, {value:"xs-6", text:"6/12"}, {value:"xs-7", text:"7/12"}, {value:"xs-8", text:"8/12"}, {value:"xs-9", text:"9/12"}, {value:"xs-10", text:"10/12"}, {value:"xs-11", text:"11/12"}, {value:"xs-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is very small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>small</key>
	            <name>Small width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"sm-1", text:"1/12"}, {value:"sm-2", text:"2/12"}, {value:"sm-3", text:"3/12"}, {value:"sm-4", text:"4/12"}, {value:"sm-5", text:"5/12"}, {value:"sm-6", text:"6/12"}, {value:"sm-7", text:"7/12"}, {value:"sm-8", text:"8/12"}, {value:"sm-9", text:"9/12"}, {value:"sm-10", text:"10/12"}, {value:"sm-11", text:"11/12"}, {value:"sm-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>medium</key>
	            <name>Medium width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"md-1", text:"1/12"}, {value:"md-2", text:"2/12"}, {value:"md-3", text:"3/12"}, {value:"md-4", text:"4/12"}, {value:"md-5", text:"5/12"}, {value:"md-6", text:"6/12"}, {value:"md-7", text:"7/12"}, {value:"md-8", text:"8/12"}, {value:"md-9", text:"9/12"}, {value:"md-10", text:"10/12"}, {value:"md-11", text:"11/12"}, {value:"md-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is of a medium size. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>large</key>
	            <name>Large width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"lg-1", text:"1/12"}, {value:"lg-2", text:"2/12"}, {value:"lg-3", text:"3/12"}, {value:"lg-4", text:"4/12"}, {value:"lg-5", text:"5/12"}, {value:"lg-6", text:"6/12"}, {value:"lg-7", text:"7/12"}, {value:"lg-8", text:"8/12"}, {value:"lg-9", text:"9/12"}, {value:"lg-10", text:"10/12"}, {value:"lg-11", text:"11/12"}, {value:"lg-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is large. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	               
	    </properties>
	    
	    <resources>
	        
	         <resource>
				<type>cssLink</type>
				<contents>styles/bootstrap.css</contents>
			</resource>
			
			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/bootstrap.min.js</contents>
			</resource>
			
	    </resources>

	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object
var html = "";
var value = "";
var classes = getStyleClasses(this);

// add appropriate col width classes if they are specified
if (this.extraSmall) classes += " col-" + this.extraSmall;
if (this.small) classes += " col-" + this.small;
if (this.medium) classes += " col-" + this.medium;
if (this.large) classes += " col-" + this.large;

// assume no input id required
var inputId = "";
// if we have a label set the id
if (this.responsiveLabel) inputId = " id='" + this.id + "input'";

var autocompleteHtml = this.autocomplete ? " autocomplete='" + this.autocomplete + "'" : "";

// only check the decimal length of the integer part of a number (e.g. "123.45" -> 3)
var length = parseInt(this.maxLength || "0");
var numMax = Array(length).fill("9").join("");
var numMin = "-" + Array(length - 1).fill("9").join("");

if (this.value) value = this.value
switch (this.controlType) {
	case "N" : html = "<input" + inputId + " name='" + this.id + "' value='" + escapeApos(value) + "' type='text'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='form-control'></input>"; break;
	case "L" : html = "<textarea" + inputId + " name='" + this.id + "' class='form-control " + (this.autoHeight ? " autoheight" : "")  + "' " + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + (this.placeholder ? " placeholder='" + escapeApos(this.placeholder) + "'" : "") + autocompleteHtml + ">" + value + "</textarea>"; break;
	case "Num" : html = "<input" + inputId + " name='" + this.id + "' value='" + escapeApos(value) + "' type='number'" + (this.maxLength ? " max='" + numMax + "' min='" + numMin + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='form-control'></input>"; break;
	case "Tel" : html = "<input" + inputId + " name='" + this.id + "' value='" + escapeApos(value) + "' type='tel'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='form-control'></input>"; break;
	case "Eml" : html = "<input" + inputId + " name='" + this.id + "' value='" + escapeApos(value) + "' type='email'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='form-control'></input>"; break;
	case "P" : html = "<input" + inputId + " name='" + this.id + "' value='" + escapeApos(value) + "' type='password'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='form-control'></input>"; break;
	case "R" : html = "<input" + inputId + " name='" + this.id + "' value='" + escapeApos(value) + "' type='text'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='form-control' readonly='readonly'></input>"; break;
}

if (this.responsiveLabel) {
	return "<div id='" + this.id + "' class='r-inputbox" + classes + "'><label for='" + this.id + "input'>" + this.responsiveLabel + "</label>" + html + "</div>";
} else {
	return "<div id='" + this.id + "' class='r-inputbox" + classes + "'>" + html + "</div>";
}
	        ]]>
	    </getHtmlFunction>
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).find("input,textarea").val();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var value = "";
if (data != null && data !== undefined) {
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {
		if (field && data.fields && data.fields.length > 0) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			if (data.rows[0][0] != null && data.rows[0][0] !== undefined) {
				value = data.rows[0][0];
			}
		}
	}
}
// get control container
var container = $("#" + id);
// get control input
var control = container.find("input,textarea");
// set the value
control.val(value);
// fire any autoheight
if (control.is(".autoheight")) textarea_autoheight_size(control, true);
// fire any change events
if (changeEvents) container.trigger("change");
			]]>
	    </setDataJavaScript>
	    
	    <events>
	         <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>keydown</type>
	            <name>Key down</name>
	        </event>	        
	        <event>
	            <type>keyup</type>
	            <name>Key up</name>
	        </event>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	        <event>
	            <type>blur</type>
	            <extra>.find("input,textarea")</extra>
	            <name>Blur</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Responsive container</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>	        
	        <style>
	            <name>Input box control</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input, #" + this.id + " textarea";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input:hover, #" + this.id + " textarea:hover";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input:focus, #" + this.id + " textarea:focus";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <initJavaScript>
			<![CDATA[
var control = $("#" + id).find("input[type='number']")[0];
if (control && control.max) {
	control.addEventListener("change", function(change) {
		if (control.value.length > control.max.length) {
			control.value = control.value.slice(0, control.max.length);
		}
	});
}
			 ]]>
	    </initJavaScript>
	    
	</control>
</controls>