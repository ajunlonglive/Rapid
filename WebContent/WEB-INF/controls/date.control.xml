<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2018 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>date</type>
	    <name>Date</name>
	    <image>images/date.svg</image>
	    <category>Form controls</category>
	    <helpHtml>Lets the user type or select a date from a calendar.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewResponsiveApplications>false</addToNewResponsiveApplications>
	   	          
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>value</key>
	            <name>Value</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets an initial value for the date. The value may be in the current date format (e.g., "26/01/2009"), a number of days from today (e.g., 0, or +7) or a set of values and periods ("y" for years, "m" for months, "w" for weeks, "d" for days, e.g., "+1m +7d").</helpHtml>
	        </property>
	        
	        <property>
	            <key>format</key>
	            <name>Date format</name>
	            <setConstructValueFunction>
switch (_localDateFormat) {
	case "MM/dd/yyyy": return "mm/dd/yy";
	case "yyyy-MM-dd": return "yy-mm-dd";
	case "dd-MMM-yyyy": return "dd-M-yy";
	default: return "dd/mm/yy";
}
	            </setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["dd/mm/yy","dd/mm/yyyy"],["mm/dd/yy","mm/dd/yyyy"],["yy-mm-dd","yyyy-mm-dd"],["dd-M-yy","dd-MMM-yyyy"],["d MM yy","Short day, full month"],["DD, d MM, yy","Full date details"]];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the date format. Useful for different parts of the world.</helpHtml>
	        </property>
	        
	        <property>
	            <key>readonly</key>
	            <name>Mouse-only</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Whether users are able to enter dates using the keyboard. If not checked additional validation will be required.</helpHtml>
	        </property>
	        
	        <property>
	            <key>minDate</key>
	            <name>Min date</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Sets the minimum date. Dates will be unable to be selected earlier than this date. Valid periods are "y" for years, "m" for months, "w" for weeks, and "d" for days. For example, "+1m +7d" represents one month and seven days from today.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxDate</key>
	            <name>Max date</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Sets the maximum date. Dates will be unable to be selected past this date. Valid periods are "y" for years, "m" for months, "w" for weeks, and "d" for days. For example, "+1m +7d" represents one month and seven days from today.</helpHtml>
	        </property>
	        
	        <property>
	            <key>yearRange</key>
	            <name>Year range</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Sets the range of years that can be selected. For example, "2010:2016" will set the range from the first date in 2010 to the last date in 2016.</helpHtml>
	        </property>
	        
	        <property>
	        	<key>showOtherMonths</key>
	        	<name>Show other months</name>
	        	<setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Displays dates from the next and previous months.</helpHtml>
	        </property>
	        
	        <property>
	        	<key>selectOtherMonths</key>
	        	<name>Select other months</name>
	        	<setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>dateSelectOtherMonths</changeValueJavaScript>
	            <helpHtml>Allows you to select dates from the next and previous months.</helpHtml>
	        </property>
	        
	        <property>
				<key>advancedProperties</key>
				<name>Advanced properties</name>
				<setConstructValueFunction>return false;</setConstructValueFunction>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Whether to show advanced properties to actions.</helpHtml>
			</property>
	               
	    </properties>
	    
		<resources>
	    
	    	<resource>
	    		<type>cssFile</type>
	    		<contents>styles/controls/jquery-ui.css</contents>
	    	</resource>
	    		    		    	
	    	<resource>
	    		<type>javascriptFile</type>
	    		<contents>scripts_min/jquery-ui-1.12.1.min.js</contents>
	    	</resource>
	    	
	    	<resource>
	    	    <type>file</type>
	    	    <contents>images/controls/date/date_17x15.gif</contents>
	    	</resource>
	    	
	    	<resource>
	    		<type>file</type>
	    		<contents>styles/controls/images/icons_16.png</contents>
	    	</resource>
	    	
	    	<resource>
	    	    <type>css</type>
	    	    <contents>
input.date {
	background: url("../../../images/controls/date/date_17x15.gif") 100% 50% no-repeat;
	background-color: #FFF;
}	    	        
	    	    </contents>
	    	</resource>
	    	
	    	<resource>
	    	    <type>javascript</type>
	    	    <contents>
var date_quickISORegex = /^\d{4}-\d{2}-\d{2}/;
var date_quickOracleRegex = /^\d{1,2}-[a-zA-Z]{3}-\d{4}/;     
	    	    </contents>	    	    
	    	</resource>
	    	
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
var placeholder = "Choose a date";
switch (this.format) {
	case "dd/mm/yy":
		placeholder = "dd/mm/yyyy";
		break;
	case "mm/dd/yy":
		placeholder = "mm/dd/yyyy";
		break;
	case "yy-mm-dd":
		placeholder = "yyyy-mm-dd";
		break;
	case "dd-M-yy":
		placeholder = "dd-mmm-yyyy";
		break;		
}
if (this.readonly === undefined) this.readonly = true;
// setting of value is in init methods
return "<input id='" + this.id + "' name='" + this.id + "' " + " class='date" + getStyleClasses(this) + "' placeholder='" + placeholder + "'" + (this.readonly ? "readonly='readonly'" : "") + "/>";
	        ]]>
	    </getHtmlFunction> 
	    	    
		<rebuildJavaScript>
	        <![CDATA[
// get object reference
var o = this.object;
// if readonly
if (this.readonly) {
	// add attribute
	o.attr("readonly","readonly");
} else {
	// remove attribute
	o.removeAttr("readonly");
}
// assume no placeholder
var placeholder = "";
// get format
switch (this.format) {
	case "dd/mm/yy":
		placeholder = "dd/mm/yyyy";
		break;
	case "mm/dd/yy":
		placeholder = "mm/dd/yyyy";
		break;
	case "yy-mm-dd":
		placeholder = "yyyy-mm-dd";
		break;
	case "dd-M-yy":
		placeholder = "dd-mmm-yyyy";
		break;		
}
// set placeholder
o.attr("placeholder",placeholder);
// set format
o.datepicker({
    dateFormat: this.format
}).datepicker(  "setDate", this.value );
	        ]]>		    
		</rebuildJavaScript>
		
		<saveJavaScript>
	        <![CDATA[
// this class needs removing so jQueryUI knows to rebuild properly	        
this.object.removeClass("hasDatepicker");	        
	        ]]>		    
		</saveJavaScript>
		 
	    <getDetailsFunction>
	        <![CDATA[
return {
	format: this.format,
	readonly: this.readonly,
	minDate: this.minDate,
	maxDate: this.maxDate,
	yearRange: (this.yearRange ? this.yearRange: "-100:+10"),
	showOtherMonths: this.showOtherMonths,
	selectOtherMonths: this.showOtherMonths && this.selectOtherMonths,
	value: this.value
};
	        ]]>
	    </getDetailsFunction>
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).val();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var control = $("#" + id);
var value = "";
if (data != null && data !== undefined) {
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {
		if (field && data.fields && data.fields.length > 0) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			if (data.rows[0][0] != null && data.rows[0][0] !== undefined) {
				value = data.rows[0][0];
			}
		}
	}
}

// record on the details whether we want change events triggered - this is because we are about to update and the month/year change handler will read this
details.dontTriggerChange = !changeEvents;

// look for simple, unambiguous date formats
try {
	// retain current value
	var d = value;
	// if this looks like an ISO date format
	if (date_quickISORegex.test(value)) {
		// parse date from ISO format
		d = $.datepicker.parseDate("yy-mm-dd", value.substr(0, 10));
	// if this looks like an Oracle date format
	} else if (date_quickOracleRegex.test(value)) {
		// parse date from Oracle format
		d = $.datepicker.parseDate("dd-M-yy", value.substr(0, 11));
	}
	// set the date into the control
	control.datepicker("setDate", d);
} catch (ex) {
	control.datepicker("setDate",value);
}

// set this back again so default behaviour resumes
details.dontTriggerChange = false;
// trigger any changes
if (changeEvents) control.trigger("change");
			]]>
	    </setDataJavaScript>
	    
	    <events>
	         <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>keyup</type>
	            <name>Key up</name>
	        </event>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	        <event>
	            <type>blur</type>
	            <name>Blur</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Date</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + ":hover";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + ":focus";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
		<initJavaScript>
	        <![CDATA[
var format = details.format;
if (!format) format = "dd/mm/yy";
$( "#" + id ).datepicker({
	changeMonth: true,
    changeYear: true,
    dateFormat: format,
    maxDate: details.maxDate,
    minDate: details.minDate,
    yearRange: details.yearRange,
    showOtherMonths: details.showOtherMonths,
    selectOtherMonths: details.selectOtherMonths,
    constrainInput: true,
    onChangeMonthYear: function(year, month, inst) {
    	// this changes the default behaviour of the month and year change drop down and arrows to select the previously selected day in the new month or year
    	try {
    		// if we have an instance of the date picker and it has a value we can work on
    		if (inst  && inst.currentDay && inst.input.val()) {
    			// get the currently selected day - this can change as soon as we call getDate below
    			var dy = inst.selectedDay;
    			// get an jQuery wrapped instance of the date picker control
    			var dp = $(this);
    			// get the current date - the day can be from the initial or previous value, different from the currently selected
	    		var d = dp.datepicker("getDate");
	    		// if we got a date
	    		if (d) {
	    			// if we had a selected day use that
	    			if (dy) d.setDate(dy);
	    			// set the month to the new one
		      		d.setMonth(month-1);
		      		// set the year to the new one
		      		d.setFullYear(year);
		      		// set the new date
		      		dp.datepicker("setDate", d);
		      		// trigger a change in the control unless these have been temporarily turned off in the setData method 
		      		if (!details.dontTriggerChange) inst.input.trigger("change");
				}
			}
		} catch(ex){}
    }
}).change( function (ev) {
	var datePicker = $(this);
	var date = datePicker.val();
	if (date) {
		var parts = date.split("/");
		if (parts.length == 3) {
			if (parts[2].length < 4) {
				try {
					var year = parseInt(parts[2]);
					var now = new Date();
					var y = now.getFullYear() + "";
					var y1 = y.substr(0,2) * 1;
					var y2 = y.substr(2) * 1;
					if (year > y2 + 10) y1--;
					if (parts[2].length == 1) date = parts[0] + "/" + parts[1] + "/" + y1 + "0" + parts[2];
					if (parts[2].length == 2) date = parts[0] + "/" + parts[1] + "/" + y1 + parts[2];
					if (parts[2].length == 3) date = parts[0] + "/" + parts[1] + "/" + (y1 + "").substr(0,1) + parts[2];
					datePicker.val(date);
				} catch (ex) {}
			}
		}
		if (details.format == "dd-M-yy") datePicker.val(date.toUpperCase());
	}
}).mouseup( function (ev){	
	if ((details.readonly || details.readonly === undefined)) {
		var datePicker = $(this);
		var widget = datePicker.datepicker("widget");
		if (widget.is(":visible") && widget.css("opacity") == 1) {
			datePicker.datepicker("hide");
		} else {
			datePicker.datepicker("show");
		}	
	}		
});
// now set any value
$( "#" + id ).datepicker("setDate", details.value);
	        ]]>
	    </initJavaScript>
	    
	    <runtimeProperties>
	    	<runtimeProperty>
	    		<type>age</type>
	    		<name>Age</name>
	    		<advanced>true</advanced>
	    		<getPropertyFunction>
	    			        <![CDATA[
// get the value
var val = $("#" + id).val();
// if there was a value and it is a valid date
if (val) {
	// assume not passing validation
	var d = null;
	// parse the date to check it's valid, with a silent fail
	try { d = $.datepicker.parseDate(details.format, val); } catch(ex) {}
	// if we got a valid date
	if (d) {
		// get the age
		var age = (Date.now() - d) / 31557600000;
		// return the age
		return age;
	} else {
		// return not a number
		return NaN;
	}
} else {
	return null;
}

	    			        ]]>
	    		</getPropertyFunction>
	    	</runtimeProperty>
	    </runtimeProperties>
	    	    
	</control>
</controls>