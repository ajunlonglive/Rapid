<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>link</type>
	    <name>Link</name>
	    <image>images/link.svg</image>
	    <helpHtml>Text that takes the user to another page or website when clicked.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>text</key>
	            <name>Text</name>
	            <setConstructValueFunction>return this.name;</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the text of the link.</helpHtml>
	        </property>
	           
	        <property>
	            <key>linkType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "P";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return [["P","Page"],["U","URL"],["T","Telephone"],["S","SMS"],["E","Email"],["R","Rapid"]];</getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the type of link. Page links to other pages on your Rapid app, URL links to any webpage. Rapid links to pages like main menu, logout, and back.</helpHtml>
	        </property>
	        	                
	        <property>
	            <key>page</key>
	            <name>Page</name>
	           	<changeValueJavaScript>linkPage</changeValueJavaScript>
	           	<getValuesFunction>
	           	    <![CDATA[
	           	    	return "<option value=\'\'>Please select...</option>" + getPageOptions(this.page, _page.id);
	           	    ]]>
	           	</getValuesFunction>
	           	<refreshHtml>true</refreshHtml>
	           	<refreshProperties>true</refreshProperties>
	           	<helpHtml>Dropdown for selecting the page in your Rapid app that will be linked to.</helpHtml>
	        </property>
	        
	        <property>
	            <key>url</key>
	            <name>URL</name>
	            <changeValueJavaScript>linkURL</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the page that will be followed when the user clicks on the link.</helpHtml>
	        </property>
	        
	        <property>
	            <key>sessionVariables</key>
	            <name>Page variables</name>
	            <changeValueJavaScript>navigationSessionVariables</changeValueJavaScript>
	        </property>
	        
	        <property>
	            <key>popup</key>
	            <name>New tab</name>
	            <changeValueJavaScript>navigateNewtab</changeValueJavaScript>
	            <helpHtml>Sets the link opening in a new tab or in the same tab.</helpHtml>
	        </property>
	        
	        <property>
	            <key>rapidPage</key>
	            <name>Page</name>
	            <setConstructValueFunction>return "I";</setConstructValueFunction>
	            <changeValueJavaScript>navigateRapid</changeValueJavaScript>
	            <getValuesFunction>
// return the types	            
return [["I","Main menu"],["L","Logout"],["P","Change password"],["B","Back"],["C","Close"]];
				</getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Main menu is the index page. Both the index page and logout page can be set by custom logins.</helpHtml>
	        </property>
	        
	    </properties>

	    <resources>
	    	<resource>
	    		<type>javascript</type>
	    		<contents>
	    			<![CDATA[
function linkClick(url, sessionVariablesString, popup) {
	
	var sessionVariables = JSON.parse(sessionVariablesString);
	
	for (var i in sessionVariables) {
	
		var value = null;
	
		var item = sessionVariables[i];
		
		var itemId = item.itemId;
		
		if (itemId) {
		
			if (item.type) {
		
				var idParts = itemId.split(".");
				
				var ev = $.Event("linkClick");
				
				if (idParts.length == 1) {
			
					value = window["getData_" + item.type](ev, itemId, item.field, item.details);
					
				} else if (idParts.length == 2) {
							
					value = window["getProperty_" + item.type + "_" + idParts[1]](ev, idParts[0], item.field, item.details);
									
				}
				
			} else if (itemId.indexOf("System") == 0) {
			
				var idParts = itemId.split(".");
			
				switch (idParts[1]) {
					case "app id" : value = _appId;
					break;
					case "app version" : value = _appVersion;
					break;
					case "page id" : value = _pageId;
					break;
					case "user name" : value = _userName;
					break;
					case "online" : value = (typeof _rapidmobile == 'undefined' ? true : _rapidmobile.isOnline() == true || _rapidmobile.isOnline() == 'true');
					break;
					case "mobile" : value = (typeof _rapidmobile == 'undefined' ? false : true);
					break;
					case "mobile version" : value = (typeof _rapidmobile == 'undefined' ? -1 : (_rapidmobile.getVersion ? _rapidmobile.getVersion() : 0));
					break;
					case "true" : value = "true";
					break;
					case "false" : value = "false";
					break;
					case "field" : value = item.field;
					break;
				}
				
			}
		
		} else {
		
			value = $.getUrlVar(item.itemId);
		
		}
	
		if (value != null && value !== undefined) url += "&" + item.name + "=" + value;
	}
	
	if (popup) {
		window.open(url, "_blank");
	} else {
		window.location = url;
	}
}	    			
	    			]]>
	    		</contents>
	    	</resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// retrive the text property	        
var text = this.text;

// if text isn't specified add a message
if (!text) text = "link text required";

var popup = "";
if (this.popup) popup = " target='_blank'";

// if the link is to a page	
if (this.linkType == "P") {
	
	// if a page was chosen
	if (this.page) {
		
		// if page variables have been saved					
		if (this.sessionVariables && this.sessionVariables.length > 0) {
			
			// start with an empty control
			var sessionVariables = [];
			
			// loop the variables
			for (var i in this.sessionVariables) {
				
				// retrieve one of them
				var item = this.sessionVariables[i];
				
				// create an object for the item
				var itemObject = {name:item.name, itemId:item.itemId, field:item.field};
				
				// assume the item id is just the control id
				var controlId = item.itemId;
				
				// split the id parts - this tells us if we have a run-time or system property
				var idParts = controlId.split(".");
				
				// if we had more than 1 part
				if (idParts.length > 1) {
					// overrwrite the item id with just the control id
					controlId = idParts[0];
				}
				
				// try and find a control for the item id
				var control = getControlById(controlId);
				
				// if we got a control add the field, type, and details			
				if (control) {
					itemObject.type = control.type;
					if (control.details) itemObject.details = control.details;					
				} 
				
				// add the item object to the collection
				sessionVariables.push(itemObject);
			}
			
			// stringify the collection
			sessionVariables = JSON.stringify(sessionVariables);
		
			// escape any quotes
			sessionVariables = sessionVariables.replace(/\"/g,'&quot;');
		
			// return the link
			return "<a id='" + this.id + "' href='#' class='link" + getStyleClasses(this) + "' onclick=\"linkClick('~?a=" + _version.id + "&v=" + _version.version + "&p=" + this.page + "','" + sessionVariables + "'," + this.popup + ");\">" + text + "</a>";
			
		} else {
		
			return "<a id='" + this.id + "' href='~?a=" + _version.id + "&v=" + _version.version + "&p=" + this.page + "'" +  popup + " class='link" + getStyleClasses(this) + "'>" + text + "</a>";
							
		}
								
	} else {
    	return "<a id='" + this.id + "' href='#' class='link" + getStyleClasses(this) + "'>link page required</a>";
    }
    
} else if (this.linkType == "R") {

	if (this.rapidPage == "B" || this.rapidPage == "C") {
	
		var js = 'window.history.back();';
		if (this.rapidPage == "C") js = 'window.close();';
	
		return "<a id='" + this.id + "' href='#' onclick='" + js + "' class='link" + getStyleClasses(this) + "'>" + text + "</a>";
		
	} else {
	
		var url = ".";
		if (this.rapidPage == "L") url = "logout.jsp";
		if (this.rapidPage == "P") url = "update.jsp";
		
		return "<a id='" + this.id + "' href='" + url + "' class='link" + getStyleClasses(this) + "'>" + text + "</a>";
	
	}

} else if (this.linkType == "T" || this.linkType == "S" || this.linkType == "E") {
	
	if (this.target) {
		var type = this.linkType == "T" ? "tel:" :
			this.linkType == "S" ? "sms:" :
			this.linkType == "E" ? "mailto:" :
			"";
		
		return "<a id='" + this.id + "' href='" + type + type + this.url + "'" + popup + " class='link" + getStyleClasses(this) + "'>" + text + "</a>";
	} else {
		return "<a id='" + this.id + "' href='#' class='link" + getStyleClasses(this) + "'>link target required</a>";
	}

} else {
	if (this.url) {
		return "<a id='" + this.id + "' href='" + this.url + "'" + popup + " class='link" + getStyleClasses(this) + "'>" + text + "</a>";
	} else {
    	return "<a id='" + this.id + "' href='#' class='link" + getStyleClasses(this) + "'>link url required</a>";
    }
    
}

	        ]]>
	    </getHtmlFunction>
	    
	    <saveJavaScript>
	    <![CDATA[
// this is required to get the details of controls that appear after this one as they would not have been present the first time	    
rebuildHtml(this);	    
	    ]]>
	    </saveJavaScript>
	     
	    <getDetailsFunction>
	        <![CDATA[
return { dialogue: this.dialogue, linkType: this.linkType, target: this.target };
	        ]]>	        
	    </getDetailsFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var control = $("#" + id);
var value = "";
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields && data.fields.length > 0) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			if (data.rows[0][0] != null && data.rows[0][0] !== undefined) {
				value = data.rows[0][0];
			} 			
		}
	} 
}

var type = details.linkType == "T" ? "tel:" :
	details.linkType == "S" ? "sms:" :
	details.linkType == "E" ? "mailto:" :
	"";

control.attr("href",type + value);
if (changeEvents) control.trigger("change");
			]]>
	    </setDataJavaScript>
	    
	    <styles>
	        <style>
	            <name>Link</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>	        
	        <style>
	            <name>:link</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ":link";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:visited</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ":visited";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ":hover";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <runtimeProperties>
	        <runtimeProperty>
	            <type>text</type>
	            <name>Text</name>
	            <setPropertyJavaScript>
	                <![CDATA[
var control = $("#" + id);
var value = "";
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields && data.fields.length > 0) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			if (data.rows[0][0] != null && data.rows[0][0] !== undefined) {
				value = data.rows[0][0];
			} 			
		}
	} 
} 
control.html(value);
if (changeEvents) control.trigger("change");
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	    </runtimeProperties>
	    
	</control>
</controls>