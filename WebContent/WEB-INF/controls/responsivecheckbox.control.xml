<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>responsivecheckbox</type>
	    <name>Responsive checkbox</name>
	    <image>images/checkbox.svg</image>
	    <category>Responsive controls</category>
	    <helpHtml>A labelled control that toggles the presence of a tick when clicked. It resizes with screen-width and moves down if it gets too small.</helpHtml>
	    
	    <addToNewResponsiveApplications>true</addToNewResponsiveApplications>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	         <property>
	            <key>text</key>
	            <name>Label</name>
	            <changeValueJavaScript>textLabel</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets a text like description for the checkbox.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formTextSummary</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	        
	        <property>
	            <key>useLabelAsSummary</key>
	            <name>Manual form summary label</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Hidden property saying if the user has manually set the Form summary label.</helpHtml>
	        </property>
	               
	        <property>
	            <key>checked</key>
	            <name>Checked</name>
	            <setConstructValueFunction>return "false";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return ["false","true"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the state of the checkbox to be true or false.</helpHtml>
	        </property>
	        
	        <property>
	            <key>value</key>
	            <name>Value</name>
	            <setConstructValueFunction>return "true";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The value of this control when checked. If this box is blank the value when checked will be true.</helpHtml>
	        </property>
	        
	        <property>
	            <key>valueUnchecked</key>
	            <name>Unchecked value</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>textNotForm</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The value of this control when not checked. If this box is blank the value when checked will be null.</helpHtml>
	        </property>
	        
	         <property>
	            <key>extraSmall</key>
	            <name>Extra small width</name>
	            <setConstructValueFunction>return "xs-12"</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"xs-1", text:"1/12"}, {value:"xs-2", text:"2/12"}, {value:"xs-3", text:"3/12"}, {value:"xs-4", text:"4/12"}, {value:"xs-5", text:"5/12"}, {value:"xs-6", text:"6/12"}, {value:"xs-7", text:"7/12"}, {value:"xs-8", text:"8/12"}, {value:"xs-9", text:"9/12"}, {value:"xs-10", text:"10/12"}, {value:"xs-11", text:"11/12"}, {value:"xs-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is very small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>small</key>
	            <name>Small width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"sm-1", text:"1/12"}, {value:"sm-2", text:"2/12"}, {value:"sm-3", text:"3/12"}, {value:"sm-4", text:"4/12"}, {value:"sm-5", text:"5/12"}, {value:"sm-6", text:"6/12"}, {value:"sm-7", text:"7/12"}, {value:"sm-8", text:"8/12"}, {value:"sm-9", text:"9/12"}, {value:"sm-10", text:"10/12"}, {value:"sm-11", text:"11/12"}, {value:"sm-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>medium</key>
	            <name>Medium width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"md-1", text:"1/12"}, {value:"md-2", text:"2/12"}, {value:"md-3", text:"3/12"}, {value:"md-4", text:"4/12"}, {value:"md-5", text:"5/12"}, {value:"md-6", text:"6/12"}, {value:"md-7", text:"7/12"}, {value:"md-8", text:"8/12"}, {value:"md-9", text:"9/12"}, {value:"md-10", text:"10/12"}, {value:"md-11", text:"11/12"}, {value:"md-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is of a medium size. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>large</key>
	            <name>Large width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"lg-1", text:"1/12"}, {value:"lg-2", text:"2/12"}, {value:"lg-3", text:"3/12"}, {value:"lg-4", text:"4/12"}, {value:"lg-5", text:"5/12"}, {value:"lg-6", text:"6/12"}, {value:"lg-7", text:"7/12"}, {value:"lg-8", text:"8/12"}, {value:"lg-9", text:"9/12"}, {value:"lg-10", text:"10/12"}, {value:"lg-11", text:"11/12"}, {value:"lg-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is large. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	              
	    </properties>
	    
	    <resources>
			<resource>
				<type>cssLink</type>
				<contents>styles/bootstrap.css</contents>
			</resource>

			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/bootstrap.min.js</contents>
			</resource>
		</resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
var checked = "";
if (this.checked == "true" || this.checked == true) checked=" checked='checked'";

var classes = getStyleClasses(this);

// add appropriate col width classes if they are specified
if (this.extraSmall) classes += " col-" + this.extraSmall;
if (this.small) classes += " col-" + this.small;
if (this.medium) classes += " col-" + this.medium;
if (this.large) classes += " col-" + this.large;

var value = "true";
if (this.value) value = this.value;
var valueUnchecked = "";
if (this.valueUnchecked) valueUnchecked = this.valueUnchecked;

var html = ""
html += "<div id='" + this.id + "' class='r-checkbox" + classes + "'>";
html += "<div class='check-input form-group" + "'>";
html+= "<label id='" + this.id + "label' for='" + this.id + "checkbox'>";
html += "<input name='" + this.id + "' type='hidden' value=''></input>"; // the stand-in if unticked
html += "<input id='" + this.id + "checkbox' name='" + this.id + "' type='checkbox' " + checked + " value='" + value + "' data-valueUnchecked='" + valueUnchecked + "'></input><span></span>";
html += "<span>" + (this.text ? this.text : "") + "</span>";
html += "</label></div></div>";
return html;
	        ]]>
	    </getHtmlFunction>
	    
	    <removeJavaScript>
	        <![CDATA[
// remove the hidden input
this.object.closest("body").find("input[type=hidden][name='" + this.id + "']").remove();
// remove the control
this.object.remove();
	        ]]>
	    </removeJavaScript>
	    
	    <getDataFunction>
	        <![CDATA[
var control = $("#" + id);
var input = control.find("input:not([type=hidden])");
var value = null;
if (ev.validation) {
	var container = control.closest(".validated");
	if (!container[0]) container = control.parent();
	container.find("input[type=checkbox]:visible:not([type=hidden])").each( function() {
		if ($(this).prop("checked")) {
			value = "true";
		}
	});
} else {
	
	if (input.prop("checked")) {
		value = "true";
		var attr = input.attr("value");
		if (attr) value = attr;
	} else {
		value = null;
		var attr = input.attr("data-valueUnchecked");
		if (attr) value = attr;
	}
}
return value;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var value = false;
if (data != null && data !== undefined) {
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {
		if (field && data.fields) {
			for (var i in data.fields) {
				if (data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			value = data.rows[0][0];
		}
	}
}
var control = $("#" + id);
if (!control.is("input")) control = control.find("#" + id + "checkbox");
var attr = control.attr("value");
var checked = false;
if (attr) {
	if (value == attr || (value == true && attr == "true")) checked = true;
} else {
	if (value && !value == "false") checked = true;
}
control.prop('checked', checked);
if (changeEvents) control.trigger("change");
			]]>
	    </setDataJavaScript>
	    	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    
	    <styles>
			<style>
	            <name>Responsive container</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Checkbox control</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " .check-input";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " .check-input:hover";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " .check-input:focus";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>	        
	    </styles>
	    
	</control>
</controls>