<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->
 
	<control>
	    
	    <type>slidePanel</type>
	    <name>Slide panel</name>
	    <image>images/slide_panel.svg</image>
	    <helpHtml>A button that displays a customisable panel when clicked.</helpHtml>
	    
	    <dependentTypes>
	        <dependentType>slidePanelPane</dependentType>
	    </dependentTypes>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>
	    
		<noDefaultName>true</noDefaultName>
			    	    	    	    
	    <canUserAdd>true</canUserAdd>
  
	    <properties>
	        
	        <property>
	            <key>visible</key>
	            <name>Open</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>slidePanelVisibility</changeValueJavaScript>
	            <helpHtml>Whether or not the slide panel is open with its contents visible.</helpHtml>
	        </property>
	        
	        <property>
	            <key>colour</key>
	            <name>Icon colour</name>
	            <setConstructValueFunction>return "grey";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return ["grey","white","black", "green"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The colour of the icon that will show or hide the pane.</helpHtml>
	        </property>
	        
	        <property>
	            <key>slidePanelId</key>
	            <name>slidePanelId</name>
	            <visible>false</visible>
	        </property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>cssFile</type>
	            <contents>styles/fonts/fontawesome/css/font-awesome.css</contents>
	        </resource>
	         <resource>
	            <type>cssFile</type>
	            <contents>styles/fonts/rapid/font-rapid.css</contents>
	        </resource>
	        <!-- Some browsers choose the tff instead of the woff so both are included -->
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.woff</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.woff2</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.ttf</contents>
	        </resource>
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
/* This is the opener */
.slidePanel {
	position: absolute;
	padding: 5px;
	top: 0;
	left: 0;
	z-index: 101;
	font-size: 55px;
	padding: 0 0.35em;	
}

/* Images have been phased out for the font-awesome glyph */
.slidePanel img {
	width: 100%;
	height: 100%;
	cursor: pointer;
}

.slidePanel span {
	cursor: pointer;
}

.slidePanelPane {
	position: absolute;
	float: left;
	width: 200px;
	height: 100%;
	background-color: white;
	border-right: 1px solid black;
	z-index: 100;
}

.slidePanelCover {
	position: fixed;
	top: 0;
	left: 0;
	background-color: #ccc;
	opacity: 0.75;
	z-index: 99;
}

.slidePanelOpener-black {
	color: black;
}

.slidePanelOpener-grey {
	color: #B1B1B1;
}

.slidePanelOpener-white {
	color: white;
}

.slidePanelOpener-green {
	color: #95C459;
}
	                ]]>
				</contents>
	        </resource>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
	                
function sizeSlidePanelCover() {
	
	if (typeof(window.parent._pageIframe) === "undefined") {
	
		// get a reference to the document for the full height
		var doc = $(document);
		// get a reference to the slidePanelPane if it's there yet
		var panel = $(".slidePanelPane");
		// if we got a panel resize it
		if (panel[0]) panel.css("height",doc.height() - panel.offset().top);
		
		// get a reference to the window for the viewport size
		var win = $(window);			
		// resize the page cover
		$("div.slidePanelCover").css({
       		width : win.width(),
       		height : win.height()
       	});
       	
    } else {
    
    	// get the page iframe
    	var _pageIframe = window.parent._pageIframe;
    	// get the scale
    	var _scale = window.parent._scale;
    		    		    
    	// resize the page cover
    	$(_pageIframe[0].contentDocument).find("div.slidePanelCover").css({
       		width : _pageIframe.width() / _scale,
       		height : _pageIframe.height() / _scale
       	});
    
    }
}	                
	                
//JQuery is ready! 
$(document).ready( function() {	
	$(window).resize(function(ex) {	
		sizeSlidePanelCover();       	      		
	});	
});		                
	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return html for adding to our parent object      
return "<div id='" + this.id + "' class='slidePanel'><span class='fas'>&#xf0c9;</span></div>";
	        ]]>
	    </getHtmlFunction>
	    	    
	    <constructJavaScript>
	        <![CDATA[	        
// add the panel next to the opener
this._parent.childControls.push(new Control("slidePanelPane", this._parent));
	        ]]>
	    </constructJavaScript>	
	    	    	    
	    <rebuildJavaScript>
	        <![CDATA[
// convert the string to a boolean
if (this.visible == "false") this.visible = false;	        
// get the pane id
var paneId = this.object.attr("data-pane");
// get the pane
var pane = this._parent.object.find("#" + paneId);	 
// get the pageCover
var pageCover = this._parent.object.find("div.slidePanelCover");    
// check the visibilty property   
if (this.visible) {
	pane.show();
	pageCover.show();
	this.object.addClass("slidePanelOpen");
	this.object.removeClass("slidePanelClosed");
} else {
	pane.hide();
	pageCover.hide();
	this.object.addClass("slidePanelClosed");
	this.object.removeClass("slidePanelOpen");
}

// color the burger
this.object.removeClass("slidePanelOpener-white");
this.object.removeClass("slidePanelOpener-black");
this.object.removeClass("slidePanelOpener-green");
this.object.removeClass("slidePanelOpener-grey");

switch (this.colour) {
	case "white": this.object.addClass("slidePanelOpener-white"); break;
	case "black": this.object.addClass("slidePanelOpener-black"); break;
	case "green": this.object.addClass("slidePanelOpener-green"); break;
	default: this.object.addClass("slidePanelOpener-grey");
}

	        ]]>
	    </rebuildJavaScript>	
	    	    	    
	   	<initDesignJavaScript>
	        <![CDATA[
// get a reference to the body
var body = _page.object;
// get the pageCover
var pageCover = body.find("div.slidePanelCover");
// if we don't have one
if (!pageCover[0]) {
	// add one
	body.append("<div class='slidePanelCover'></div>");
	// set the reference
	pageCover = body.find("div.slidePanelCover");	
}
        
// a mousedown for toggling and reapplying the classes		        
this.object.mousedown( {slidePanel : this}, function(ev) {
	// add an undo snapshot
	addUndo();
	// get the slidePanel
	var slidePanel = ev.data.slidePanel;
	// toggle visibility
	slidePanel.visible = !slidePanel.visible
	// rebuild the html
	rebuildHtml(slidePanel);	
});       

// initial application of classes
rebuildHtml(this);
	        ]]>	   	        
	    </initDesignJavaScript>
	    
		<pushedJavaScript>
	        <![CDATA[	        
// get the parent child controls
var childControls = this._parent.childControls;
// remove the last one as it's us
childControls.splice(childControls.length - 1, 1);
// insert us above the last one
childControls.splice(childControls.length - 1, 0, this);

// get a reference to the iFrame window
var w = _pageIframe[0].contentWindow;
// resize the panel cover
w.sizeSlidePanelCover();

	        ]]>	   	        
	    </pushedJavaScript>
	    	    
		<removeJavaScript>
	        <![CDATA[
var slidePaneId = this.object.attr("data-pane");
// loop the page child controls
for (var i in _page.childControls) {
	// get the potential slide pane
	var slidePane = _page.childControls[i];
	// break when we find our position amongst the page child controls
	if (slidePane.id == slidePaneId) {		
		// remove from page childControls
		_page.childControls.splice(i, 1);
		// remove object
		slidePane.object.remove();
		// we're done
		break;
	}
}
// get the body
var body =  this.object.closest("body");
// if we have no panes left remove the cover
if (body.find("div.slidePanelPane").length <= 1) body.find("div.slidePanelCover").remove();
// remove the closer
this.object.remove();

	        ]]>
	    </removeJavaScript>
	    	    	    
	    <styles>
	        <style>
	            <name>Opener</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>   
	        <style>
	            <name>Panel open</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return ".slidePanelOpen";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	        <style>
	            <name>Panel closed</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return ".slidePanelClosed";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	        <style>
	            <name>Page cover</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return ".slidePanelCover";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style> 
	    </styles>	
	    
	   	<initJavaScript>
	        <![CDATA[	        	        
// get a reference to the body
var body = $("body");
// get the pageCover
var pageCover = body.find("div.slidePanelCover");
// if we don't have one
if (!pageCover[0]) {
	// add one
	body.append("<div class='slidePanelCover'></div>");
	// set the reference
	pageCover = body.find("div.slidePanelCover");
	// get a reference to the document
	var doc = $(document);	
	// size the cover
	pageCover.css({
    	width : doc.width(),
       	height : doc.height()
    });
}

// get a reference to the slidePanel
var slidePanel = $("#" + id);
// get the slidePanelPaneId
var slidePanelPaneId = slidePanel.attr("data-pane");
// get the pane
var slidePanelPane = $("#" + slidePanelPaneId);

// show or hide the page cover if panel is visible
if (slidePanelPane.is(":visible")) {
	pageCover.show();
} else {
	pageCover.hide();
}

// add the opener listener	       
slidePanel.click({width: slidePanelPane.css("width"),left: slidePanelPane.css("margin-left")}, function(ev) {
	// get the stored width
	var width = ev.data.width
	// get any existing left margin
	var left = ev.data.left;
	// check visibility
	if (slidePanelPane.is(":visible")) {
		// animate off-screen
		// hide the page cover
		pageCover.fadeOut();
		slidePanelPane.animate({"margin-left": "-" + width}, 400, function() {
			// hide when complete
			slidePanelPane.hide();
			// toggle open closed
			slidePanel.removeClass("slidePanelOpen");
			slidePanel.addClass("slidePanelClosed");
		});		
	} else {
		// set off screen
		slidePanelPane.css({"margin-left": "-" + width}).show();
		// animate to full width
		slidePanelPane.animate({"margin-left": 0}, 400);		
		// toggle open closed
		slidePanel.removeClass("slidePanelClosed");
		slidePanel.addClass("slidePanelOpen");
		// show the page cover	
		pageCover.fadeIn();
	}
});	        

// add the cover listener
pageCover.click({width: slidePanelPane.css("width"),left: slidePanelPane.css("margin-left")}, function(ev){
	// get the stored width
	var width = ev.data.width
	// get any existing left margin
	var left = ev.data.left;
	// animate off-screen	
	// hide the page cover
	pageCover.hide();	
	slidePanelPane.animate({"margin-left": "-" + width}, 500, function() {
		// hide when complete
		slidePanelPane.hide();
		// toggle open closed
		slidePanel.removeClass("slidePanelOpen");
		slidePanel.addClass("slidePanelClosed");	
	});
});
	        ]]>	        	       	        
	    </initJavaScript>
	    	    	    	            	    	    	        	    	    
	</control>
	
	<control>
	    
	    <type>slidePanelPane</type>
	    <name>Slide panel</name>
	        
	    <noDefaultName>true</noDefaultName>

	    <canUserInsert>true</canUserInsert>

	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	       	<property>
	       		<key>panelId</key>
	       		<name>panelId</name>
	       		<visible>false</visible>
	       		<helpHtml>Sets whether the menu is visible or not.</helpHtml>
	       	</property>
	       	
	    </properties>
	    	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html 
return "<div id='" + this.id + "' class='slidePanelPane' style='display:none;'></div>";
	        ]]>
	    </getHtmlFunction> 
	    
	    <createJavaScript>
	    	<![CDATA[
// retain the slide panel Id once only
if (!this.slidePanelId) this.slidePanelId = this.object.prev().attr("id");	    	
	    	]]>
	    </createJavaScript> 
	    
	    <rebuildJavaScript>
	    	<![CDATA[
// add the opener id to this control's object
this.object.attr("data-panel",this.slidePanelId);
// add this control's id to the opener object	    
this._parent.object.find("#" + this.slidePanelId).attr("data-pane",this.id);	
	    	]]>
	    </rebuildJavaScript>
	    	    
		<initDesignJavaScript>
	        <![CDATA[	        
var slidePanelId = this.object.attr("data-panel");
// loop the page child controls
for (var i in _page.childControls) {
	// get the potential slide panel
	var slidePanel = _page.childControls[i];
	// break when we find our position amongst the page child controls
	if (slidePanel.id == slidePanelId) {		
		// rebuild it
		rebuildHtml(slidePanel);
		// we're done
		break;
	}
}   
	        ]]>	   	        
	    </initDesignJavaScript>
	    
	    <removeJavaScript>
	        <![CDATA[	          
var slidePanelId = this.object.attr("data-panel");
// loop the page child controls
for (var i in _page.childControls) {
	// get the potential slide panel
	var slidePanel = _page.childControls[i];
	// break when we find our position amongst the page child controls
	if (slidePanel.id == slidePanelId) {		
		// remove from page childControls
		_page.childControls.splice(i, 1);
		// remove object
		slidePanel.object.remove();
		// we're done
		break;
	}
} 	
// get the body
var body =  this.object.closest("body");
// if we have no panels left remove the cover
if (body.find("div.slidePanel").length <= 1) body.find("div.slidePanelCover").remove();
// remove the pane
this.object.remove();
	        ]]>
	    </removeJavaScript>	    
	     	    	   	    	    
	    <styles>
	        <style>
	            <name>Slide panel</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>	    	    	    	    
	    	        	    
	</control>
	
</controls>