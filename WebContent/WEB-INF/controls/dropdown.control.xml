<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2021 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>dropdown</type>
	    <name>Drop down</name>
	    <image>images/dropdown.svg</image>
	    <category>Form controls</category>
	    <helpHtml>Lets the user select from a list of options when clicked.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewResponsiveApplications>false</addToNewResponsiveApplications>
	        
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	         <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	        
	        <property>
	            <key>codes</key>
	            <name>Codes</name>
	            <visible>false</visible>
	        </property>
	                   
	        <property>
	            <key>options</key>
	            <name>Options</name>
	            <setConstructValueFunction>return [{value:"", text:"Value 1"}, {value:"", text:"Value 2"}, {value:"", text:"Value 3"}];</setConstructValueFunction>
	            <changeValueJavaScript>options</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	             <refreshProperties>true</refreshProperties>
	            <helpHtml>Defines the list of options in the dropdown. If codes are used they will be the value for that row. You can paste text and codes from spreadsheets.</helpHtml>
	        </property>
	        
	        <property>
	            <key>value</key>
	            <name>Initial value</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Selects one of the options from the dropdown as its initial value.</helpHtml>
	        </property>

			<property>
				<key>advancedProperties</key>
				<name>Advanced properties</name>
				<setConstructValueFunction>return false;</setConstructValueFunction>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Whether to show advanced properties to actions.</helpHtml>
			</property>
	         	        
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object	
var html = "";
// check we have options or a value list
if (this.options || this.valueList) {
	// if the options are a string turn them in an array
	if ($.type(this.options) == "string") this.options = JSON.parse(this.options);
	// assume we are using the options
	var options = this.options;
	// assume we are using this.codes
	var codes = this.codes;
	// if it's a value list use that instead
	if (this.valueList) {
		for (var i in _version.valueLists) {
			if (this.valueList == _version.valueLists[i].name) {
		  		options = _version.valueLists[i].values;
		  		codes = _version.valueLists[i].usesCodes;
		  		break;
			}
		}
	}
	// loop the options
	for (var i in options) {		
		if (codes) {
			html += "<option value='" + escapeApos(options[i].value) + "'" + (escapeApos(this.value) == escapeApos(options[i].value) ? " selected='selected'" : "") + ">" + options[i].text + "</option>";
		} else {
			html += "<option" + (escapeApos(this.value) == options[i].text ? " selected='selected'" : "") + ">" + options[i].text + "</option>";
		}
	}
}
// place into the select
var html = "<select id='" + this.id + "' name='" + this.id + "' class='dropdown" + getStyleClasses(this) + "'>" + html + "</select>";
// return
return html;
			]]>
		</getHtmlFunction> 
		
		<updateChildObjects>true</updateChildObjects>
		
		<getDetailsFunction>
			<![CDATA[
return {codes:this.codes};
			]]>
		</getDetailsFunction>
		
		<getDataFunction>
			<![CDATA[
return $("#" + id).val();
			]]>
		</getDataFunction>
		
		<setDataJavaScript>
		<![CDATA[
if (data !== undefined) {
	var control = $("#" + id);
	if (data == null) {
		if (!field) control.children().remove();
		control.removeAttr("data-value");
	} else {		
		data = makeDataObject(data, field);
		if (data.fields && data.rows && data.fields.length > 0 && data.rows.length > 0) {
			if (field) {
				var foundField = false;
				for (var i in data.fields) {
					if (data.fields[i] && field.toLowerCase() == data.fields[i].toLowerCase()) {
						control.val(data.rows[0][i]);
						control.attr("data-value",data.rows[0][i]);
						if (changeEvents) control.trigger("change");
						foundField = true;
						break;
					}
				}
				if (!foundField) {
					control.val(data.rows[0][0]);
					control.attr("data-value",data.rows[0][0]);
				}
			} else {
				// html we are creating
				var html = "";
				// assume no last group
				var lastGroup = "";
				// assume no group
				var group = "";
				// get any previously set value
				var setValue = control.attr("data-value");
				// loop rows
				for (var i in data.rows) {
					var row = data.rows[i];
					var text = "";
					var value = null;
					// assume not selected
					var selected = "";
					// if we had fields
					if (data.fields) {
						// loop the fields
						for (var j in data.fields) {
							// if there is a field here
							if (data.fields[j]) {
								if (data.fields[j].toLowerCase() == "text") text = data.rows[i][j];
								if (data.fields[j].toLowerCase() == "value") value = data.rows[i][j];
								if (data.fields[j].toLowerCase() == "group") group = data.rows[i][j];
							}
						}
					}			
					// if there wasn't a value in the field called "text" but there is something in the first column use that as text
					if (!text && row[0] != null) text = row[0];
					// if the value is null but there is something in the second column use that, but only if codes are on or there are no details which was the previous behaviour
					if (value == null && row[1] != null && (!details || details.codes)) value = row[1];
					// if we still don't have a seperate value
					if (value == null) {
						value = "";
						// if there is a previously set value and it matches this text, set selected
						if (setValue && setValue == text) selected = " selected='true'";
					} else {
						// if there is a previously set value and it matches this value, set selected
						if (setValue && setValue == value) selected = " selected='true'";
						// wrap the value
						value = "value='" + value + "'";
					}
					// check for group and/or change
					if (group != lastGroup) {
						// close last group if need be
						if (lastGroup)html += "</optgroup>";	
						// open group if there is one
						if (group) html += "<optgroup label='" + group + "'>";						
					}
					// remember last group
					lastGroup = group;
					// append option
					html += "<option " + value + selected + ">" + text + "</option>";
				} // loop
				// close last group if need be
				if (lastGroup) html += "</optgroup>";
				// add html if there was some
				if (html) control.append(html);
			}
		}
	}
}
        
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    	    
	    <styles>
	        <style>
	            <name>Drop down</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <initJavaScript>
	    	<![CDATA[
// if there is a data-value attribute, update it on change
$("#" + id).on("change", function(ev){
	var i = $(this);
	if (i.is("[data-value]")) i.attr("data-value", i.val());
});
	    	]]>
	    </initJavaScript>
	    
	   	<runtimeProperties>
	        <runtimeProperty>
	            <type>value</type>
	            <name>Value</name>
	            <setPropertyJavaScript>
	                <![CDATA[
var	data = makeDataObject(data, field);        
var control = $("#" + id);
if (data && data.rows && data.rows.length > 0) {
	var foundField = false;
	if (field && data.fields && data.fields.length > 0) {
		for (var i in data.fields) {
			if (data.fields[i] && field.toLowerCase() == data.fields[i].toLowerCase()) {
				control.val(data.rows[0][i]);
				control.attr("data-value",data.rows[0][i]);
				foundField = true;
				break;
			}
		}
	}
	if (!foundField) {
		control.val(data.rows[0][0]);
		control.attr("data-value",data.rows[0][0]);
	}
} else {
	control.val("");
	control.removeAttr("data-value");
}	                
if (changeEvents) control.trigger("change");
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        <runtimeProperty>
	            <type>text</type>
	            <name>Text</name>
				<advanced>true</advanced>
	            <getPropertyFunction>
	                <![CDATA[
return $("#" + id + " option:selected").text();
	                ]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	    </runtimeProperties>
	    
	   	<formSetRunTimePropertyType>value</formSetRunTimePropertyType>
	    
	</control>
</controls>