<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2018 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>radiobuttons</type>
	    <name>Radio buttons</name>
	    <image>images/radio_button.svg</image>
	    <category>Form controls</category>
	    <helpHtml>A list of options in which only one can be selected.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewResponsiveApplications>false</addToNewResponsiveApplications>
	     
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	        
	        <property>
	            <key>codes</key>
	            <name>Codes</name>
	            <visible>false</visible>
	        </property>
	        
	        <property>
	            <key>buttons</key>
	            <name>Buttons</name>
	            <visible>true</visible>
	            <setConstructValueFunction>return [{value:"", label:"Radio button 1"}, {value:"", label:"Radio button 2"}];</setConstructValueFunction>
	            <changeValueJavaScript>radiobuttons</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Defines the labels for the radio buttons. An option for enabling codes can also be used. Codes allow for more precise visibility and validation conditions.</helpHtml>
	        </property>
	            
	        <property>
	            <key>value</key>
	            <name>Inital value</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the radio button to a given value. Used in conjunction with codes.</helpHtml>
	        </property>
	            
	        <property>
	            <key>buttonposition</key>
	            <name>Button position</name>
	            <setConstructValueFunction>return "L";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return [{value:"L", text:"left"}, {value:"R", text:"right"}];</getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the position of the text around the radio buttons.</helpHtml>
	        </property>
	        
	        <property>
	            <key>layout</key>
	            <name>Layout</name>
	            <setConstructValueFunction>return "H";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return [{value:"H", text:"horizontal"}, {value:"V", text:"vertical"}];</getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the position of the radio buttons.</helpHtml>
	        </property>
	        
	        <property>
	            <key>group</key>
	            <name>Group</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Allows you to assign groups to radio buttons. If different sets of buttons share the same group then only one button can be selected at one time from that group.</helpHtml>
	        </property>

			<property>
				<key>advancedProperties</key>
				<name>Advanced properties</name>
				<setConstructValueFunction>return false;</setConstructValueFunction>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Whether to show advanced properties to actions.</helpHtml>
			</property>
	        
	    </properties>
	    
	    <resources>
	    	<resource>
	    		<type>css</type>
	    		<contents>
.radiobuttons label {
	display: inline-block;
}	    		
	    		</contents>
	    	</resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object	
var radiobuttonHtml = "";
// check we have buttons
if (this.buttons || this.valueList) {
	// if the options are a string turn them in an array
	if ($.type(this.buttons) == "string") this.buttons = JSON.parse(this.buttons);
	// if codes is a false string make it a boolean
	if (this.codes == "false") this.codes = false;
	// get the buttons
	var buttons = this.buttons;
	// get if we have codes
	var codes = this.codes;
	// if it's a value list use that instead
	if (this.valueList) {
		for (var i in _version.valueLists) {
			if (this.valueList == _version.valueLists[i].name) {
		  		buttons = _version.valueLists[i].values;
		  		codes = _version.valueLists[i].usesCodes;
		  		break;
			}
		}
	}
	// loop the buttons
	for (var i in buttons) {
		// get the button
		var button = buttons[i];
		// get the label
		var label = button.label;
		// if valueList
		if (this.valueList) label = button.text;
		var value = (codes ? button.value : label);
		// wrap the label in spans for FF styling
		label = "<span>" + label + "</span>";
		radiobuttonHtml += "<label>";
		if (this.buttonposition == 'R') radiobuttonHtml += label;
		radiobuttonHtml += "<input type='radio' name='" + (this.group ? escapeApos(this.group) : this.id) + "' id='" + this.id + i + "' value='" + escapeApos(value) + "' " + (this.value == value ? "checked='checked'" :  "") + "></input><span></span>";
		if (this.buttonposition == 'L') radiobuttonHtml += label;		
		radiobuttonHtml += "</label>";
		if (this.layout == 'V') radiobuttonHtml += "<br/>";
	}
} else {
	radiobuttonHtml = "No buttons";
}
// place into the select
var html = "<label id='" + this.id + "' class='radiobuttons" + getStyleClasses(this) + "'>" + radiobuttonHtml + "</label>";
// return
return html;
	        ]]>
	    </getHtmlFunction>
	    
		<updateChildObjects>true</updateChildObjects>
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).find("input[type=radio]:checked").val();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
if (data != null && data !== undefined) {
	var radiobuttons = $("#" + id);
	radiobuttons.find("input[type=radio]").prop('checked',false);
	data = makeDataObject(data, field);
	var value = null;
	if (data.rows && data.rows[0]) {
		if (field && data.fields) {
			for (var i in data.fields) {
				if (data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			value = data.rows[0][0];
		}
	}
	if (value !== undefined) {
		var button = radiobuttons.find("input[type=radio][value='" + value + "']");
		if (button[0]) {
			button.prop('checked',true);
		} else {
			radiobuttons.find("input[type=radio]").prop('checked',false);
		}
		if (changeEvents) button.trigger("change");
	}
}
        
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Radio button group</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Radio buttons</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input[type=radio]";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Labels</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " label";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    <runtimeProperties>
	        <runtimeProperty>
	            <type>text</type>
	            <name>Text</name>
				<advanced>true</advanced>
	            <getPropertyFunction>
	                <![CDATA[
return $("#" + id + " input[type=radio]:checked").parent().text().trim();
	                ]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	    </runtimeProperties>
	    
	</control>
</controls>