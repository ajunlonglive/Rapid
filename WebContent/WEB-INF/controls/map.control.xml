<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>map</type>
	    <name>Map</name>
	    <image>images/map.svg</image>
	    <helpHtml>An interactive map that displays a location.</helpHtml>
	    
	    <addToNewApplications>false</addToNewApplications>
	         
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>mapType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "R";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return [["R","Road map"],["S","Satellite image"]];</getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the type of map from road to satellite.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>lat</key>
	            <name>Centre latitude</name>
	            <setConstructValueFunction>return 51.50722;</setConstructValueFunction>
	            <changeValueJavaScript>mapLatLng</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the latitude position.</helpHtml>
	        </property>
	        
	        <property>
	            <key>lng</key>
	            <name>Centre longitude</name>
	            <setConstructValueFunction>return -0.12750;</setConstructValueFunction>
	            <changeValueJavaScript>mapLatLng</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the longitude position.</helpHtml>
	        </property>
	        
	        <property>
	            <key>zoom</key>
	            <name>Zoom</name>
	            <setConstructValueFunction>return 8;</setConstructValueFunction>
	            <changeValueJavaScript>mapZoom</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the initial zoom level of the map. The higher the number the stronger the zoom. Caps at 21.</helpHtml>
	        </property>
	        
	        <property>
	            <key>markerImage</key>
	            <name>Marker image</name>
	            <setConstructValueFunction>return ""</setConstructValueFunction>
	            <changeValueJavaScript>imageFile</changeValueJavaScript>
	            <helpHtml>Allows you to set a customised marker on the map.</helpHtml>
	        </property>
	        
	        <property>
	            <key>key</key>
	            <name>API Key</name>
	            <setConstructValueFunction>return ""</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Google Maps API key, may be needed to verify your map and make it usable. If multiple maps are used only the first map will be required to have this key.</helpHtml>
	        </property>
	        
	        <property>
	            <key>searchFields</key>
	            <name>Address search fields</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>When markers are added to the map and the data object does not have lat/lng or east/north, the value in the first of these comma-seperated fields will be searched on and the marker added to the results</helpHtml>
	        </property>
	        
	        <property>
	            <key>showMapType</key>
	            <name>Show map type control</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Allows users to swap between satellite and road map type.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showZoom</key>
	            <name>Show zoom control</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Allows users to set their own level of zoom.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showScale</key>
	            <name>Show scale</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Whether an indicator for the scale of the map is shown</helpHtml>
	        </property>
	        	        
	        <property>
	            <key>showStreetView</key>
	            <name>Show street view control</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Enables users to access street view on the map.</helpHtml>
	        </property>
	        
	        <property>
	            <key>heatmap</key>
	            <name>Heatmap</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Whether to show a heatmap instead of conventional markers.</helpHtml>
	        </property>
	        
	        <property>
	            <key>opacity</key>
	            <name>Opacity</name>
	            <setConstructValueFunction>return null;</setConstructValueFunction>
	            <changeValueJavaScript>heatmapNumber</changeValueJavaScript>
	            <helpHtml>The opacity of the heatmap, expressed as a number between 0 and 1. Defaults to 0.6.</helpHtml>
	        </property>
	        
	         <property>
	            <key>radius</key>
	            <name>Radius</name>
	            <setConstructValueFunction>return null;</setConstructValueFunction>
	            <changeValueJavaScript>heatmapNumber</changeValueJavaScript>
	            <helpHtml>The radius of influence for each data point, in pixels.</helpHtml>
	        </property>
	         
	         <property>
	            <key>maxIntensity</key>
	            <name>Max intensity</name>
	            <setConstructValueFunction>return null;</setConstructValueFunction>
	            <changeValueJavaScript>heatmapNumber</changeValueJavaScript>
	            <helpHtml>The maximum intensity of the heatmap. By default, heatmap colors are dynamically scaled according to the greatest concentration of points at any particular pixel on the map. This property allows you to specify a fixed maximum.</helpHtml>
	        </property>
	         
	         <property>
	            <key>dissipating</key>
	            <name>Dissipating</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>heatmapCheckbox</changeValueJavaScript>
	            <helpHtml>Specifies whether heatmaps dissipate on zoom. By default, the radius of influence of a data point is specified by the radius option only. When dissipating is disabled, the radius option is interpreted as a radius at zoom level 0.</helpHtml>
	        </property>
	        	        	        	        	        	        
	    </properties>
	    
	    <resources>
	    
	        <resource>
	            <type>javascriptFile</type>
	            <contents>scripts/controls/map.js</contents>
	            <replaceMinIfDifferent>true</replaceMinIfDifferent>
	        </resource>
	        
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
.map {
	width: 300px;
	height: 300px;
	text-align: center;
}
	                ]]>
	            </contents>
	        </resource>
	        <resource>
	        	<type>javascript</type>
	        	<contents>
	        	<![CDATA[
// makes a callback for a given event and control
function mapMarkersAddedCallback(ev, id) {
	var called = false;
	return function() {
		if (window["Event_markersAdded_" + id]) window["Event_markersAdded_" + id](ev);
	}
}
	        	]]>
	        	</contents>
	        </resource>
	        	        
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
return "<div id='" + this.id + "' style='width:" + this.width + ";height:" + this.height + "' class='map" + getStyleClasses(this) + "'>Map not available</div>"
	        ]]>
	    </getHtmlFunction>
	   
	    <rebuildJavaScript>
	        <![CDATA[
	        
// get a reference to the iFrame window
var w = _pageIframe[0].contentWindow;
	        
// use loadMapJavaScript from /scripts/controls/map.js
w && w.loadMapJavaScript && w.loadMapJavaScript(this.id, this._getDetails());

// call rebuildLoadedMap map manually
w && w.rebuildLoadedMap && w.rebuildLoadedMap(this.id);

	        ]]>
	    </rebuildJavaScript>
	    
	    <initDesignJavaScript>
	        <![CDATA[
// rebuild the map after a small delay so all tiles are present
var control = this;
setTimeout( function() {
    rebuildHtml(control);
}, 500);
	        ]]>
	    </initDesignJavaScript>
	    	    
	    <saveJavaScript>
	        <![CDATA[
// remove any objects google as put in our div
this.object.html("Map not available");
	        ]]>
	    </saveJavaScript>
	    
	    <getDetailsFunction>
	        <![CDATA[
// look for any actions on the markerClick event
var markerClickFunction = null;
if (this.events && this.events.length > 0) {
	for (var i in this.events) {
		var event = this.events[i];
		if (event.type == "markerClick") {
			if (event.actions && event.actions.length > 0) {
				markerClickFunction = "Event_markerClick_" + this.id;
				break;
			}
		}
	}
}
// return the object
return {
	lat: this.lat,
	lng: this.lng,
	zoom: this.zoom,
	mapType: this.mapType,
	key: this.key,
	searchFields: this.searchFields,
	showMapType: this.showMapType,
	showScale: this.showScale,
	showZoom: this.showZoom,
	showStreetView: this.showStreetView,
	markerImage: this.markerImage,
	markerClickFunction: markerClickFunction,
	heatmap: this.heatmap,
    opacity: this.opacity,
	radius: this.radius,
	maxIntensity: this.maxIntensity,
	dissipating: this.dissipating
};
	        ]]>
	    </getDetailsFunction>
	    
	    <events>
	        <event>
	            <type>mapClick</type>
	            <name>Click</name>	            
	        </event>
	        <event>
	            <type>dragStart</type>
	            <name>Drag start</name>	            
	        </event>
	        <event>
	            <type>dragEnd</type>
	            <name>Drag end</name>	            
	        </event>
	        <event>
	            <type>markerClick</type>
	            <name>Marker click</name>	            
	        </event>	        
	        <event>
	            <type>markersAdded</type>
	            <name>Markers added</name>	            
	        </event>
	    </events>
	      	    
	    <styles>
	        <style>
	            <name>Map</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <initJavaScript>
	        <![CDATA[	        
loadMapJavaScript(id, details);

var saveClickLocation = function(click) {
	var data = {
		fields: ["lat", "lng"],
		rows: [[click.latLng.lat(), click.latLng.lng()]]
	};
	_maps[id].lastClickLocation = data;
};

if (window.Proxy) {
	_maps = new Proxy(_maps, {
		set: function(maps, field, map) {
			if (field === id) map.addListener("mousedown", saveClickLocation);
			maps[field] = map;
		},
		get: function(maps, field) {
			return maps[field];
		}
	});
} else {
	// IE
	var interval = setInterval(function() {
		if (_maps[id]) {
			clearInterval(interval);
			_maps[id].addListener("mousedown", saveClickLocation);
		}
	});
}
	        ]]>	        
	    </initJavaScript>	    
	    
	    <runtimeProperties>
	        
	        <runtimeProperty>
	            <type>mapCentre</type>
	            <name>Map centre</name>
	            <getPropertyFunction>
	                <![CDATA[
// make the data object
var data = null;
// get the map
var map = _maps[id];
// if there was a map
if (map) {
	// make a data object
	data = {fields:["lat","latitude","lng","longitude"],rows:[[]]};
	// get the centre
	var centre = map.getCenter();
	// get lat
	var lat = centre.lat();
	// get lng
	var lng = centre.lng();
	// add lat to the data object
	data.rows[0].push(lat);
	// add latitude to the data object
	data.rows[0].push(lat);
	// add lng to the data object
	data.rows[0].push(lng);
	// add longitude to the data object
	data.rows[0].push(lng);
	// make a new easting / northing
	var pIn = new GT_WGS84();
	// add lat/lng
	pIn.setDegrees(lat,lng);
	// if in Great Britiain
	if (pIn.isGreatBritain()) {
		// get the easting / northing
		var pOut = pIn.getOSGB();
		// add east / north fields
		data.fields.push("east");
		data.fields.push("north");
		// set the east
		data.rows[0].push(pOut.eastings);
		// set the north
		data.rows[0].push(pOut.northings);
	}
	// if there was a field
	if (field) {
		var fieldIndex = -1;
		for (var i in data.fields) {
			if (data.fields[i] && field.toLowerCase() == data.fields[i].toLowerCase()) {
				return data.rows[0][i];
			}
		}	
		return null;
	} else {
		return data;
	}
}
// return what we got
return data;
	                ]]>
	            </getPropertyFunction>
	            <setPropertyJavaScript>
	                <![CDATA[
// get the map
var map = _maps[id];
// get the data object
var data = makeDataObject(data, field);
// get the position for the first row
var pos = getMapPosition(data, 0, setMapCentre, map, details);
// if we got a map and data
if (map && pos && pos.lat && pos.lng) {
	setMapCentre(map, pos);
}	                
					]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>addMarkers</type>
	            <name>Add markers</name>
	            <setPropertyJavaScript>
	                <![CDATA[
// get the map
var map = _maps[id];
// get the data object
var data = makeDataObject(data, field);
// if we got a map and data
if (map && data && data.rows && data.rows.length > 0) {
	// create a markers array if there isn't one
	if (!map.markers) map.markers = [];
	// add the markers, making and sending a callback for the event on this control
	addMapMarkers(map, data, details, null, mapMarkersAddedCallback(ev, id));
}	                
					]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>replaceMarkers</type>
	            <name>Replace markers</name>
	            <setPropertyJavaScript>
	                <![CDATA[
// get the map
var map = _maps[id];
// if we got one
if (map) {
	// redraw the map in case it was hidden (this will mean the centre hasn't been set correctly but the zoomExtents for the markers will fix this)
	google.maps.event.trigger(map, "resize");
	// get the data object
	var data = makeDataObject(data, field);
	// if there are any current markers
	if (map.markers) {
		// loop them
		for (var i in map.markers) {
			// remove marker
			if (map.markers[i].setMap) map.markers[i].setMap(null);
		}
	} 
	// empty markers array
	map.markers = [];
	// if the map has a heatmap
	if (map.heatmap) {
		// remove from map render
		map.heatmap.setMap(null);
		// remove from map object
		map.heatmap = null;
	}
	// if we got data
	if (data && data.rows && data.rows.length > 0) {		
		// add the markers, and zoom their extents and centre the map once all markers are resolved
		// making and sending a callback for the event on this control
		addMapMarkers(map, data, details, data.rows.length - 1, mapMarkersAddedCallback(ev, id));
	}
}           
					]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>selectedMarker</type>
	            <name>Selected marker</name>
	            <getPropertyFunction>
	                <![CDATA[
// get the map
var map = _maps[id];
// get the selectedIndex
var selectedIndex = map.markerSelectedIndex;
// if we got a map and data
if (map && selectedIndex > -1 && map.markers.length > selectedIndex) {
	var marker = map.markers[selectedIndex];
	var data = marker.data;
	if (field) {
		var fieldIndex = -1;
		for (var i in data.fields) {
			if (data.fields[i] && field.toLowerCase() == data.fields[i].toLowerCase()) {
				return data.rows[0][i];
			}
		}	
		return null;
	} else {
		return data;
	}	
} else {
	return null;
}	                
					]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>lastClickLocation</type>
	            <name>Last click</name>
	            <getPropertyFunction>
	                <![CDATA[
// get the map
var map = _maps[id];
return JSON.stringify(map.lastClickLocation);
					]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	        
	    </runtimeProperties>
       	    
	</control>
</controls>