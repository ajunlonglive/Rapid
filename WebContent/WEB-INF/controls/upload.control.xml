<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>upload</type>
	    <name>Upload</name>
	    <image>images/upload.svg</image>
	    <helpHtml>A button that lets the user select a file from their computer.</helpHtml>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    <canValidate>true</canValidate>
	    	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	        
	        <property>
	            <key>message</key>
	            <name>Message</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>An alternative message that can be displayed - the default is "Drop files here to upload".</helpHtml>	            
	        </property>

	        <property>
	            <key>dictCancelUpload</key>
	            <name>Cancel message</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>An alternative message that can be displayed for the cancel link instead of the default "Cancel upload"</helpHtml>	            
	        </property>
	        
	        <property>
	            <key>dictRemoveFile</key>
	            <name>Remove message</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>An alternative message that can be displayed for the remove link instead of the default "Remove file"</helpHtml>	            
	        </property>
	        
	        <property>
	            <key>acceptedFiles</key>
	            <name>Accepted files</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>A comma separated list of mime types or file extensions. Eg.: image/*,application/pdf,.psd - by default Rapid accpets .bmp, .gif, .jpg, .png, .pdf</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxFiles</key>
	            <name>Max files</name>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Maximum number of files allowed to be uploaded.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxSize</key>
	            <name>Max file size</name>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Maximum allowed file size in megabytes.</helpHtml>
	        </property>
	        
	        <property>
	            <key>capture</key>
	            <name>Mobile capture</name>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                 <![CDATA[
	                return [["",""],["camera","camera"],["microphone","microphone"],["camcorder","camcorder"]];
	               	]]>
	            </getValuesFunction>
	            <helpHtml>If camera, mobile devices will skip the file selection and choose camera If microphone, mobile devices will skip the file selection and choose the microphone If camcorder, mobile devices will skip the file selection and choose the camera in video mode.</helpHtml>
	        </property>
	        
	        <property>
	            <key>resizeWidth</key>
	            <name>Resize width</name>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>If set, images will be resized to this width in pixels before being uploaded. If resizeHeight is not provided, the original aspect ratio of the file will be preserved.</helpHtml>
	        </property>
	        
	        <property>
	            <key>resizeHeight</key>
	            <name>Resize height</name>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>If set, images will be resized to this height in pixels before being uploaded. If resizeWidth is not provided, the original aspect ratio of the file will be preserved.</helpHtml>
	        </property>
	        
	        <property>
	            <key>resizeQuality</key>
	            <name>Resize quality</name>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>The quality of the resized images - a number between 0 and 100</helpHtml>
	        </property>
	        
	        <property>
	            <key>resizeMethod</key>
	            <name>Resize method</name>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                 <![CDATA[
	                return [["","Please select"],["contain","contain"],["crop","crop"]];
	               	]]>
	            </getValuesFunction>
	            <helpHtml>How the images should be scaled down in case both resizeWidth and resizeHeight are provided.</helpHtml>
	        </property>
	        	 	                  	      
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>javascriptFile</type>
	            <contents>scripts/controls/dropzone.js</contents>
	        </resource>
	        <resource>
	            <type>cssFile</type>
	            <contents>styles/controls/dropzone.css</contents>
	        </resource>	        
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
if (window["Dropzone"]) Dropzone.autoDiscover = false;
	                ]]>
	            </contents>
	        </resource>
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
            	      
	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	   	        
return "<div class='upload dropzone' id='" + this.id + "'><input type='hidden' name='" + this.id + "' id='" + this.id + "files'></input></div>";
	        ]]>
	    </getHtmlFunction> 
	    
	    <initDesignJavaScript>
	        <![CDATA[
var options = {
	url: "~"
}
if (this.message) options.dictDefaultMessage = this.message;
new _pageIframeWindow[0].Dropzone("div#" + this.id, options);
	        ]]>
	    </initDesignJavaScript>
	    
	    <getDetailsFunction>	        
	        <![CDATA[
return {
  message: this.message,
  dictCancelUpload: this.dictCancelUpload,
  dictRemoveFile: this.dictRemoveFile,
  acceptedFiles: this.acceptedFiles,
  maxFiles: this.maxFiles,
  maxSize: this.maxSize,
  capture: this.capture,
  resizeWidth: this.resizeWidth,
  resizeHeight: this.resizeHeight,  
  resizeQuality: this.resizeQuality / 100,
  resizeMethod: this.resizeMethod
};
			]]>	        	        
	    </getDetailsFunction>	    
	    	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id + "files").val();
	        ]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var value = null;
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			value = data.rows[0][0];
		}
	}
}
var control = $("#" + id);
control.find("#" + id + "files").val(value);
var dzs = window["dropzones"];
if (dzs) {
	var dz = dzs[id];
	if (dz) {
		if (value) {
			var files = value.split(",");
			for (var i in files) {
				var fileName = files[i]; 
				var file = JSON.parse(sessionStorage.getItem(fileName));
				if (file) {
					file.name = fileName;
				} else {
					file = {name:fileName};
				}
				dz.emit("addedfile", file);
				if (file.url) dz.emit("thumbnail", file, file.url);
				dz.emit("complete", file);
			}
			if (dz.options.maxFiles) dz.options.maxFiles = dz.options.maxFiles - files.length;
		} else {
			dz.removeAllFiles();
			control.find("div.dz-preview.dz-complete").remove();
			control.find("div.dz-message").show();
		}
	}
}
if (changeEvents) control.trigger("change");
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>	  	              	        
	    </events>
	 
	    <styles>
	        <style>
	            <name>Upload</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Images</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " div.dz-image";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Messages</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " span";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Remove link</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " a.dz-remove";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	   	<initJavaScript>
	        <![CDATA[
var options = {
	url: "~?a=" + _appId + "&v=" + _appVersion + "&action=uploadImage", 
	addRemoveLinks: true,	
	hiddenInputContainer: "div#" + id,
	dictCancelUploadConfirmation: null,
	dictRemoveFileConfirmation: null
}
// allow overriding of url from custom details object
if (details.url) options.url = details.url;
// set other options from details object made in designer
if (details.message) options.dictDefaultMessage = details.message;
if (details.dictCancelUpload) options.dictCancelUpload = details.dictCancelUpload;
if (details.dictRemoveFile) options.dictRemoveFile = details.dictRemoveFile;
if (details.acceptedFiles) options.acceptedFiles = details.acceptedFiles;
if (details.maxFiles) options.maxFiles = details.maxFiles;
if (details.maxSize) options.maxFilesize = details.maxSize*1;
if (details.capture) options.capture = details.capture;
if (details.resizeWidth) options.resizeWidth = details.resizeWidth;
if (details.resizeHeight) options.resizeHeight = details.resizeHeight;
if (details.resizeQuality) options.resizeQuality = details.resizeQuality;
if (details.resizeMethod) options.resizeMethod = details.resizeMethod;
var dz = new Dropzone("div#" + id, options);
dz.on("success", function(file) {
	var i = $("#" + id + "files");
	var files = i.val();
	if (files) {
		files += ",";
	} else {
		files = "";
	}
	var fileName = file.name;
	if (file.xhr && file.xhr.response) {
		fileName = file.xhr.response;
		file.upload.filename = fileName;
	}
	files += fileName;
	i.val(files);
	var data = {size: file.size};
	sessionStorage.setItem(fileName, JSON.stringify(data));
	$("#" + id).trigger("change");
});
dz.on("thumbnail", function(file, dataUrl) {
	var fileName = file.name;
	if (file.upload && file.upload.filename) fileName = file.upload.filename
	var data = {size: file.size, url: dataUrl};
	sessionStorage.setItem(fileName, JSON.stringify(data));
});
dz.on("removedfile", function(file) {
	var fileName = file.name;
	if (file.upload && file.upload.filename) fileName = file.upload.filename
	var c = $("#" + id + "files");
	var files = c.val();
	if (files) 	{
		var fileList = "";
    	files = files.split(",");
    	var skipped = false;
    	for (var i in files) {
    		var f = files[i];
    		if (f == fileName && !skipped){
    			skipped = true;
    		} else {
    			fileList += f + ",";
    		}
    	}
    	if (fileList.substr(fileList.length-1,1) == ",") fileList = fileList.substr(0, fileList.length-1);
    	c.val(fileList);
    }
    $("#" + id).trigger("change");
});
var dzs = window["dropzones"];
if (!dzs) dzs = {};
dzs[id] = dz;
window["dropzones"] = dzs;
	        ]]>
	    </initJavaScript>
	    
	    <runtimeProperties>		
		  	
	        <runtimeProperty>		
	            <type>details</type>		
	            <name>File details</name>		
	            <getPropertyFunction>		
	                <![CDATA[
// start a data object
var data = {fields:["filename", "name","type","size"],rows:[]};

// get the dropzones map
var dzs = window["dropzones"];
// if it's there
if (dzs) {
	// get this dropzone object
	var dz = dzs[id];
	// if it's there
	if (dz) {
		
		// Get all the accepted files only		
		var acceptedFiles = dz.getAcceptedFiles();		
				
		// Loop over the files in this upload control		
		for (var i = 0; i < acceptedFiles.length; i++) {		
			// get this file
			var file = acceptedFiles[i];		
			// add values to fields in data object
			data.rows.push([file.upload.filename, file.name, file.type, file.size]);
		}

	}

}
		
return data;		
					]]>		
	            </getPropertyFunction>		
	        </runtimeProperty>		
	        		
		</runtimeProperties>
	    
	</control>
</controls>