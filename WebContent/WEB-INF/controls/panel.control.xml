<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2018 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>panel</type>
	    <name>Panel</name>
	    <image>images/panel.svg</image>
	    <helpHtml>A control that groups other controls together for layout and logic rules.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewResponsiveApplications>false</addToNewResponsiveApplications>
	    
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserInsert>true</canUserInsert>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	            
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	             
	        <property>
	            <key>text</key>
	            <name>Text</name>
	            <setConstructValueFunction>return ""</setConstructValueFunction>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Inputs text into the panel.</helpHtml>
	        </property>
	        
	        <property>
	            <key>roles</key>
	            <name>User roles</name>
	            <changeValueJavaScript>roles</changeValueJavaScript>
	            <helpHtml>Only allows the viewing of the panel based on the type of privileges a user has.</helpHtml>
	        </property>
	        
	        <property>
	            <key>hidden</key>
	            <name>Hidden</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Whether the panel is hidden when the page first loads.</helpHtml>
	        </property>
	        
	        <property>
	            <key>form</key>
	            <name>Form</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Whether the panel is a form (autofill target group).</helpHtml>
	        </property>
	        
	        <property>
	            <key>autocomplete</key>	            
	            <name>Allow autocomplete</name>
	            <visibility><key>form</key><value>true</value></visibility>	            
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <getValuesFunction>return true;</getValuesFunction>
	            <refreshHtml>true</refreshHtml>	            
	            <helpHtml>Whether the form is allowed to autocomplete.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// get the style classes for this control	        
classes = getStyleClasses(this); 	      
// if they start with "alert" do not include "panel" as this messes up bootstrap
if (!classes && classes.indexOf("alert") != 1) classes = "panel" + classes;
// element type based on form property
var type = this.form ? "form" : "div";
// assume not autocomplete
var autocomplete = "";
// if a form and no autocomplete add attribute
if (this.form && !this.autocomplete) autocomplete=" autocomplete='off'";
// return our html for adding to our parent object	        
return "<" + type + " id='" + this.id + "' " + autocomplete + "class='" + classes + "'" + (this.text ? "" : " style='min-height:15px;'") + ">" + this.text + "</" + type + ">";
	        ]]>
	    </getHtmlFunction> 
	    
	    <saveJavaScript>
	        <![CDATA[
// get the style attribute 	        
var style = this.object.attr("style");
// if the min-height:15 is present but there are children
if (style && style.indexOf("min-height:15px;") > -1 && this.childControls && this.childControls.length > 0) {
	// remove the min-height
	style = style.replace("min-height:15px;","");
	// if there are other attributes
	if (style) {
		// update changed style
		this.object.attr("style",style );
	} else {
		// remove empty style
		this.object.removeAttr("style");
	}
}
// hide if hidden
if (this.hidden) this.object.hide();	        
	        ]]>
	    </saveJavaScript>
	    
	    <events>
	    	<event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>mouseenter</type>
	            <name>Mouse enter</name>
	        </event>
	        <event>
	            <type>mouseleave</type>
	            <name>Mouse leave</name>
	        </event>	              
	    </events>
	    
	    <styles>       
	        <style>
	            <name>Panel</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	</control>
</controls>