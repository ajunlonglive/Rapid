<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2020 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>responsivedropdown</type>
	    <name>Responsive drop down</name>
	    <image>images/dropdown.svg</image>
	    <category>Responsive controls</category>
	    <helpHtml>Lets the user select from a list of options when clicked. It resizes with screen-width and moves down if it gets too small.</helpHtml>
	    
	    <addToNewResponsiveApplications>true</addToNewResponsiveApplications>
	        
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>

	        <property>
	            <key>responsiveLabel</key>
	            <name>Label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>textLabel</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Label to appear above the control</helpHtml>
	        </property>
	        
	         <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formTextSummary</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	        
	        <property>
	            <key>useLabelAsSummary</key>
	            <name>Manual form summary label</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Hidden property saying if the user has manually set the Form summary label.</helpHtml>
	        </property>
	        
	        <property>
	            <key>codes</key>
	            <name>Codes</name>
	            <visible>false</visible>
	        </property>
	                   
	        <property>
	            <key>options</key>
	            <name>Options</name>
	            <setConstructValueFunction>return [{value:"", text:"Value 1"}, {value:"", text:"Value 2"}, {value:"", text:"Value 3"}];</setConstructValueFunction>
	            <changeValueJavaScript>options</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Defines the list of options in the dropdown. If codes are used they will be the value for that row. You can paste text and codes from spreadsheets.</helpHtml>
	        </property>
	        
	        <property>
	            <key>value</key>
	            <name>Initial value</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Selects one of the options from the dropdown as its initial value.</helpHtml>
	        </property>
	        
	        <property>
	            <key>placeholder</key>
	            <name>Placeholder</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets a faded message so users can better understand what to select. Gets erased when search starts.</helpHtml>
	        </property>
	        
	        <property>
	            <key>filter</key>
	            <name>Searching</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Allows the user to search through the available options as they type.</helpHtml>
	        </property>
	        
	        <property>
	            <key>customValue</key>
	            <name>Custom value</name>
	            <changeValueJavaScript>dropdownCustomValue</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Allows the user to provide their own value if searching is enabled and codes are not being used.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxLength</key>
	            <name>Character limit</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>inputMaxLength</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the character limit of the input box. Does not apply to the number input type.</helpHtml>
	        </property>
	        
	        <property>
	            <key>extraSmall</key>
	            <name>Extra small width</name>
	            <setConstructValueFunction>return "xs-12"</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"xs-1", text:"1/12"}, {value:"xs-2", text:"2/12"}, {value:"xs-3", text:"3/12"}, {value:"xs-4", text:"4/12"}, {value:"xs-5", text:"5/12"}, {value:"xs-6", text:"6/12"}, {value:"xs-7", text:"7/12"}, {value:"xs-8", text:"8/12"}, {value:"xs-9", text:"9/12"}, {value:"xs-10", text:"10/12"}, {value:"xs-11", text:"11/12"}, {value:"xs-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is very small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>small</key>
	            <name>Small width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"sm-1", text:"1/12"}, {value:"sm-2", text:"2/12"}, {value:"sm-3", text:"3/12"}, {value:"sm-4", text:"4/12"}, {value:"sm-5", text:"5/12"}, {value:"sm-6", text:"6/12"}, {value:"sm-7", text:"7/12"}, {value:"sm-8", text:"8/12"}, {value:"sm-9", text:"9/12"}, {value:"sm-10", text:"10/12"}, {value:"sm-11", text:"11/12"}, {value:"sm-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>medium</key>
	            <name>Medium width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"md-1", text:"1/12"}, {value:"md-2", text:"2/12"}, {value:"md-3", text:"3/12"}, {value:"md-4", text:"4/12"}, {value:"md-5", text:"5/12"}, {value:"md-6", text:"6/12"}, {value:"md-7", text:"7/12"}, {value:"md-8", text:"8/12"}, {value:"md-9", text:"9/12"}, {value:"md-10", text:"10/12"}, {value:"md-11", text:"11/12"}, {value:"md-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is of a medium size. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>large</key>
	            <name>Large width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"lg-1", text:"1/12"}, {value:"lg-2", text:"2/12"}, {value:"lg-3", text:"3/12"}, {value:"lg-4", text:"4/12"}, {value:"lg-5", text:"5/12"}, {value:"lg-6", text:"6/12"}, {value:"lg-7", text:"7/12"}, {value:"lg-8", text:"8/12"}, {value:"lg-9", text:"9/12"}, {value:"lg-10", text:"10/12"}, {value:"lg-11", text:"11/12"}, {value:"lg-12", text:"12/12"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is large. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>

			<property>
				<key>advancedProperties</key>
				<name>Advanced properties</name>
				<setConstructValueFunction>return false;</setConstructValueFunction>
				<changeValueJavaScript>checkbox</changeValueJavaScript>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Whether to show advanced properties to actions.</helpHtml>
			</property>
	        
	    </properties>
	    
	    <resources>
			<resource>
				<type>cssLink</type>
				<contents>styles/bootstrap.css</contents>
			</resource>

			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/bootstrap.min.js</contents>
			</resource>
			
			<resource>
	    		<type>cssFile</type>
	    		<contents>styles/controls/jquery-ui.css</contents>
	    	</resource>
			
			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/jquery-ui-1.12.1.min.js</contents>
			</resource>
			
			<resource>
				<type>css</type>
				<contents>
.r-dropdown .custom-combobox {
  position: relative;
  display: inline-block;
  width: 100%;
}

.r-dropdown .custom-combobox-toggle {
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  padding: 0;
  width: 25px;
  background: url(../../../images/triangleDown_8x8.png) no-repeat center;
}

.ui-autocomplete {
  max-height: 400px;
  overflow-y: auto;
  overflow-x: hidden;
}

.ui-autocomplete .ui-menu-item {
  padding: 0 10px;
}

.ui-menu-item > div {
	border: 1px solid rgba(0,0,0,0);
}

.ui-helper-hidden-accessible {
  display:none;
}

.ui-menu-item-wrapper {
  min-height: 1.5em;
}

.ui-menu.ui-widget.ui-widget-content.ui-autocomplete.ui-front {
  z-index: 1005;
}

				</contents>
			</resource>
			
			<resource>
				<type>javascript</type>
				<contents>
// this is a proxy method because the value property only has a set, and datacopy merge needs a get
function getProperty_responsivedropdown_value(ev, id, field, details) {
	// use the standard get (which is why we never had a value property get in the first place)
	return getData_responsivedropdown(ev, id, field, details);
}
				</contents>
			</resource>
			
		</resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
	        
// return our html for adding to our parent object
var html = "";
var classes = getStyleClasses(this);

// add appropriate col width classes if they are specified
if (this.extraSmall) classes += " col-" + this.extraSmall;
if (this.small) classes += " col-" + this.small;
if (this.medium) classes += " col-" + this.medium;
if (this.large) classes += " col-" + this.large;

// check we have options or a value list
if (this.options || this.valueList) {
	// if the options are a string turn them in an array
	if ($.type(this.options) == "string") this.options = JSON.parse(this.options);
	// assume we are using the options
	var options = this.options;
	// assume we are using this.codes
	var codes = this.codes;
	// if it's a value list use that instead
	if (this.valueList) {
		for (var i in _version.valueLists) {
			if (this.valueList == _version.valueLists[i].name) {
		  		options = _version.valueLists[i].values;
		  		codes = _version.valueLists[i].usesCodes;
		  		break;
			}
		}
	}
	// add placeholder
	if (this.placeholder) {
		html += "<option value='' selected='true' disabled='disabled'>" + this.placeholder + "</option>";
	}
	// loop the options
	for (var i in options) {
		html += "<option ";
		if (codes) {
			html += "value='" + escapeApos(options[i].value) + "'";
			if (escapeApos(this.value) == options[i].value) html += " selected='selected'";
		} else {
			if (escapeApos(this.value) == options[i].text) html += " selected='selected'";
		}
		html += ">" + options[i].text + "</option>"; 
		/*
		if (codes) {
			html += "<option value='" + escapeApos(options[i].value) + "'" + (escapeApos(this.value) == escapeApos(options[i].value) ? " selected='selected'" : "") + ">" + options[i].text + "</option>";
		} else {
			html += "<option" + (escapeApos(this.value) == options[i].text ? " selected='selected'" : "") + ">" + options[i].text + "</option>";
		}
		*/
	}
}
// place into the select
var html = "<select id='" + this.id + "input' name='" + this.id + "' class='dropdown form-control" + classes + "'>" + html + "</select>";

// check filter
if (this.filter) html = "<div class='ui-widget'>" + html + "</div>";

// check responsive label
if (this.responsiveLabel) {
	return "<div id='" + this.id + "' class='r-dropdown" + classes + "'><label for='" + this.id + "input'>" + this.responsiveLabel + "</label>" + html + "</div>";
} else {
	return "<div id='" + this.id + "' class='r-dropdown" + classes + "'>" + html + "</div>";
}
			]]>
		</getHtmlFunction>
		
		<updateChildObjects>true</updateChildObjects>
		
		<getDetailsFunction>
	 		<![CDATA[
if (this.filter) {
	return {codes:this.codes, filter:this.filter, placeholder:this.placeholder, customValue:this.customValue, maxLength:this.maxLength};
} else {
	return {codes:this.codes};
}
			]]>
		</getDetailsFunction>
		
		<getDataFunction>
			<![CDATA[
// if this is a searchable dropdown with a custom value
if (details && !details.codes && details.customValue) {
	if (!field || field.toLowerCase() === "value") {
		// return the value from the search input
		return $("#" + id).find("input").val();
	} else {
		return null;
	}
} else {
	// get the control
	var control = $("#" + id).find("select");
	// look for a set value
	var setValue = control.attr("data-value");
	// if the was one, and there is 1 child or fewer
	if (setValue && control.children().length <= 1) {
		if (!field || field.toLowerCase() === "value") {
			// return the pre-set value
			return setValue;
		} else {
			return null;
		}
	} else {
		if (field) {
			if (details && details.options) {
				var selectedIndex = control.prop('selectedIndex');
				if (selectedIndex === -1) return null;
				var option = details.options.rows[selectedIndex];
				var fieldIndex = details.options.fields.indexOf(field);
				return option[fieldIndex];
			}
			if (field.toLowerCase() === "text") {
				return control.find(":selected").text();
			}
		}
		// return the selected value
		return control.val();
	}
}
			]]>
		</getDataFunction>
		
		<setDataJavaScript>
			<![CDATA[
if (data !== undefined) {
	var control = $("#" + id).find("select");
	if (data == null) {
		// remove all children
		if (!field) control.children().remove();
		// empty any jquery ui
		$("#" + id).find("input").val("");
		// remove any preset value
		control.removeAttr("data-value");
		// empty multi-column options object if we have a details object and any now-old options on it
		if (details) details.options = null;
	} else {
		// make a nice data object or drill into one
		data = makeDataObject(data, field);
		// if the data has rows and fields as a bare minimum
		if (data.rows && data.fields) {
			// if there is a field (and at least one row) this is a value to be selected (not a list of options)
			if (field && data.rows[0]) {
				// get the value
				var value = data.rows[0][0];
				for (var i in data.fields) {
					if (data.fields[i] && field.toLowerCase() == data.fields[i].toLowerCase()) {
						value = data.rows[0][i];
						control.attr("data-value",data.rows[0][i]);
						break;
					}
				}
				// set control value
				control.val(value);
				// also set the pre-set value in case the options arrive later
				control.attr("data-value", value);
				// look for jquery ui input
				var input = $("#" + id).find("input");
				// if we there was one
				if (input.length > 0) {
					// if codes, or customValues are not in use
					if (details && details.codes || !details.customValue) {
						// read the value back again which uses the select controls ability to check it has an option for the value
						value = control.val();
						// if there is a value
						if (value) {
							// find option with value
							var option = control.find("option[value='" + value + "']");
							// if we got one update value to text
							if (option.length > 0) value = option.text();
						}
					}
					// update the jquery input
					input.val(value);
				}
				// trigger change events
				if (changeEvents) control.trigger("change");
			} else {
				// data is set of dropdown options
				// if there are details we know we must be a new-ish version (older simple apps didn't make one) and more than 2 columns in the data, also if there are more than 1 columns and details starts null we set the second as the code for legacy
				if (details && data.fields.length > 2) {
					// make an options object which will merge current options and incomming data so data from columns not in the markup can be retrieved
					if (!details.options) details.options = { fields: [], rows: [] };
					// merge current options in the control markup with incomming data
					var newFields = data.fields.filter(function(field) { return details.options.fields.indexOf(field) === -1; });
					details.options.fields = details.options.fields.concat(newFields);
					details.options.rows.forEach(function(row) {
						row.length = details.options.fields.length;
						row.fill("", details.options.fields.length - newFields.length);
					});
					data.rows.forEach(function(row) {
						var newRow = details.options.fields.map(function(field) {
							var fieldIndex = data.fields.indexOf(field);
							if (fieldIndex === -1) return "";
							return row[fieldIndex];
						});
						details.options.rows.push(newRow);
					});
				}
				// html we are creating
				var html = "";
				// assume no last group
				var lastGroup = "";
				// assume no group
				var group = "";
				// get any previously set value
				var setValue = control.attr("data-value");
				// at one time a second field value with no details, or codes, would set codes but we are now adding details, or options above we'll say no keys other than options is the same as no details
				var keycount = 0;
				if (details) {
					for (var k in details) {
						if (k != "options") keycount ++;
					}
				}
				var canSetCode = ($.isEmptyObject(details) || keycount == 0 || details.codes);
				// check any fields
				// loop rows
				for (var i in data.rows) {
					var row = data.rows[i];
					var text = "";
					var value = null;
					// assume not selected
					var selected = "";
					if (data.fields) {
						for (var j in data.fields) {
							if (data.fields[j]) {
								if (data.fields[j].toLowerCase() == "text") text = data.rows[i][j];
								if (data.fields[j].toLowerCase() == "value") value = data.rows[i][j];
								if (data.fields[j].toLowerCase() == "group") group = data.rows[i][j];
							}
						}
					}
					// if there wasn't a value in the field called "text" but there is something in the first column use that as text
					if (!text && row[0] != null) text = row[0];
					// if the value is null but there is something in the second column use that, but only if codes are on or there are no details which was the previous behaviour
					if (value == null && row[1] != null && canSetCode) value = row[1];
					// if we still don't have a seperate value
					if (value == null) {
						// make value an empty string
						value = "";
						// if there is a previously set value and it matches this text, set selected
						if (setValue && setValue == text) selected = " selected='true'";
					} else {
						// if there is a previously set value and it matches this value, set selected
						if (setValue && setValue == value) selected = " selected='true'";
						// wrap the value to set it as an attribute
						value = "value='" + value + "'";
					}
					// check for group and/or change
					if (group != lastGroup) {
						// close last group if need be
						if (lastGroup)html += "</optgroup>";	
						// open group if there is one
						if (group) html += "<optgroup label='" + group + "'>";						
					}
					// remember last group
					lastGroup = group;
					// append option
					html += "<option " + value + selected + ">" + text + "</option>";
				} // loop
				// close last group if need be
				if (lastGroup) html += "</optgroup>";
				// add html if there was some
				if (html) control.append(html);
				// remove any preset value
				control.removeAttr("data-value");
			}
		}
	}
}
        
	        ]]>
	    </setDataJavaScript>

	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    	    	    
	    <styles>
	        <style>
	            <name>Responsive container</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>	        
	        <style>
	            <name>Drop down control</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " select";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " select:hover";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " select:focus";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>	        
	    </styles>
	    
	  	<initJavaScript>
	    	<![CDATA[
// add the search / filter if required
if (details && details.filter) {

	// jQuery UI overrides to suport blank entries

	$.ui.autocomplete.prototype._renderItem = function(e, i) {
    	return $("<li>").append($("<div>").html(i.label)).appendTo(e);
    };
    
	$.ui.menu.prototype._isDivider = function(t) {
		return false;
	};
    
    // custom combo box

	$.widget( "custom.combobox", {

      _create: function() {
        this.wrapper = $("<span>").addClass("custom-combobox").insertAfter(this.element);
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ), value = selected.val() ? selected.text() : "";
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .attr( "maxLength", details.maxLength || "524288")
          .addClass( "custom-combobox-input form-control" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          }).on( "click", function() {
          	var input = $(this);
            // Close if already visible
            if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
              input.autocomplete( "widget" ).hide();
              return;
            }
            // if showing placeholder empty
            if (details.placeholder && details.placeholder == input.val()) input.val("").removeClass("placeholder");
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          }).on("focus", function(focus) {
            $(this).select();
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
            // fire the change event
            $( "#" + id).trigger("change");
          },
          autocompletechange: "_changed"
        });
        
        if (details.placeholder) this.input.val(details.placeholder).addClass("placeholder");
        
      },
      
      _createShowAllButton: function() {
        var input = this.input, wasOpen = false;
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .appendTo( this.wrapper )
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle" )
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .on( "click", function() {
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },
      
      _source: function(request,response) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response(this.element.children("option").map(function() {
          var text = $(this).text();
          var value = text;
          if (!text) {
            text = " ";
            value = "";
          }
          if ((!request.term || matcher.test(text)) && !(details.placeholder && details.placeholder == text)) {
            return {
              label: text,
              value: text,
              option: this
            };
          }
        }));
      },
      
      _changed: function( event, ui ) {
        // if there is no item selected
        if (!ui.item) {
	        // Search for a match (case-insensitive)
	        var value = this.input.val(), valueLowerCase = value.toLowerCase(), valid = false;
	        this.element.children( "option:not([disabled])" ).each( function() {
	          if ( $(this).text().toLowerCase() === valueLowerCase ) {
	            this.selected = valid = true;
	            return false;
	          }
	        });
	        // check valid
			if (valid) {
				// remove placeholder class
				if (details.placeholder) this.input.removeClass("placeholder");
			} else {
				// if custom values are off
				if (details.codes || !details.customValue) {
					// if there is a placeholder
					if (details.placeholder) {
						// add placeholder back
						this.input.val( details.placeholder );
						this.input.addClass("placeholder");
					} else {
						this.input.val( "" );
					}
					// Remove invalid value
					this.element.val( "" );
					this.input.autocomplete( "instance" ).term = "";
				}
				// fire the change event for the cleanup, or custom value
				$( "#" + id).trigger("change");
			}
	     }
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
      
    });
 
    $( "#" + id + "input" ).combobox();

}

// if there is a data-value attribute, update it on change
$( "#" + id + "input" ).on("change", function(ev){

	var i = $(this);
	
	if (i.is("[data-value]")) i.attr("data-value", i.val());

});

	    	]]>
	    </initJavaScript>

	   	<runtimeProperties>
	        <runtimeProperty>
	            <type>value</type>
	            <name>Value</name>
	            <setPropertyJavaScript>
	                <![CDATA[
var data = makeDataObject(data, field);
var control = $("#" + id).find("select");
if (data && data.rows && data.rows.length > 0) {
	// assume first value
	var value = data.rows[0][0];
	// if a field was provided
	if (field) {
		for (var i in data.fields) {
			if (data.fields[i] && field.toLowerCase() == data.fields[i].toLowerCase()) {
				value = data.rows[0][i];
				break;
			}
		}
	}
	
	// update the control value
	control.val(value);
	// also set the pre-set value in case the options arrive later
	control.attr("data-value", value);
	// look for jquery ui input
	var input = $("#" + id).find("input");
	// if we there was one
	if (input.length > 0) {
		// if codes, or customValues are not in use
		if (details.codes || !details.customValue) {
			// read the value back again which uses the select controls ability to check it has an option for the value
			value = control.val();
			// if there is a value
			if (value) {
				// find option with value
				var option = control.find("option[value='" + value + "']");
				// if we got one update value to text
				if (option.length > 0) value = option.text();
			}
		}
		// update the jquery input
		input.val(value);
	}
} else {
	// empty select value
	control.val("");
	// empty any jquery ui input
	$("#" + id).find("input").val("");
	// remove any pre-selected value
	control.removeAttr("data-value");
}
if (changeEvents) control.trigger("change");
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        <runtimeProperty>
	            <type>text</type>
	            <name>Text</name>
				<advanced>true</advanced>
	            <getPropertyFunction>
	                <![CDATA[
// if this is a searchable dropdown with a custom value
if (details && !details.codes && details.customValue) {
	// return the value from the search input
	return $("#" + id).find("input").val();
} else {
	// get the control
	var control = $("#" + id).find("select");
	// look for a set value
	var setValue = control.attr("data-value");
	// if the was one, and there is 1 child or fewer
	if (setValue && control.children().length <= 1) {
		// return the pre-set value
		return setValue;
	} else {
		// return the selected value
		return control.find("option:selected").text();
	}
}
	                ]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	    </runtimeProperties>
	    
	   	<formSetRunTimePropertyType>value</formSetRunTimePropertyType>
	    
	</control>
</controls>