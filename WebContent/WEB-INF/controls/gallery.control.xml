<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2021 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>gallery</type>
	    <name>Gallery</name>
	    <image>images/gallery.svg</image>
	    <helpHtml>Lets the user select a set of images and displays them.</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        	            
	        <property>
	            <key>images</key>
	            <name>Images</name>
	            <setConstructValueFunction>return []</setConstructValueFunction>
	            <changeValueJavaScript>galleryImages</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the images to be used. Each image can have its own caption. By default two Rapid logos are placed in as an example of use.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emptyText</key>
	            <name>Empty text</name>
	            <setConstructValueFunction>return "No images";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Text to display when there are no images present in the gallery.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onImageClick</key>
	            <name>On image click</name>
	            <setConstructValueFunction>return "preview";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
						return [["nothing","Do nothing"],["","Prompt to remove image"],["caption","Show image caption"],["preview","Show fullscreen"]];
					]]>
	            </getValuesFunction>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>What to do when an image in the gallery is clicked on.</helpHtml>
	        </property>
	        
	         <property>
	            <key>allowDelete</key>
	            <name>Allow delete</name>
	            <visible>true</visible>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkboxAllowDelete</changeValueJavaScript>
	            <helpHtml>Whether images can be deleted from the gallery when shown full screen.</helpHtml>
	        </property>
	        
	         <property>
	            <key>allowEdit</key>
	            <name>Allow edit</name>
	            <visible>true</visible>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkboxAllowEdit</changeValueJavaScript>
	            <helpHtml>Whether images can be edited from the gallery when shown full screen.</helpHtml>
	        </property>
	        
	         <property>
	            <key>gotCaptions</key>
	            <name>Got captions</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	        </property>
	        
	    </properties>
	    
	    <resources>
	    
	    	<resource>
	    		<type>javascriptFile</type>
	    		<contents>scripts_min/jquery-ui-1.12.1.min.js</contents>
	    	</resource>
	        
	        <resource>
	            <type>javascriptFile</type>
	            <contents>scripts_min/jquery-touchSwipe-1.6.18.min.js</contents>
	        </resource>
	    
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
div.gallery .galleryItem {
	cursor:pointer;
	vertical-align:top;
}

.galleryControlButton {
	background: black;
	outline: none;
	padding: 10px;
	margin: 10px;
	border-radius: 50%;
	border-color: white;
	width: 62px;
	text-align: center;
	z-index: 1;
}

.galleryControlButton i {
	font-size: 38px;
	color: white;
}

.galleryControlDirectionButton {
	background: transparent;
	outline: none;
	border: 0;
	font-size: 50px;
	margin-top: -50px;
	padding: 20px 15px;
	text-shadow: 2px 2px 4px black;
	color: white;
}

.bigGallery {
	background: #111;
	z-index: 1010;
}

.galleryItem {
	cursor: pointer;
}

.bigGallery .galleryItem {
	cursor: default;
	width: 100%;
	height: 100%;
	object-fit: contain;
	position: absolute;
	z-index: -1;
}

#tools button, #pallet button {
	transition: opacity 0.3s;
	opacity: 1;
}

#tools button:hover, #pallet button:hover {
	background: #444;
}

#tools button.faded, #pallet button.faded {
	opacity: 0.3;
	pointer-events: none !important;
}

@media only screen and (max-width: 500px) {
	
	#historyButtons, #btnRedo {
		clear: left;
	}
}

	                ]]>
	            </contents>
	        </resource>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[

var _oneDaysMilliseconds = 1000 * 60 * 60 * 24;
var _threeMonthsMilliseconds = _oneDaysMilliseconds * 30 * 3;

if (navigator.storage && navigator.storage.persist) {
	navigator.storage.persist();
}

indexedDB.open("imagesDB", 2)
.onupgradeneeded = function(versionChangeEvent) {
	var imagesDB = versionChangeEvent.target.result;
	if (!imagesDB.objectStoreNames.contains("imageStore")) {
		imagesDB.createObjectStore("imageStore", { keyPath: "filename" });
	}
	if (!imagesDB.objectStoreNames.contains("metadataStore")) {
		imagesDB.createObjectStore("metadataStore", { keyPath: "name" });
	}
};

indexedDB.open("imagesDB")
.onsuccess = function(requestEvent) {
	var metadataStore = requestEvent.target.result
	.transaction("metadataStore", "readwrite")
	.objectStore("metadataStore");
	metadataStore.get("dateLastDeletedOldObjects")
	.onsuccess = function(getRequest) {
		metadataStore.put({ name: "dateLastDeletedOldObjects", value: Date.now() });
		var dateLastDeletedOldObjects = getRequest.target.result;
		if (!dateLastDeletedOldObjects || dateLastDeletedOldObjects.value < Date.now() - _oneDaysMilliseconds) {
			IDBforEachObject(function(object) {
				if (object.accessedDate < Date.now() - _threeMonthsMilliseconds) {
					IDBdeleteByKey(object.filename);
				}
			});
		}
	};
};

function IDBforEachObject(objectCallback, completionCallback) {
	indexedDB.open("imagesDB")
	.onsuccess = function(requestEvent) {
		var transaction = requestEvent.target.result
		.transaction("imageStore", "readonly");
		transaction.objectStore("imageStore")
		.openCursor()
		.onsuccess = function(requestEvent) {
			var cursor = requestEvent.target.result;
			if (cursor) {
				if (objectCallback) objectCallback(cursor.value);
				cursor.continue();
			}
		};
		transaction.oncomplete = completionCallback;
	};
}

function IDBgetBestObject(criterion, callback) {
	var bestObject;
	indexedDB.open("imagesDB")
	.onsuccess = function(requestEvent) {
		var transaction = requestEvent.target.result
		.transaction("imageStore", "readonly");
		transaction.objectStore("imageStore")
		.openCursor()
		.onsuccess = function(requestEvent) {
			var cursor = requestEvent.target.result;
			if (cursor) {
				if (!bestObject || criterion(cursor.value, bestObject)) {
					bestObject = cursor.value;
				}
				cursor.continue();
			}
		};
		transaction.oncomplete = function() {
			callback(bestObject);
		};
	};
}

function IDBgetOldestObject(callback) {
	return IDBgetBestObject(function(one, another) {
		return one.date < another.date;
	}, callback);
}

function IDBgetNewestObject(callback) {
	return IDBgetBestObject(function(one, another) {
		return one.date > another.date;
	}, callback);
}

function IDBgetLeastUsedObject(callback) {
	return IDBgetBestObject(function(one, another) {
		return one.accessedDate < another.accessedDate;
	}, callback);
}

function IDBputObject(object, callback, retrys) {
	if (!object.createdDate) object.createdDate = Date.now();
	object.accessedDate = Date.now();
	indexedDB.open("imagesDB")
	.onsuccess = function(requestEvent) {
		var transaction = requestEvent.target.result
		.transaction("imageStore", "readwrite");
		transaction.oncomplete = callback;
		transaction.onerror = function(error) {
			if (retrys === undefined) retrys = 10;
			if (retrys > 0) {
				IDBgetLeastUsedObject(function(oldObject) {
					if (oldObject) {
						IDBdeleteByKey(oldObject.filename, function() {
							IDBputObject(object, callback, retrys - 1);
						});
					} else {
						callback(undefined);
					}
				});
			} else {
				callback(undefined);
			}
		};
		transaction.objectStore("imageStore")
		.put(object);
	};
}

function IDBgetByKey(key, callback) {
	indexedDB.open("imagesDB")
	.onsuccess = function(requestEvent) {
		if (requestEvent && requestEvent.target && requestEvent.target.result && requestEvent.target.result.objectStoreNames && requestEvent.target.result.objectStoreNames.length > 0) {
			requestEvent.target.result
			.transaction("imageStore", "readwrite")
			.objectStore("imageStore")
			.get(key)
			.onsuccess = function(getRequest) {
				var storedObject = getRequest.target.result;
				if (storedObject) {
					var newObject = Object.assign({}, storedObject);
					newObject.accessedDate = Date.now();
					IDBputObject(newObject);
				}
				if (callback) callback(storedObject, key);
			};
		} else {
			if (callback) callback(null, key);
		}
	};
}

function IDBdeleteByKey(key, callback) {
	if (key) {
		indexedDB.open("imagesDB")
		.onsuccess = function(requestEvent) {
			requestEvent.target.result
			.transaction("imageStore", "readwrite")
			.objectStore("imageStore")
			.delete(key)
			.onsuccess = callback;
		};
	} else if (callback) callback();
}

function addToImageControl(ev, control, filename, url, type) {
	
	var type = type || "img";
	
	// assume no image has been added
	var imageSet = false;

	// if we got a filename - images which we no longer have in storage will empty this
	if (filename) {
		// assume we're adding the image
		var addImage = true;
		// loop existing images
		control.find(".galleryItem").each( function() {
			// get image
			var img = $(this);
			// get this image filename attr
			var fileNameAttr = img.attr("data-filename");
			// if its the same as the filename
			if (fileNameAttr && fileNameAttr == filename) {
				// don't add this image
				addImage = false;
				// we're done
				return false;
			} // fileName check
			// get this image src
			var src = img.attr("src");
			// if there was a src
			if (src && filename) {
				// get position of source within url
				var pos = filename.indexOf(src);
				// if it was found at the end
				if (pos >= 0 && pos == filename.length - src.length) {
					// don't add this image
					addImage = false;
					// we're done
					return false;
				} // pos check
			} // src check
		});
	
		// only if we don't have the image alreay in there
		if (addImage) {
		
			// assume no crossOrigin (which allows editing on Rapid Mobile 2.5.1+)
			var crossOrigin = "";
			
			// if we're in Rapid Mobile 2.5.1+
			if (typeof _rapidmobile != "undefined" && _rapidmobile.getVersion() >= 2) {
			
				// if it starts with http
				if (filename.indexOf("http") == 0) {
		
					// if this is Android
					if (navigator.userAgent.indexOf("Android") > 0) {
		
						// if this is Android
						crossOrigin = " crossOrigin='http://127.0.0.1:8888'";
												
					} 			
					
				}
			
			}
				
			// add the correct type of element (img or video) with the url
			control.append("<" + type + " class='galleryItem' src='" + (url || filename) + "' data-filename='" + filename + "'" + crossOrigin + "/>");
			
			// get a reference to the element
			var galleryItem = control.children().last();
			
			// add an error listener to remove it if it doesn't load
			galleryItem.on("error", function() { 
				$(this).remove(); 
			});
			
			// remember we set an image in the gallery
			imageSet = true;
			
			// get the id
			var id = control.attr("id");
			
			// find the image element and add a click handler
			galleryItem.on(START_EV, function(ev) {
				var img = this;
				var details = details || window[id + "details"];
				if (details) {
					if (details.onImageClick == "preview") {
						Gallery_showImage(ev, id, img, details.allowDelete, false, details.allowEdit);
					} else if (details.onImageClick == "caption") {
						var index = $(ev.target).index();
						if (details.captions && details.captions[index]) alert(details.captions[index]);
					} else if (details.onImageClick != "nothing") {
						Gallery_removeImage(ev, id, img);
					}
				} else {
					Gallery_removeImage(ev, id, img);
				}				
			});
			// look for our custom imageAddedEvent handler for this control
			var imageAdded = window["Event_imageAdded_" + id];
			// fire it if we found it
			if (imageAdded) imageAdded(ev);
			// fire resize - usally for any dialogues
			setTimeout(function() { $(window).resize(); });
			
		} // image already there check
		
	} // url check
	
	// remove the no pictures message if set
	if (imageSet) control.find("span").remove();
	
} // function addToImageControl

function makeFilename(url) {

	// Split the data and base64 byte payload part
	var urlParts = url.split(",");
	// Further split the data part
	var dataParts = urlParts[0].split(";");
	// Obtain the file extension from the dataPart
	var fileExtension = dataParts[0].substring("data:image/".length);
	// Get the current date
	var date = new Date();
	// Make the date string for the file
	var dateString = date.getFullYear() + "" + padNumberWithZeros(date.getMonth() + 1, 2) + "" + padNumberWithZeros(date.getDate(),2) + "_" + padNumberWithZeros(date.getHours(),2) + "" + padNumberWithZeros(date.getMinutes(),2) + "" + padNumberWithZeros(date.getSeconds(),2) + "" + padNumberWithZeros(date.getMilliseconds(),3);
	// Make a file name with the dateString and extension
	return dateString + "." + fileExtension;

} // function makeFilename

function specifyUrl(filename) {
	
	var specifiedUrl = filename;
	
	// not if full url, or aggregator already
	if (filename.indexOf("http") != 0 && filename.indexOf("data:") != 0 && filename.indexOf(".jsp?") < 0) {
	
		// check Rapid Mobile
		if (typeof _rapidmobile == "undefined") {
		
			// add the path to this url from our app - check for ~, if not is pretty url use _appId
			if (window.location.pathname.indexOf("~") > -1) {
				
				specifiedUrl = window.location.origin + window.location.pathname.replace("~","") + "uploads/" + _appId + "/" + filename;
				
			} else {
				
				// This is the pretty url request
				var context = window.location.pathname.substring(0, window.location.pathname.toLowerCase().indexOf(_appId.toLowerCase()));
				if (!context || context.length < 1) context = "/";
				specifiedUrl = window.location.origin + context + "uploads/" + _appId + "/" + filename;
			}
		
		} else {
	
			// if this is Android
			if (navigator.userAgent.indexOf("Android") > 0) {

				// add a psuedo host for Rapid Mobile on Android
				specifiedUrl = "http://images/" + filename;
										
			} else {
			
				// add a psuedo host for Rapid Mobile on iOS
				specifiedUrl = window.location.origin + "/_images/" + filename;
			
			}

		}

	}
	
	return specifiedUrl;
	
} // function specifyUrl

var _gallerySwipeHandlers = {};

function Gallery_removeImage(ev, id, galleryImg) {
	// confirm
	if (confirm("Remove image?")) {
	    // remove the image
		if (galleryImg) galleryImg.remove();
		// get the image
		var img = $(".bigGallery .galleryItem").last();
		// use the event target if we didn't get one from the big gallery
		if (img.length == 0) img = $(ev.target);
		// check if Rapid Mobile is present
		if (typeof _rapidmobile == "undefined") {
			// remove from storage
			Gallery_removeImageFromStorage(id, img.attr("data-filename"));
		} else {
			// remove from Rapid Mobile
			_rapidmobile.removeImage(id, img.attr("src"));
		} 
		// remove it
		img.remove();
		// get the gallery control
		var control = $("#" + id);
		// if there are no images left in the gallery
		if (control.find(".galleryItem").length == 0) {
			// get the details
			var details = window[id + "details"];
			// if there were some details and an emptyText add it to the control
			if (details && details.emptyText) control.append("<span>" + details.emptyText + "</span>");
		}
		// look for our custom imageRemoved handler for this control
		var imageRemoved = window["Event_imageRemoved_" + id];
		// fire it if we found it
		if (imageRemoved) imageRemoved(ev);
		// resize - usually for any dialogues
		setTimeout(function() { $(window).resize(); });
		
		return true;
	} else {
		return false;
	}
}

function Gallery_removeImageFromStorage(id, filename) {
	IDBdeleteByKey(filename);
}

function setNextPrevButton(currentImage, prevButton, nextButton) {
	
	prevButton.hide();
	nextButton.hide();
	
	if (currentImage.next(".galleryItem").length) nextButton.show();
	
	if (currentImage.prev(".galleryItem").length) prevButton.show();
	
}

function setNextPrevImgAndButton(currentImage, direction, prevButton, nextButton) {
	
	if (direction == "next") {
		
		var filename = currentImage.attr("data-filename");
		var currentGalleryImage = $(".gallery .galleryItem[data-filename='" + filename + "']");
		var nextImage = currentGalleryImage.next(".galleryItem");
		
		if (nextImage.length) {
			
			// Show the next img sibling of the given image
			var clone = nextImage.clone();
			$(".bigGallery").append(clone);
			// Hide this image
			currentImage.fadeOut(500, function() { currentImage.remove(); });
			clone.hide();
			clone.show("slide", {direction:"right"}, 500);
			setNextPrevButton(nextImage, prevButton, nextButton);
		} 
		
	} else {
		
		var filename = currentImage.attr("data-filename");
		var currentGalleryImage = $(".gallery .galleryItem[data-filename='" + filename + "']");
		var prevImage = currentGalleryImage.prev(".galleryItem");
		
		if (prevImage.length) {
			
			// Show the previous img sibling of the given image
			var clone = prevImage.clone();
			$(".bigGallery").append(clone);
			// Hide this image
			currentImage.fadeOut(500, function() { currentImage.remove(); });
			clone.hide();
			clone.show("slide", {direction:"left"}, 500, function() { currentImage.remove(); });
			setNextPrevButton(prevImage, prevButton, nextButton);
		} 
	
	}
	
}        	

// pointer events support from http://labs.rampinteractive.co.uk/touchSwipe/demos/index.html
var SUPPORTS_TOUCH = 'ontouchstart' in window;
var SUPPORTS_POINTER_IE10 = window.navigator.msPointerEnabled && !window.PointerEvent && !SUPPORTS_TOUCH;
var SUPPORTS_POINTER = (window.PointerEvent || window.navigator.msPointerEnabled) && !SUPPORTS_TOUCH;

var useTouchEvents = (SUPPORTS_TOUCH || SUPPORTS_POINTER || !options.fallbackToMouseEvents);
var START_EV = useTouchEvents ? (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerDown' : 'pointerdown') : 'touchstart') : 'mousedown';
var MOVE_EV = useTouchEvents ? (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerMove' : 'pointermove') : 'touchmove') : 'mousemove';
var END_EV = useTouchEvents ? (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerUp' : 'pointerup') : 'touchend') : 'mouseup';
var LEAVE_EV = useTouchEvents ? (SUPPORTS_POINTER ? 'mouseleave' : null) : 'mouseleave'; //we manually detect leave on touch devices, so null event here
var CANCEL_EV = (SUPPORTS_POINTER ? (SUPPORTS_POINTER_IE10 ? 'MSPointerCancel' : 'pointercancel') : 'touchcancel');

// a function to check the map of handlers and call any number of functions
function galleryHandleSwipe(event, direction, distance, duration, fingers, fingerData, target, ev) {
	// get the handlers for a target
	var handlers = _gallerySwipeHandlers[target];
	// loop them
	for (var i in handlers) {
		// get the hanlder
		var handler = handlers[i];
		// if the directions match and either the fingers match too, or are all/any, run the function!
		if (handler.direction == direction && (handler.fingers == fingers || handler.fingers == 0)) handler["function"](ev);
	}
}

var _galleryPastDrawings = [];
var _galleryFutureDrawings = [];


function Gallery_showImage(ev, id, galleryItem, allowDelete, openEditor, allowEdit) {
	
	$(document.body).css({overflow:"hidden", "touch-action":"none"});
	$(window).css({overflow:"hidden", "touch-action":"none"});
	
	// get the image
	var galleryItem = $(galleryItem);
	
	// look for the big gallery div
	var bigGallery = $(".bigGallery");
	
	// if we couldn't find one create
	if (!bigGallery[0]) {
		
		// Create a new gallery
		bigGallery = $("body").append("<div class='bigGallery'></div>").find("div.bigGallery");
		bigGallery.css({"position":"fixed", "top":0, "left":0, "right":0, "bottom":0});
		
		// buttons to the gallery
		var btnPrev = bigGallery.append("<button id='btnPrev' class='galleryControlDirectionButton' style='position:absolute; left:0; top:50%;'><i class='fas fa-chevron-left'></i></button>").find("#btnPrev");
		var btnNext = bigGallery.append("<button id='btnNext' class='galleryControlDirectionButton' style='position:absolute; right:0; top:50%;'><i class='fas fa-chevron-right'></i></button>").find("#btnNext");
		
		var tools = bigGallery.append("<div id='tools' style='position:absolute; top:0; left:0; width:100%;'>").find("#tools").css({"text-align":"center", "color":"#FFF", "z-index":"1", "pointer-events": "none"});
		var btnDelete = tools.append("<button id ='btnDeleteImage' class='galleryControlButton' style='float: left;'><i class='fas fa-trash'></i></button>").find("#btnDeleteImage");
		var btnClose = tools.append("<button id ='btnCloseGallery' class='galleryControlButton' style='float: right;'><i class='fas fa-times'></i></button>").find("#btnCloseGallery");
		if (galleryItem.is("img")) {
			var btnEdit = tools.append("<button id='btnEdit' class='galleryControlButton' style='float: right;'><i class='fas fa-pen'></i></button>").find("#btnEdit");
			var btnSave = tools.append("<button id='btnSave' class='galleryControlButton' style='float: right; display:none'><i class='fas fa-check'></i></button>").find("#btnSave");
		}
		$(tools).find("button").css({"pointer-events": "all"});
		
		// design-time requested no edit and no delete
		if (allowDelete == false) btnDelete.hide();
		if (allowEdit == false) btnEdit.hide();
		
		// also hide the edit button if rapid mobile is present, but it doesn't have the updateImage method
		if (typeof _rapidmobile != "undefined" && !_rapidmobile.updateImage) btnEdit.hide();
	
		// Add click listeners to the buttons
		btnPrev.on(START_EV,function() {
			// Get the currently shown img object in the big gallery
			var currentImage = $(".bigGallery .galleryItem").last();
			// Display the previous image, and decide whether next/prev button should be shown
			setNextPrevImgAndButton(currentImage, "previous", btnPrev, btnNext);
			
		});
		
		btnNext.on(START_EV, function() {
			// Get the currently shown img object in the big gallery
			var currentImage = $(".bigGallery .galleryItem").last();
			// Display the previous image, and decide whether next/prev button should be shown
			setNextPrevImgAndButton(currentImage, "next", btnPrev, btnNext);
			
		});
		
		btnClose.on(START_EV, function() {
			$(document.body).css({overflow:"unset", "touch-action":"auto"});
			$(window).css({overflow:"unset", "touch-action":"auto"});
			bigGallery.css({opacity:"0"});
			setTimeout(function() {
				// Hide the gallery
				bigGallery.remove();
			}, 200);
		});
		
		btnDelete.on(START_EV, function(ev) {
			$(document.body).css({overflow:"unset", "touch-action":"auto"});
			$(window).css({overflow:"unset", "touch-action":"auto"});
		
			// Remove the current image from the gallery
			var currentImage = $(".bigGallery .galleryItem").last();
			var filename = currentImage.attr("data-filename");
			var currentGalleryImage = $(".gallery .galleryItem[data-filename='" + filename + "']");
			var removed = Gallery_removeImage(ev, id, currentGalleryImage);
			if (removed) bigGallery.remove();
			
		});
		
		if (btnEdit) {
			btnEdit.on(START_EV, function(ev) {
				btnEdit.hide();
				editImage(bigGallery);
				btnSave.show();
			});
			if (openEditor) setTimeout(function() { $("#btnEdit").click(); });
			
			btnSave.on(START_EV, function(ev) {
				btnSave.hide();
				var currentImage = $(".bigGallery .galleryItem").last();
				if (openEditor) {
					bigGallery.remove();
				} else {
					var filename = currentImage.attr("data-filename");
					var currentGalleryImage = $(".gallery .galleryItem[data-filename='" + filename + "']");
					if (currentGalleryImage.prevAll().length) btnPrev.show();
					if (currentGalleryImage.nextAll().length) btnNext.show();
					btnEdit.show();
				}
				gallerySaveEdit(bigGallery, currentImage);
				$(".galleryEditor").remove();
			});
		}
		
		// Include swipe actions, only if global has been set by mobile action and this is a mobile browser
		if (_gallerySwipeHandlers && /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
		
			var direction = "left";
			var fingers = 1;
			var target = bigGallery;
			
			$(target).swipe({ 
				swipe:function(event, direction, distance, duration, fingers, fingerData) { 
					galleryHandleSwipe(event, direction, distance, duration, fingers, fingerData, target, ev); 
				},fingers:'all'
			});
		  	
		  	_gallerySwipeHandlers[target] = [];
		  	
		  	// Create the functions, that handles what should happen when there is a swipe
		  	var swipeLeftHandler = function(ev) { 
		  		btnNext.trigger(START_EV);
		  	};
		  	
		  	var swipeRightHandler = function(ev) { 
		  		btnPrev.trigger(START_EV);
		  	};
		  	
		  	// Add the handlers to the map
		  	_gallerySwipeHandlers[target].push({direction:"left", fingers:1, "function":swipeLeftHandler});
			_gallerySwipeHandlers[target].push({direction:"right", fingers:1, "function":swipeRightHandler});
		
		}
		
	}
	
	// Empty the big gallery
	// Clear the images in the gallery
	bigGallery.children(".galleryItem").each(function() {
		// Remove this object
		$(this).remove();
	});
	
	// Get a reference of the main gallery
	var mainGallery = galleryItem.parent();
	
	// set an attribute for the source gallery
	bigGallery.attr("data-gallery", mainGallery.attr("id"));
	
	// Move galleryItem into bigGallery
	var selectedImage = galleryItem.clone();
	selectedImage.attr("controls", "controls");
	bigGallery.append(selectedImage);
	
	// get the index
	var index = galleryItem.index();
	// get the details
	var details = window[id + "details"];
	// if we've got the details
	if (details && details.captions && details.captions.length > index) {					
		// show the caption
		bigGallery.append(details.captions[index]);
	}
	
	// Now show the gallery
	bigGallery.show();
	
	// Initialise the next/prev button - depending on whether there are more than one img in the gallery
	setNextPrevButton(galleryItem, $("#btnPrev"), $("#btnNext"));
}

// create objects with functions only once and use them as prototypes
ImageDrawing = {
	draw: function(context) {
		context.drawImage(this.img, 0, 0);
	}
};

function newImageDrawing(img) {
	var drawing = Object.create(ImageDrawing);
	drawing.img = img;
	return drawing;
}

var StrokeDrawing = {
	color: "#000",
	width: 1,
	draw: function(context) {
		context.strokeStyle = this.color;
		context.lineWidth = this.width;
		context.beginPath();
		context.moveTo(this.x1, this.y1)
		context.lineTo(this.x2, this.y2);
		context.stroke();
	}
};

function newStrokeDrawing(x1, y1, x2, y2) {
	var drawing = Object.create(StrokeDrawing);
	drawing.x1 = x1;
	drawing.y1 = y1;
	drawing.x2 = x2;
	drawing.y2 = y2;
	return drawing;
}

var GroupDrawing = {
	draw: function(context) {
		this.drawings.forEach(function(drawing) {
			drawing.draw(context);
		});
	},
	push: function(drawing) {
		this.drawings.push(drawing);
	}
};

function newGroupDrawing() {
	var drawing = Object.create(GroupDrawing);
	drawing.drawings = [];
	return drawing;
}

function editImage(gallery) {
	
	var touch = false;
	
	$("#btnPrev, #btnNext").hide();
	
	var currentImage = gallery.find("img.galleryItem");
	var horizontalResolution = currentImage[0].naturalWidth;
	var verticalResolution = currentImage[0].naturalHeight;
	
	var canvas = document.createElement("canvas");
	canvas.width = horizontalResolution;
	canvas.height = verticalResolution;
	$(canvas).css({"width":"100%", "height":"100%", "object-fit":"contain", "cursor":"crosshair"});
	var context = canvas.getContext('2d');
	
	var color = "#000";
	
	var pallet = gallery.append("<div id='pallet' class='galleryEditor' style='position:absolute; bottom:0; left:0; width:100%;'>").find("#pallet").css({"text-align":"center", "color":"#FFF", "z-index":"1", "pointer-events": "none"});
	var btnBlack = pallet.append("<button id='btnBlack' class='galleryControlButton' data-color='#000'></button>").find("#btnBlack").css("background","#000");
	var btnWhite = pallet.append("<button id='btnWhite' class='galleryControlButton' data-color='#FFF'></button>").find("#btnWhite").css({"background":"#FFF", "color":"#000"});
	var btnRed = pallet.append("<button id='btnRed' class='galleryControlButton' data-color='#F00'></button>").find("#btnRed").css("background","#F00");
	var btnGreen = pallet.append("<button id='btnGreen' class='galleryControlButton' data-color='#0C0'></button>").find("#btnGreen").css("background","#0C0");
	var btnBlue= pallet.append("<button id='btnBlue' class='galleryControlButton' data-color='#00F'></button>").find("#btnBlue").css("background","#00F");
	pallet.find("button").css({"pointer-events": "all"});
	
	var allColorButtons = $("#btnBlack, #btnWhite, #btnRed, #btnGreen, #btnBlue");
	
	allColorButtons.css({"height": "40px", "width": "40px"});
	
	var selectedColorShadow = "0 0 0 2px #000, 0 0 0 4px #FFF, 0 2px 8px 4px #000";
	$(btnBlack).css("box-shadow", selectedColorShadow);
	
	allColorButtons.on(START_EV, function() {
		color = $(this).attr("data-color");
		allColorButtons.css("box-shadow", "none");
		$(this).css("box-shadow", selectedColorShadow);
	});
	
	function canvasIsNarrower() {
		return (horizontalResolution / verticalResolution) < (canvas.offsetWidth / canvas.offsetHeight);
	}
	
	function scale() {
		return canvasIsNarrower() ?
			verticalResolution / canvas.offsetHeight :
			horizontalResolution / canvas.offsetWidth;
	}
	
	function scaleX(dimension) {
		var imageWidth = horizontalResolution / scale();
		var canvasOffset = (canvas.offsetWidth - imageWidth) / 2;
		return (dimension - canvasOffset) * scale();
	}
	
	function scaleY(dimension) {
		var imageHeight = verticalResolution / scale();
		var canvasOffset = (canvas.offsetHeight - imageHeight) / 2;
		return (dimension - canvasOffset) * scale();
	}
	
	_galleryPastDrawings = [];
	_galleryFutureDrawings = [];
	
	var imageDrawing = newImageDrawing(currentImage[0]);
	imageDrawing.draw(context);
	_galleryPastDrawings.push(imageDrawing);
	
	StrokeDrawing.width = verticalResolution / 200;
	
	function startListener(x, y) {
		
		var x = scaleX(x);
		var y = scaleY(y);
		
		$("#tools button, #pallet button").addClass("faded");
		
		var groupDrawing = newGroupDrawing();
		
		function moveListener(newX, newY) {
			
			var newX = scaleX(newX);
			var newY = scaleY(newY);
			
			var strokeDrawing = newStrokeDrawing(x, y, newX, newY);
			strokeDrawing.color = color;
			strokeDrawing.draw(context);
			groupDrawing.push(strokeDrawing);
			
			x = newX;
			y = newY;
		}
		
		function mousemoveListener(mousemove) {
			moveListener(mousemove.offsetX, mousemove.offsetY);
		}
		function touchmoveListener(touchmove) {
			moveListener(touchmove.targetTouches[0].clientX, touchmove.targetTouches[0].clientY);
		}
		
		if (touch) $(window).on("touchmove", touchmoveListener);
		if (!touch) $(window).on("mousemove", mousemoveListener);
	
		function endListener() {
			if (!touch) $(window).off("mousemove", mousemoveListener);
			if (touch) $(window).off("touchmove", touchmoveListener);
			
			$("#tools button, #pallet button").removeClass("faded");
			
			_galleryPastDrawings.push(groupDrawing);
			btnUndo.show();
			_galleryFutureDrawings = [];
			btnRedo.hide();
			
		}
		
		$(window).one(END_EV, endListener);
	}
	
	$(canvas).on("touchstart", function(touchstart) {
		touch = true;
		startListener(touchstart.targetTouches[0].clientX, touchstart.targetTouches[0].clientY);
	});
	
	$(canvas).on("mousedown", function(mousedown) {
		if (!touch) startListener(mousedown.offsetX, mousedown.offsetY);
	});
	
	var historyButtons = $("#tools").append("<div id='historyButtons' class='galleryEditor' style='float: left;'>").find("#historyButtons");
	var btnUndo = $("#historyButtons").append("<button id='btnUndo' class='galleryControlButton galleryEditor' style='float: left;'><i class='fas fa-undo'></i></button>").find("#btnUndo");
	var btnRedo = $("#historyButtons").append("<button id='btnRedo' class='galleryControlButton galleryEditor' style='float: left;'><i class='fas fa-redo'></i></button>").find("#btnRedo");
	$(tools).find("button").css({"pointer-events": "all"});
	
	btnUndo.hide();
	btnRedo.hide();
	
	function undo() {
		if (_galleryPastDrawings.length > 1) {
			var undoneDrawing = _galleryPastDrawings.pop();
			_galleryFutureDrawings.push(undoneDrawing);
			_galleryPastDrawings.forEach(function(drawing) {
				drawing.draw(context);
			});
		}
	}
	
	function redo() {
		if (_galleryFutureDrawings.length > 0) {
			var redoneDrawing = _galleryFutureDrawings.pop();
			_galleryPastDrawings.push(redoneDrawing);
			redoneDrawing.draw(context);
		}
	}
	
	btnUndo.on(START_EV, function() {
		undo();
		if (_galleryPastDrawings.length <= 1) btnUndo.hide();
		if (_galleryFutureDrawings.length > 0) btnRedo.show();
	});
	btnRedo.on(START_EV, function() {
		redo();
		if (_galleryFutureDrawings.length <= 0) btnRedo.hide();
		if (_galleryPastDrawings.length > 1) btnUndo.show();
	});
	
	currentImage.hide();
	gallery.append(canvas);
}

function gallerySaveEdit(gallery, currentImage) {

	// get the gallery canvas
	var canvas = gallery.find("canvas")[0];
	
	// avoid updates if there are no changes to be saved
	if (_galleryPastDrawings.length > 1) {
	
		// get the base64 image data from the canvas
		var dataURL = canvas.toDataURL();
		
		// get the image file name
		var filename = currentImage.attr("data-filename");
				
		// if Rapid Mobile is not present
		if (typeof _rapidmobile == "undefined") {
		
				// update both gallery and bigGallery images with new dataURL
				$(".galleryItem[data-filename='" + filename + "']").each(function(_, img) {
					img.src = dataURL;
				});
		
			// save the image data to IndexedDB
			IDBputObject({ filename: filename, url: dataURL });
			
		} else {
			
			// present and it has the update method call to put the user image edit on the device
			if (_rapidmobile.updateImage) {
			
				// update the image on the device
				_rapidmobile.updateImage(filename, dataURL);
				
				// append the file name with a random parameter so it re-fetches - this is required as the Rapid Mobile updater has to work with files as source (not base 64)
				var refetchFilename = filename + "?r=" + Math.floor(Math.random() * 1000);
			
				// update both gallery and bigGallery images so it re-fetches the file, but hopefully just once
				$(".galleryItem[data-filename='" + filename + "']").each(function(_, img) {
					img.src = refetchFilename;
				});
				
			}

		}	
	
	} // edit check
	
	canvas.remove();
	currentImage.show();
}

	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	   	        
var html = "<div id='" + this.id + "' class='gallery'>";
if (this.images && this.images.length > 0) {
  for (var i in this.images) {
  	var url = this.images[i].url;
  	if (url.indexOf("/") < 0) url = "applications/" + _version.id + "/" + _version.version + "/" + url
    html += "<img class='galleryItem' src='" + url + "'/>";
  }
} else {
	html += "<span>" + this.emptyText + "</span>";
}
html += "</div>";
return html;
	        ]]>
	    </getHtmlFunction> 
	    	    	    
	    <updateChildObjects>true</updateChildObjects>
	    
	    <getDetailsFunction>
	        <![CDATA[
var details = {type:"gallery", onImageClick: this.onImageClick, emptyText: this.emptyText, allowDelete: this.allowDelete != false, allowEdit: this.allowEdit != false};
if (this.images && this.gotCaptions) {
	details.captions = [];
	for (var i in this.images) {
		details.captions.push(this.images[i].caption);
	}
} 	        
return details;	        	   	
	   	    ]]>
	   	</getDetailsFunction>
	    	    	    
	    <getDataFunction>
	        <![CDATA[
var data = {fields:["url"],rows:[]};
var control = $("#" + id);
var images = control.children(".galleryItem");
images.each( function(i) {
	var url = $(this).attr("data-filename");
	if (!url) url = $(this).attr("src");
	data.rows.push([url]);
});
return data;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
// get the control	 
var control = $("#" + id);
// check we have some data 
if (data) {
	// make a proper data object	
	data = makeDataObject(data, field);
	// if it has rows
	if (data.rows) {	
		// assume image not set
		var imageSet = false;
		// look for url or urls in the fields or use the first column if not found	
		var urlIndex = 0;
		if (data.fields) {
			for (var i in data.fields) {
				if ((field && data.fields[i] == field) || data.fields[i] == "url" || data.fields[i] == "urls") {
					urlIndex = i;
					break;
				}
			}
		}			
		// loop the rows
		for (var i in data.rows) {
		
			// make sure there is something to set
			if (data.rows[i][urlIndex]) {

				// get the urls
				var urls = data.rows[i][urlIndex];
				
				// if urls do not start with data allow comma seperated list of urls in single field too
				if (urls.indexOf("data:") == 0) {
					urls = [urls];
				} else {
					urls = data.rows[i][urlIndex].split(",");
				}
				
				// loop the urls
				for (var j in urls) {
 				
					// get the url
					var url = urls[j];
					
					// if we're in Rapid Mobile
					if (typeof _rapidmobile != "undefined") {
					
						// if it doesn't start with http or data
						if (url.indexOf("http") != 0 && url.indexOf("data:") != 0) {
				
							// if this is Android
							if (navigator.userAgent.indexOf("Android") > 0) {
				
								// add a psuedo host for Rapid Mobile on Android
								url = "http://images/" + url;
														
							} else {
							
								// add a psuedo host for Rapid Mobile on iOS
								url = window.location.origin + "/_images/" + url;
							
							}							
							
						}
					
					}
				
					// url type check
					if (url.indexOf("data:") == 0) { // if url is a data url
					
						var imageRecord = { url: url };
 						imageRecord.filename = makeFilename(url);
 						IDBputObject(imageRecord);
 						
 						var type = url.indexOf("data:video") == 0 ? "video" : "img";
 						
						addToImageControl(ev, control, imageRecord.filename, imageRecord.url, type);
						
					} else if (url.indexOf("http") == 0) { // external or mobile image
									
						addToImageControl(ev, control, url);
						
					} else { // if url is a filename
						
						IDBgetByKey(url, function(imageRecord, key) {
							
							if (imageRecord) { // if an image is stored by this filename
								
								var type = imageRecord.url.indexOf("data:video") == 0 ? "video" : "img";
								
								addToImageControl(ev, control, imageRecord.filename, imageRecord.url, type);
								
							} else { // if url is for the rapid logo etc.
								
								var filename = key;
								var specifiedUrl = specifyUrl(filename);
								
								var xhr = new XMLHttpRequest();
								xhr.onload = function() {
									var reader = new FileReader();
									reader.onloadend = function() {
										var dataUrl = reader.result;
										if (dataUrl.indexOf("data:image") === 0) {
											addToImageControl(ev, control, filename, dataUrl);
										} else {
											addToImageControl(ev, control, filename, filename);
										}
									};
									reader.readAsDataURL(xhr.response);
								};
								xhr.onerror = function() {
									addToImageControl(ev, control, filename, specifiedUrl);
								};
								xhr.open('GET', specifiedUrl);
								xhr.responseType = 'blob';
								xhr.send();
							}
						});
					
					} // url type check
				
				} // urls loop
				
			} // url index check
 			
		} // row loop
	} 
} else {
	// no data so remove all images
	control.find(".galleryItem").remove();
	// find the message span
	var span = control.find("span");
	// if there wasn't one, add one with the message
	if (!span[0]) control.append("<span>" + details.emptyText + "</span>");
}
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>imageAdded</type>
	            <name>Imaged added</name>
	        </event>
	        <event>
	            <type>imageRemoved</type>
	            <name>Image removed</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Gallery</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Items</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .galleryItem";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Images</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " img";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Videos</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " video";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	   	<initJavaScript>
	        <![CDATA[
$("#" + id).children(".galleryItem").on(START_EV, function(ev) {
	var details = window[id + "details"];
	if (details) {
		// changes here need to be replicated in setData
		if (details.onImageClick == "preview") {
			Gallery_showImage(ev, id, this, details.allowDelete, false, details.allowEdit);
		} else if (details.onImageClick == "caption") {
			var index = $(ev.target).index();
			if (details.captions && details.captions[index]) alert(details.captions[index]);
		} else if (details.onImageClick != "nothing") {
			Gallery_removeImage(ev, id);			
		}
	}		
});	        
	        ]]>	        	       	        
	    </initJavaScript>
	    
	   	<runtimeProperties>
	   	    <runtimeProperty>
	   	        <type>imageCount</type>
	   	        <name>Image count</name>
	   	        <getPropertyFunction>
			        <![CDATA[
return $("#" + id).children(".galleryItem").length;     
			        ]]>	  	   	            
	   	        </getPropertyFunction>
	   	    </runtimeProperty>
	   	    <runtimeProperty>
	   	        <type>urls</type>
	   	        <name>Urls</name>
	   	        <getPropertyFunction>
			        <![CDATA[
var urls = "";
var control = $("#" + id);
var images = control.children(".galleryItem");
images.each( function(i) {
	var url = $(this).attr("data-filename");
	if (!url) url = $(this).attr("src");
	if (url) {
		if (url.indexOf("_images/") > 0) url = url.substr(url.indexOf("_images/") + 8);
		var uploadPath = "/uploads/" + _appId + "/";
		if (url.indexOf(uploadPath) > 0) url = url.substr(url.indexOf(uploadPath) + uploadPath.length);
		urls += url.replace("http://cache/","").replace("http://images/","");
		if (i < images.length - 1) urls += ",";
	}
});
return urls; 
			        ]]>	  	   	            
	   	        </getPropertyFunction>
	   	    </runtimeProperty>
	   	</runtimeProperties>
	    	    
	</control>
</controls>