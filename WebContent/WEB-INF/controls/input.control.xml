<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2021 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>input</type>
	    <name>Input box</name>
	    <image>images/input_box.svg</image>
	    <category>Form controls</category>
	    <helpHtml>A single-line text box that accepts text, numbers, email addresses, or passwords.</helpHtml>
	    
	    <addToNewApplications>true</addToNewApplications>
	    <addToNewResponsiveApplications>false</addToNewResponsiveApplications>
	          
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>value</key>
	            <name>Value</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Pre-sets the contents of the input field.</helpHtml>
	        </property>
	        
	        <property>
	            <key>placeholder</key>
	            <name>Placeholder</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets a faded message so users can better understand what to type in the input box. Gets erased when typing begins.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxLength</key>
	            <name>Character limit</name>
	            <setConstructValueFunction>return 100;</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the character limit of the input box. Does not apply to the number input type.</helpHtml>
	        </property>
	        
	        <property>
	            <key>controlType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "N";</setConstructValueFunction>
	            <changeValueJavaScript>inputControlType</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["N","Normal"],["L","Large"],["Num","Number"],["Tel","Telephone number"],["Eml","Email"],["P","Password"],["R","Readonly"]];
					]]>
	            </getValuesFunction>
	            <!-- refresh properties is done by propeties_inputControlType -->
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the type of input box. Large enables the size to be freely altered, number restricts entry to only numbers, password changes the text to blobs and readonly sets the input field to disabled. Telephone and email will apply additional validation rules on the input. </helpHtml>
	        </property>
	        
	        <property>
	            <key>autoHeight</key>
	            <name>Auto height</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>inputAutoHeight</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Whether the control's height should automatically adjust to display all of its contents.</helpHtml>
	        </property>
	        
	        <property>
	            <key>autocomplete</key>
	            <name>Autocomplete</name>
	            <visible>true</visible>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return ["", "on", "off", "name", "bday", "sex", "language", "email", "tel", "url", "street-address", "country", "postal-code", "organization", "username", "new-login", "new-password", "current-login", "current-password"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The autocomplete suggestion the browser will offer.</helpHtml>
	        </property>
	               
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object	
var value = "";
if (this.value) value = this.value  

var autocompleteHtml = this.autocomplete ? " autocomplete='" + this.autocomplete + "'" : "";

switch (this.controlType) {
	case "N" : return "<input id='" + this.id + "' name='" + this.id + "' value='" + escapeApos(value) + "' type='text'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='input" + getStyleClasses(this) + "'></input>";
	case "L" : return "<textarea id='" + this.id + "' name='" + this.id + "' class='input" + getStyleClasses(this) + (this.autoHeight ? " autoheight" : "")  + "' " + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + (this.placeholder ? " placeholder='" + escapeApos(this.placeholder) + "'" : "") + autocompleteHtml + ">" + value + "</textarea>";
	case "Num" : return "<input id='" + this.id + "' name='" + this.id + "' value='" + escapeApos(value) + "' type='number'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='input" + getStyleClasses(this) + "'></input>";
	case "Tel" : return "<input id='" + this.id + "' name='" + this.id + "' value='" + escapeApos(value) + "' type='tel'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='input" + getStyleClasses(this) + "'></input>";
	case "Eml" : return "<input id='" + this.id + "' name='" + this.id + "' value='" + escapeApos(value) + "' type='email'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='input" + getStyleClasses(this) + "'></input>";
	case "P" : return "<input id='" + this.id + "' name='" + this.id + "' value='" + escapeApos(value) + "' type='password'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='input" + getStyleClasses(this) + "'></input>";
	case "R" : return "<input id='" + this.id + "' name='" + this.id + "' value='" + escapeApos(value) + "' type='text'" + (this.maxLength ? " maxlength='" + this.maxLength + "'" : "") + " " + (this.placeholder ? " placeholder='" + this.placeholder + "'" : "") + autocompleteHtml + " class='input" + getStyleClasses(this) + "' readonly='readonly'></input>";
}      

	        ]]>
	    </getHtmlFunction> 
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).val();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var control = $("#" + id);
var value = "";
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields && data.fields.length > 0) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			if (data.rows[0][0] != null && data.rows[0][0] !== undefined) {
				value = data.rows[0][0];
			} 			
		}
	} 
} 
control.val(value);
if (control.is(".autoheight")) textarea_autoheight_size(control, true);
if (changeEvents) control.trigger("change");    
			]]>
	    </setDataJavaScript>
	    
	    <events>
	         <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>keydown</type>
	            <name>Key down</name>
	        </event>
	        <event>
	            <type>keyup</type>
	            <name>Key up</name>
	        </event>
	        <event>
	            <type>input</type>
	            <name>Input</name>
	        </event>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>	  	
	        <event>
	            <type>blur</type>
	            <name>Blur</name>
	        </event>	              	        
	    </events> 
	    
	    <styles>
	        <style>
	            <name>Input box</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ":hover";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ":focus";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	</control>
</controls>