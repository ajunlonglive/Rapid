<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2022 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>list</type>
	    <name>List</name>
	    <image>images/list.svg</image>
	    <helpHtml>A verticle list of options that can be selected with a click.</helpHtml>
	    
	    <addToNewApplications>false</addToNewApplications>
	        
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    <canValidate>true</canValidate>
	    <validationProperty>value</validationProperty>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>codes</key>
	            <name>Codes</name>
	            <visible>false</visible>
	        </property>
	                   
	        <property>
	            <key>options</key>
	            <name>Options</name>
	            <setConstructValueFunction>return [{value:"", text:"Value 1"}, {value:"", text:"Value 2"}, {value:"", text:"Value 3"}];</setConstructValueFunction>
	            <changeValueJavaScript>options</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Defines what the list will contain. An option for enabling codes can also be used. Codes allow for more precise visibility and validation conditions.</helpHtml>
	        </property>
	        
	        <property>
	            <key>value</key>
	            <name>Initial value</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Selects one of the options from the list as its initial value.</helpHtml>
	        </property>
	        	        
	        <property>
	            <key>header</key>
	            <name>Header text</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the title of the columns.</helpHtml>
	        </property>
	        
	        <property>
	            <key>multi</key>
	            <name>Multi select</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Allows multiple selections when choosing options in the list.</helpHtml>
	        </property>
	        
	        <property>
	            <key>selectAll</key>
	            <name>Select all</name>
				<visibility>
					<key>multi</key>
					<value>true</value>
				</visibility>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Show buttons to select/deselect all options.</helpHtml>
	        </property>
	        
	        <property>
	            <key>slide</key>
	            <name>Slide down</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Makes the contents hide or show when tapped, similar to how a dropdown list functions.</helpHtml>
	        </property>
	        
	        <property>
	            <key>search</key>
	            <name>Searchable</name>
				<visibility>
					<key>slide</key>
					<value>true</value>
				</visibility>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Includes a search box in the dropdown.</helpHtml>
	        </property>
	        
	        <property>
	            <key>fixedHeight</key>
	            <name>Fixed height</name>
				<visibility>
					<key>slide</key>
					<value>true</value>
				</visibility>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The open list overlaps content below it.</helpHtml>
	        </property>
	        
	        <property>
	            <key>selectAway</key>
	            <name>Select away</name>
				<visibility>
					<key>slide</key>
					<value>true</value>
				</visibility>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>false</refreshHtml>
	            <helpHtml>Select an option from the open list to close it.</helpHtml>
	        </property>
	        
	        <property>
	            <key>clickAway</key>
	            <name>Click away</name>
				<visibility>
					<key>slide</key>
					<value>true</value>
				</visibility>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>false</refreshHtml>
	            <helpHtml>Click away from the open list to close it.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxHeight</key>
	            <name>Max height</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Maximum height (with unit) of the options (optional).</helpHtml>
	        </property>
	             
	    </properties>
	    
	    <resources>
	        
	        <resource>	            
	            <type>cssFile</type>
	            <contents>styles/fonts/fontawesome/css/font-awesome.css</contents>
	        </resource>
	        
	        <!-- Some browsers choose the tff instead of the woff so both are included -->
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.woff</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.woff2</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fa-solid-900.ttf</contents>
	        </resource>
	        
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
ul.list, .list ul {
	list-style-type: none;
	padding: 0px;
	margin: 0px;
}

.list ul {
	background: inherit;
}

.list {
	display: inline-block;
	background: #FFF;
}

li.listOption {
	cursor: pointer;
}           

span.listSelectedCount {
	float: left;
} 

span.listSlider {
	float: right;
	font-family: FontAwesome-solid;
	pointer-events: none;
}

.list .listOptions {
	overflow-y: auto;
}

	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// assume we have no initial values
var values = [];
// if an initial value was given split on comma
if (this.value) values = this.value.split(",");
// assume there is no header text
var headerText = "";
// assume there are no options
var options = "";
// assume no entries have been selected
var selectedCount = 0;
// check we have options
if (this.options) {
	var maxHeight = (this.maxHeight || "").trim();
	if (maxHeight) options += "<div class='listOptions' style='max-height:" + maxHeight + "; display: none;'>";
	// if the options are a string turn them in an array
	if ($.type(this.options) == "string") this.options = JSON.parse(this.options);
	// loop the options
	for (var i in this.options) {
		// get the value
		var value = this.codes ? this.options[i].value : this.options[i].text;
		// assume not selected
		var selected = false;
		// loop the initial values
		for (var j in values) {
			if (values[j].trim() == value.trim()) {
				selected = true;
				if (this.options[i].text) headerText += this.options[i].text + ", ";
				selectedCount ++;
			}
		}
		// append the options
		options += "<li class='listOption" + (selected ? " listSelected" : "") + "'" + (this.slide && !this.maxHeight ? " style='display:none'" : "") + " data-value='" + escapeApos(value) + "'>" + this.options[i].text + "</li>";
	}
	if (maxHeight) options += "</div>";
}
// check we have a header or can slide
if (this.header || this.slide) {
	// put something in headerText if nothing
	if (!headerText) headerText = this.header;
	if (!headerText) headerText = "Header text";
	if (this.slide && selectedCount > 0) {
		headerText = headerText.substr(0, headerText.length - 2);
		options = "<span class='fas listSlider'>&#xf078;</span><li class='listSelectedCountText'><span class='listSelectedCount'>" + selectedCount + "</span><span class='listSelectedText'>" + (selectedCount === 0 ? headerText : "selected") + "</span></li><li class='listHeader" + (this.slide ? "" : " listVisible") + "'>" + headerText + "</li><li class='tools' style='display:none'>" + (this.search ? "<input type='text' placeholder='Filter' class='search'>" : "") + (this.selectAll ? "<button type='button' class='select-all'>Select all</button><button type='button' class='deselect-all'>Clear</button>" : "") + "</li>" + options;
	} else {
		options = "<span class='fas listSlider'>&#xf078;</span><li class='listSelectedCountText'><span class='listSelectedCount' style='display:none;'></span><span class='listSelectedText'>" + (selectedCount === 0 ? headerText : "selected") + "</span></li><li class='listHeader" + (this.slide ? "" : " listVisible") + "'>" + headerText + "</li><li class='tools' style='display:none'>" + (this.search ? "<input type='text' placeholder='Filter' class='search'>" : "") + (this.selectAll ? "<button type='button' class='select-all'>Select all</button><button type='button' class='deselect-all'>Clear</button>" : "") + "</li>" + options;
	}
}
// place into the list
var html = this.fixedHeight ? 
	"<div id='" + this.id + "' class='list" + getStyleClasses(this) + "' style='display:inline-grid;height:2.2em;'><ul style='display:block;'>" + options + "</ul></div>" : 
	"<ul id='" + this.id + "' class='list" + getStyleClasses(this) + "'>" + options + "</ul>";
// return
return html;
	        ]]>
	    </getHtmlFunction> 
	    
	    <updateChildObjects>true</updateChildObjects>
	    
	    <getDetailsFunction>
	        <![CDATA[
return {header: this.header, slide: this.slide && { selectAway: this.selectAway, clickAway: this.clickAway, search: this.search }, multi: this.multi && { selectAll: this.selectAll }, maxHeight: this.maxHeight };
	        ]]>
	    </getDetailsFunction>
	    	    	    
	    <setDataJavaScript>
	        <![CDATA[
if (data != null && data !== undefined) {
	var control = $("#" + id);
	var list = control.is("ul") ? control : control.find("ul");
	var header = list.find("li.listHeader");
	var selectedCount = list.find(".listSelectedCount");
	var listSelectedText = list.find(".listSelectedText");
	var hide = !list.is(".listVisible");
	if (details.maxHeight) list = list.find(".listOptions");
	data = makeDataObject(data, field);
	if (data.rows && data.fields) {
		for (var i in data.rows) {
			var row = data.rows[i];		
			var text = "";
			var value = "";
			if (data.fields) {
				for (var j in data.fields) {
					if (data.fields[j].toLowerCase() == "text") text = data.rows[i][j];
					if (data.fields[j].toLowerCase() == "value") value = data.rows[i][j];
				}
			}
			if (!text) text = row[0];
			if (!value && row[1]) value = row[1];
			list.append("<li class='listOption'" + (hide && !details.maxHeight ? " style='display:none;'" : "") + " data-value='" + value + "'>" + text + "</li>");
			list.find("li.listOption").last().click( details, function(ev) {
				if (!ev.data.multi) list.find(".listOption").removeClass("listSelected");
				$(ev.target).toggleClass("listSelected");
				if (ev.data.slide) {
					var text = "";
					var count = 0;
					list.find("li.listSelected").each( function() { 
							text += $(this).html() + ", "; 
							count++;
					});
					if (count > 0) {
						text = text.substr(0, text.length - 2);
						selectedCount.text(count).show();
						listSelectedText.text("selected");
					} else {
						text = details.header;
						selectedCount.hide();
						listSelectedText.text(details.header);
					}
					header.html(text);
				}
				if (details.slide && details.slide.selectAway) {
					header.removeClass("listVisible");
					list.removeClass("listVisible");
					var slidables = list.find((details.maxHeight ? ".listOptions, " : ".listOption, ") + ".tools");
					slidables.slideUp(250, function() {
						list.children("span.listSlider").html("&#xf078;");
					});
				}
				list.trigger("change");
			});
		}
	} 
}
        
	        ]]>
	    </setDataJavaScript>
	    	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    	    	    
	    <styles>
	        <style>
	            <name>List</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>List header</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " li.listHeader";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>List options</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " li.listOption";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>List options hover</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " li.listOption:hover";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Selected options</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " li.listSelected";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Selected count</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " span.listSelectedCount";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Slide indicator</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " span.listSlider";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <initJavaScript>
	        <![CDATA[
var control = $("#" + id);
var list = control.is("ul") ? control : control.find("ul");
var selectedCount = list.find(".listSelectedCount");
var listSelectedText = list.find(".listSelectedText");

if (details.slide) {
	var header = list.find("li.listHeader, .listSelectedCountText");
	var slidables = list.find((details.maxHeight ? ".listOptions, " : ".listOption, ") + ".tools");
	header.click( function(ev) {
		header.toggleClass("listVisible");
		list.toggleClass("listVisible");
		slidables.slideToggle(250, function() {
			if (header.hasClass("listVisible")) {
				list.find("span.listSlider").html("&#xf077;");
			} else {
				list.find("span.listSlider").html("&#xf078;");
			}
		});  				
	});	
	
	// if clickAway, listen for clicks that don't originate from the list and close it
	if (details.slide.clickAway) {
		$(window).click(function(ev) {
			if (!$.contains(control[0], ev.target)) {
				header.removeClass("listVisible");
				list.removeClass("listVisible");
				slidables.slideUp(250, function() {
					list.find("span.listSlider").html("&#xf078;");
				});
			}
		});
	}
}

var header = list.find("li.listHeader");
list.find("li.listOption").click( details, function(ev) {
	if (!ev.data.multi) list.find(".listOption").removeClass("listSelected");
	$(ev.target).toggleClass("listSelected");
	if (ev.data.slide) {
		var text = "";
		var count = 0;
		list.find("li.listSelected").each( function() { 
				text += $(this).html() + ", "; 
				count++;
		});
		if (count > 0) {
			text = text.substr(0, text.length - 2);
			selectedCount.text(count).show();
			listSelectedText.text("selected");
		} else {
			text = details.header;
			selectedCount.hide();
			listSelectedText.text(details.header);
		}
		header.html(text);
	}
	if (details.slide && details.slide.selectAway) {
		header.removeClass("listVisible");
		list.removeClass("listVisible");
		var slidables = list.find((details.maxHeight ? ".listOptions, " : ".listOption, ") + ".tools");
		slidables.slideUp(250, function() {
			list.children("span.listSlider").html("&#xf078;");
		});
	}
	list.trigger("change");
});

if (details.slide && details.slide.search) {
	var search = list.find(".search");
	search.on("input click", function() {
		list.find("li.listOption").each(function() {
			if ($(this).attr("data-value").toLowerCase().indexOf(search.val().toLowerCase()) != -1
				|| $(this).text().toLowerCase().indexOf(search.val().toLowerCase()) != -1
				|| !search.val()) {
				$(this).slideDown(250);
			} else {
				$(this).slideUp(250);
			}
		});
	});
}

list.find(".select-all").on("click", function() {
	list.find(".listOption").addClass("listSelected");
	var text = "";
	var count = 0;
	list.find("li.listSelected").each( function() { 
			text += $(this).html() + ", "; 
			count ++;
	});
	if (count > 0) {
		text = text.substr(0, text.length - 2);
		selectedCount.text(count).show();
		listSelectedText.text("selected");
	} else {
		text = details.header;
		selectedCount.hide();
		listSelectedText.text(details.header);
	}
	header.html(text);
	list.trigger("change");
});

list.find(".deselect-all").on("click", function() {
	list.find(".listOption").removeClass("listSelected");
	var text = "";
	var count = 0;
	list.find("li.listSelected").each( function() { 
			text += $(this).html() + ", "; 
			count ++;
	});
	if (count > 0) {
		text = text.substr(0, text.length - 2);
		selectedCount.text(count).show();
		listSelectedText.text("selected");
	} else {
		text = details.header;
		selectedCount.hide();
		listSelectedText.text(details.header);
	}
	header.html(text);
	list.trigger("change");
});
	        
	        ]]>
	    </initJavaScript>
	    
		<runtimeProperties>
	        <runtimeProperty>
	   	        <type>value</type>
	   	        <name>Selected values</name>
	   	        <getPropertyFunction>
	   	            <![CDATA[
var control = $("#" + id);
var list = control.is("ul") ? control : control.find("ul");
var value = "";
list.find("li.listSelected").each( function() { 
	value += $(this).attr("data-value") + ","; 
});	        
if (value) {
	return value.substring(0, value.length - 1);
} else {
	return null;
}	   	            
	   	            ]]>
	   	        </getPropertyFunction>
	   	        <setPropertyJavaScript>
			        <![CDATA[
if (data != null && data !== undefined) {
	var data = makeDataObject(data);			        
	var values = [];
	if (data && data.rows[0][0]) {
		values = data.rows[0][0].split(",");
	} else {
		values = null;
	}
	var control = $("#" + id);
	var list = control.is("ul") ? control : control.find("ul");
	var header = list.children("li.listHeader");
	var selectedCount = list.find("span.listSelectedCount");
	if (!details.multi || values == null) list.find(".listOption").removeClass("listSelected");
	if (values) {	
		var headerText = "";
		var selectCount = 0;
		list.find("li.listOption").each( function() {		
			var option = $(this);
			var match = false;
			for (var i in values) {			
				if (values[i].trim() == option.attr("data-value")) {
					option.addClass("listSelected");
					headerText += option.text() + ", ";
					selectCount ++;
					match = true;
					break;
				} 
				option.removeClass("listSelected");
			}
		});
		if (selectCount > 0) {
			headerText = headerText.substring(0,headerText.length - 2);			
			if (details.multi && details.slide) selectedCount.text(selectCount).show();
		} else {			
			headerText = details.header;
			selectedCount.hide();
		}
		header.html(headerText);	
	} else {
		header.html(details.header);
		selectedCount.hide();
	}
}
				    ]]>	  	   	            
	   	        </setPropertyJavaScript>	   	        
	   	    </runtimeProperty>
	    </runtimeProperties>
	    	    
	</control>
</controls>